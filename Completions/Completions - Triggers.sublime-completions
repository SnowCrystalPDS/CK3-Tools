{
   "scope": "text.pdx",

   "completions":
   [
        {
        	"trigger": "blood_legacy_track_perks",
        	"contents": "blood_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "dynasty_can_unlock_relevant_perk",
        	"contents": "dynasty_can_unlock_relevant_perk = yes\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "Can the scoped dynasty unlock a 'relevant' perk?",
        },
        {
        	"trigger": "dynasty_num_unlocked_perks",
        	"contents": "dynasty_num_unlocked_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "Does the dynasty has the required number of unlocked dynasty perks?",
        },
        {
        	"trigger": "dynasty_prestige",
        	"contents": "dynasty_prestige = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "Does the dynasty have the required prestige?",
        },
        {
        	"trigger": "dynasty_prestige_level",
        	"contents": "dynasty_prestige_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "Does the dynasty have the required prestige level?",
        },
        {
        	"trigger": "ep1_culture_legacy_track_perks",
        	"contents": "ep1_culture_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "ep2_activities_legacy_track_perks",
        	"contents": "ep2_activities_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "erudition_legacy_track_perks",
        	"contents": "erudition_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "fp1_adventure_legacy_track_perks",
        	"contents": "fp1_adventure_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "fp1_pillage_legacy_track_perks",
        	"contents": "fp1_pillage_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "fp2_coterie_legacy_track_perks",
        	"contents": "fp2_coterie_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "fp2_urbanism_legacy_track_perks",
        	"contents": "fp2_urbanism_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "glory_legacy_track_perks",
        	"contents": "glory_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "guile_legacy_track_perks",
        	"contents": "guile_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "has_dynasty_perk",
        	"contents": "has_dynasty_perk = ${1:<perk>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "Does the dynasty have this dynasty perk?",
        },
        {
        	"trigger": "kin_legacy_track_perks",
        	"contents": "kin_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "law_legacy_track_perks",
        	"contents": "law_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "warfare_legacy_track_perks",
        	"contents": "warfare_legacy_track_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Dynasty"],
        	"details": "How many perks in the lifestyle does this dynasty have?",
        },
        {
        	"trigger": "has_active_locale",
        	"contents": "has_active_locale = ${1:<locale_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Does the scoped activity have the designated locale active?",
        },
        {
        	"trigger": "has_activity_option",
        	"contents": "has_activity_option = {\n\tcategory = ${1:<key>}\n\toption = ${2:<key>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Does the scoped activity have the option in the given category active?",
        },
        {
        	"trigger": "has_activity_type",
        	"contents": "has_activity_type = ${1:<activity_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Does the scoped activity have the given activity type?",
        },
        {
        	"trigger": "has_current_phase",
        	"contents": "has_current_phase = ${1:<phase>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Does the scoped activity have the given phase active?",
        },
        {
        	"trigger": "has_phase",
        	"contents": "has_phase = ${1:<phase>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a phase exists on this activity.",
        },
        {
        	"trigger": "has_phase (type)",
        	"contents": "has_phase = {\n\ttype = ${1:<type>}\n\tlocation = ${2:<province>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a phase exists on this activity.",
        },
        {
        	"trigger": "has_phase_future",
        	"contents": "has_phase_future = ${1:<phase>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a future phase exists on this activity.",
        },
        {
        	"trigger": "has_phase_future (type)",
        	"contents": "has_phase_future = {\n\ttype = ${1:<type>}\n\tlocation = ${2:<province>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a future phase exists on this activity.",
        },
        {
        	"trigger": "has_phase_past",
        	"contents": "has_phase_past = ${1:<phase>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a past phase exists on this activity.",
        },
        {
        	"trigger": "has_phase_past (type)",
        	"contents": "has_phase_past = {\n\ttype = ${1:<type>}\n\tlocation = ${2:<province>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if a past phase exists on this activity.",
        },
        {
        	"trigger": "is_activity_complete",
        	"contents": "is_activity_complete = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if the current activity is completed or not.",
        },
        {
        	"trigger": "is_current_phase_active",
        	"contents": "is_current_phase_active = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if the current activity phase is in the active state.",
        },
        {
        	"trigger": "is_open_invite_activity",
        	"contents": "is_open_invite_activity = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Check if the scoped activity is an open invite activity.",
        },
        {
        	"trigger": "is_required_special_guest",
        	"contents": "is_required_special_guest = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Is the target character a required special guest in the scoped activity?",
        },
        {
        	"trigger": "is_special_guest",
        	"contents": "is_special_guest = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<key>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "Is the target character a special guest in the scoped activity?",
        },
        {
        	"trigger": "num_future_phases",
        	"contents": "num_future_phases = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "The number of future phases for the scoped activity.",
        },
        {
        	"trigger": "num_past_phases",
        	"contents": "num_past_phases = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "The number of past phases for the scoped activity.",
        },
        {
        	"trigger": "num_phases",
        	"contents": "num_phases = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Activity"],
        	"details": "The number total number of planned phases for the scoped activity.",
        },
        {
        	"trigger": "can_get_innovation_from",
        	"contents": "can_get_innovation_from = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Can receive a random applicable innovation from another culture.",
        },
        {
        	"trigger": "cultural_acceptance",
        	"contents": "cultural_acceptance = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "The cultural acceptance of the scoped culture with the target culture.",
        },
        {
        	"trigger": "culture_age",
        	"contents": "culture_age = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Checks the age of the scope culture in years.",
        },
        {
        	"trigger": "culture_number_of_counties",
        	"contents": "culture_number_of_counties = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "How many counties are there of this culture?",
        },
        {
        	"trigger": "culture_overlaps_geographical_region",
        	"contents": "culture_overlaps_geographical_region = ${1:<region>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Checks if any county with this culture is in the given geographical region.",
        },
        {
        	"trigger": "free_tradition_slot",
        	"contents": "free_tradition_slot = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "How many free tradition slot are in the scoped culture.",
        },
        {
        	"trigger": "has_all_innovations",
        	"contents": "has_all_innovations = {\n\twith_flag = ${1:<flag_name>}\n\twithout_flag = ${2:<flag_name>}\n\tculture_era = ${3:<culture_era>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Has the culture discovered all innovations matching the filter?",
        },
        {
        	"trigger": "has_building_gfx",
        	"contents": "has_building_gfx = ${1:<building_gfx>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this building gfx?",
        },
        {
        	"trigger": "has_clothing_gfx",
        	"contents": "has_clothing_gfx = ${1:<clothing_gfx>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this clothing gfx?",
        },
        {
        	"trigger": "has_coa_gfx",
        	"contents": "has_coa_gfx = ${1:<coa_gfx>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this CoA gfx?",
        },
        {
        	"trigger": "has_cultural_era_or_later",
        	"contents": "has_cultural_era_or_later = ${1:<culture_era>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Has this culture achieved specified era?",
        },
        {
        	"trigger": "has_cultural_parameter",
        	"contents": "has_cultural_parameter = ${1:<parameter>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this cultural parameter?",
        },
        {
        	"trigger": "has_cultural_pillar",
        	"contents": "has_cultural_pillar = ${1:<pillar>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this cultural pillar?",
        },
        {
        	"trigger": "has_cultural_tradition",
        	"contents": "has_cultural_tradition = ${1:<tradition>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this cultural tradition?",
        },
        {
        	"trigger": "has_innovation",
        	"contents": "has_innovation = ${1:<innovation>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Have the culture discovered this innovation?",
        },
        {
        	"trigger": "has_innovation_flag",
        	"contents": "has_innovation_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Has the culture discovered an innovation with this flag?",
        },
        {
        	"trigger": "has_name_list",
        	"contents": "has_name_list = ${1:<name>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this name list?",
        },
        {
        	"trigger": "has_primary_name_list",
        	"contents": "has_primary_name_list = ${1:<name>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this name list as its first name list?",
        },
        {
        	"trigger": "has_same_culture_ethos",
        	"contents": "has_same_culture_ethos = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have the same ethos as the target?",
        },
        {
        	"trigger": "has_same_culture_heritage",
        	"contents": "has_same_culture_heritage = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have the same heritage as the target?",
        },
        {
        	"trigger": "has_same_culture_language",
        	"contents": "has_same_culture_language = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have the same language as the target?",
        },
        {
        	"trigger": "has_same_culture_martial_tradition",
        	"contents": "has_same_culture_martial_tradition = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have the same martial tradition as the target?",
        },
        {
        	"trigger": "has_unit_gfx",
        	"contents": "has_unit_gfx = ${1:<unit_gfx>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have this unit gfx?",
        },
        {
        	"trigger": "is_divergent_culture",
        	"contents": "is_divergent_culture = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Checks if the scope culture was created by diverging from a single parent culture.",
        },
        {
        	"trigger": "is_hybrid_culture",
        	"contents": "is_hybrid_culture = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Checks if the scope culture was created from a hybridization of two cultures.",
        },
        {
        	"trigger": "num_discovered_innovations",
        	"contents": "num_discovered_innovations = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the culture have the required number of discovered innovations?",
        },
        {
        	"trigger": "num_discovered_innovations_in_era (single line)",
        	"contents": "num_discovered_innovations_in_era:${2:<era>} = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the scoped culture have the required number of active discovered innovations in the specified era?",
        },
        {
        	"trigger": "num_discovered_innovations_in_era",
        	"contents": "num_discovered_innovations_in_era = {\n\tera = ${1:<era>}\n\tvalue = ${2:<script_value>}}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture"],
        	"details": "Does the scoped culture have the required number of active discovered innovations in the specified era?",
        },
        {
        	"trigger": "has_memory_category",
        	"contents": "has_memory_category = ${1:<category>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Does the character memory have this memory category?",
        },
        {
        	"trigger": "has_memory_participant",
        	"contents": "has_memory_participant = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Does the character memory have this target character as a participant?",
        },
        {
        	"trigger": "has_memory_type",
        	"contents": "has_memory_type = ${1:<type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Does the character memory have this memory type?",
        },
        {
        	"trigger": "is_memory_of_travel",
        	"contents": "is_memory_of_travel = ${1:<travel_plan>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Is the scoped memory a memory of a specific travel plan?",
        },
        {
        	"trigger": "memory_age_years",
        	"contents": "memory_age_years = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "How many years since the memory was created (rounded down).",
        },
        {
        	"trigger": "memory_creation_date",
        	"contents": "memory_creation_date = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Date when the memory was created.",
        },
        {
        	"trigger": "memory_end_date",
        	"contents": "memory_end_date = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Memory"],
        	"details": "Date when the memory will be forgotten.",
        },
        {
        	"trigger": "has_house_artifact_claim",
        	"contents": "has_house_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "House"],
        	"details": "Does the scoped dynasty house have a personal claim on the target artifact?",
        },
        {
        	"trigger": "can_fire_position",
        	"contents": "can_fire_position = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "House"],
        	"details": "Check if the scope task's councillor can be fired.",
        },
        {
        	"trigger": "can_be_exposed_by",
        	"contents": "can_be_exposed_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Can the scope secret be exposed by the target character?",
        },
        {
        	"trigger": "is_criminal_for",
        	"contents": "is_criminal_for = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is this secret criminal for the target participant?",
        },
        {
        	"trigger": "is_known_by",
        	"contents": "is_known_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is the scope secret known by the target character?",
        },
        {
        	"trigger": "is_shunned_for",
        	"contents": "is_shunned_for = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is this secret shunned for the target participant?",
        },
        {
        	"trigger": "is_shunned_or_criminal_for",
        	"contents": "is_shunned_or_criminal_for = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is this secret shunned or criminal for the target participant?",
        },
        {
        	"trigger": "is_spent_by",
        	"contents": "is_spent_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Has the scope secret been spent by the target character?",
        },
        {
        	"trigger": "local_player_knows_this_secret",
        	"contents": "local_player_knows_this_secret = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Does the local player have knowledge about the secret?",
        },
        {
        	"trigger": "same_secret_type_as",
        	"contents": "same_secret_type_as = ${1:<secret>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is the scope secret of the same type as the target secret?",
        },
        {
        	"trigger": "secret_type",
        	"contents": "secret_type = ${1:<secret_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Secret"],
        	"details": "Is the scope secret of the specified type?",
        },
        {
        	"trigger": "is_in_family",
        	"contents": "is_in_family = ${1:<faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Religion"],
        	"details": "Is the scoped faith in a given religious family?",
        },
        {
        	"trigger": "army_is_moving",
        	"contents": "army_is_moving = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is this army moving?",
        },
        {
        	"trigger": "army_max_size",
        	"contents": "army_max_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What size is this army's max size?",
        },
        {
        	"trigger": "army_size",
        	"contents": "army_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What size is this army?",
        },
        {
        	"trigger": "can_disband_army",
        	"contents": "can_disband_army = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Can we disband this army?",
        },
        {
        	"trigger": "is_army_in_combat",
        	"contents": "is_army_in_combat = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is the scoped army in combat?",
        },
        {
        	"trigger": "is_army_in_raid",
        	"contents": "is_army_in_raid = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is the scoped army in a raid (this includes a raid interrupted by combat)?",
        },
        {
        	"trigger": "is_army_in_siege",
        	"contents": "is_army_in_siege = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is the scoped army in a siege (this includes a siege interrupted by combat)?",
        },
        {
        	"trigger": "is_army_in_siege_relevant_for",
        	"contents": "is_army_in_siege_relevant_for = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is the scoped army in a siege that is relevant to the target character?",
        },
        {
        	"trigger": "is_raid_army",
        	"contents": "is_raid_army = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "Is the scoped army a raid army?",
        },
        {
        	"trigger": "raid_loot",
        	"contents": "raid_loot = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "How much raid loot is the army carrying?",
        },
        {
        	"trigger": "total_army_damage",
        	"contents": "total_army_damage = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What is the army's total damage stat in its current location?",
        },
        {
        	"trigger": "total_army_pursuit",
        	"contents": "total_army_pursuit = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What is the army's total pursuit stat in its current location?",
        },
        {
        	"trigger": "total_army_screen",
        	"contents": "total_army_screen = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What is the army's total screen stat in its current location?",
        },
        {
        	"trigger": "total_army_siege_value",
        	"contents": "total_army_siege_value = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What is the army's total siege value stat in its current location?",
        },
        {
        	"trigger": "total_army_toughness",
        	"contents": "total_army_toughness = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Army"],
        	"details": "What is the army's total toughness stat in its current location?",
        },
        {
        	"trigger": "can_cancel",
        	"contents": "can_cancel = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Can this travel plan be cancelled?",
        },
        {
        	"trigger": "current_danger_value",
        	"contents": "current_danger_value = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Danger value of the current province the travel plan is in.",
        },
        {
        	"trigger": "days_travelled",
        	"contents": "days_travelled = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Total number of days since this travel plan started.",
        },
        {
        	"trigger": "departure_date",
        	"contents": "departure_date = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Compare the date the travel plan started.",
        },
        {
        	"trigger": "final_destination_arrival_date",
        	"contents": "final_destination_arrival_date = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Estimation date of arrival at the final destination.",
        },
        {
        	"trigger": "final_destination_arrival_days",
        	"contents": "final_destination_arrival_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Estimation of days until we arrive at the final destination?",
        },
        {
        	"trigger": "final_destination_progress",
        	"contents": "final_destination_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Time progress (0.0 - 1.0) towards the final destination of the travel plan.",
        },
        {
        	"trigger": "has_travel_option",
        	"contents": "has_travel_option = ${1:<travel_option>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Does the travel plan have this travel option active?",
        },
        {
        	"trigger": "is_aborted",
        	"contents": "is_aborted = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Is this travel plan aborted?",
        },
        {
        	"trigger": "is_cancelled",
        	"contents": "is_cancelled = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Is this travel plan cancelled?",
        },
        {
        	"trigger": "is_completed",
        	"contents": "is_completed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Is this travel plan completed?",
        },
        {
        	"trigger": "is_paused",
        	"contents": "is_paused = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Is this travel plan paused?",
        },
        {
        	"trigger": "next_destination_arrival_date",
        	"contents": "next_destination_arrival_date = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Estimation date of arrival at the next destination.",
        },
        {
        	"trigger": "next_destination_arrival_days",
        	"contents": "next_destination_arrival_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Estimation of days until we arrive at the next destination.",
        },
        {
        	"trigger": "next_destination_progress",
        	"contents": "next_destination_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Time progress (0.0 - 1.0) towards the next destination of the travel plan, compared to departure date of the previous destination.",
        },
        {
        	"trigger": "num_entourage_characters",
        	"contents": "num_entourage_characters = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Size of the travel plan entourage.",
        },
        {
        	"trigger": "num_options",
        	"contents": "num_options = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Number of travel options selected.",
        },
        {
        	"trigger": "travel_safety",
        	"contents": "travel_safety = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Gets the current travel safety for travel.",
        },
        {
        	"trigger": "travel_speed",
        	"contents": "travel_speed = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "Gets the current travel speed for travel (percentage points above 100%).",
        },
        {
        	"trigger": "was_activity_completed",
        	"contents": "was_activity_completed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "If there is/was an activity attached to this travel plan, was it completed?",
        },
        {
        	"trigger": "was_activity_invalidated",
        	"contents": "was_activity_invalidated = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Travel Plan"],
        	"details": "If there is/was an activity attached to this travel plan, was it invalidated?",
        },
        {
        	"trigger": "controls_holy_site",
        	"contents": "controls_holy_site = ${1:<holy_site>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the faith control a holy site?",
        },
        {
        	"trigger": "controls_holy_site_with_flag",
        	"contents": "controls_holy_site_with_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the faith control a holy site with the given flag?",
        },
        {
        	"trigger": "estimated_faith_strength",
        	"contents": "estimated_faith_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "How strong is the scoped faith?",
        },
        {
        	"trigger": "faith_hostility_level",
        	"contents": "faith_hostility_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "What is the faith's hostility level towards the target faith?",
        },
        {
        	"trigger": "faith_hostility_level_comparison",
        	"contents": "faith_hostility_level_comparison = ${1:<faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Compares the scoped faith's hostility level towards two other faiths.",
        },
        {
        	"trigger": "fervor",
        	"contents": "fervor = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "What is the faith's fervor?",
        },
        {
        	"trigger": "has_allowed_gender_for_clergy",
        	"contents": "has_allowed_gender_for_clergy = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Is the target character of the allowed gender to be clergy of the faith?",
        },
        {
        	"trigger": "has_doctrine",
        	"contents": "has_doctrine = ${1:<doctrine>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the given faith have the given doctrine?",
        },
        {
        	"trigger": "has_doctrine_parameter",
        	"contents": "has_doctrine_parameter = ${1:<doctrine_parameter>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the given faith have the given doctrine parameter?",
        },
        {
        	"trigger": "has_dominant_ruling_gender",
        	"contents": "has_dominant_ruling_gender = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Is the target character's gender a dominant ruling gender of the faith?",
        },
        {
        	"trigger": "has_graphical_faith",
        	"contents": "has_graphical_faith = ${1:<graphical_faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the faith have this graphical faith?",
        },
        {
        	"trigger": "has_icon",
        	"contents": "has_icon = ${1:<icon>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the faith have the given icon?",
        },
        {
        	"trigger": "has_preferred_gender_for_clergy",
        	"contents": "has_preferred_gender_for_clergy = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Is the target character of the preferred gender to be clergy of the faith?",
        },
        {
        	"trigger": "num_character_followers",
        	"contents": "num_character_followers = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Returns how many characters follow the given faith.",
        },
        {
        	"trigger": "num_county_followers",
        	"contents": "num_county_followers = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Returns how many counties follow the given faith.",
        },
        {
        	"trigger": "religion_tag",
        	"contents": "religion_tag = ${1:<tag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Checks the tag of the religion of the current faith.",
        },
        {
        	"trigger": "trait_is_sin",
        	"contents": "trait_is_sin = ${1:<trait>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the scoped faith consider the given trait a sin?",
        },
        {
        	"trigger": "trait_is_virtue",
        	"contents": "trait_is_virtue = ${1:<trait>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faith"],
        	"details": "Does the scoped faith consider the given trait a virtue?",
        },
        {
        	"trigger": "has_struggle_phase_parameter",
        	"contents": "has_struggle_phase_parameter = ${1:<parameter_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Does the given struggle's current phase have the given parameter?",
        },
        {
        	"trigger": "is_culture_involved_in_struggle",
        	"contents": "is_culture_involved_in_struggle = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Is the culture involved in struggle?",
        },
        {
        	"trigger": "is_faith_involved_in_struggle",
        	"contents": "is_faith_involved_in_struggle = ${1:<faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Is the faith involved in struggle?",
        },
        {
        	"trigger": "is_struggle_phase",
        	"contents": "is_struggle_phase = ${1:<struggle_phase>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Is the scope struggle's current phase particular phase?",
        },
        {
        	"trigger": "is_struggle_type",
        	"contents": "is_struggle_type = ${1:<struggle_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Is the scope struggle's type particular type?",
        },
        {
        	"trigger": "phase_has_catalyst",
        	"contents": "phase_has_catalyst = ${1:<catalyst_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Struggle"],
        	"details": "Is any of the future phases affected by the given catalyst?",
        },
        {
        	"trigger": "days_until_ghw_launch",
        	"contents": "days_until_ghw_launch = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "How many days is it until the given GHW launches its war?",
        },
        {
        	"trigger": "ghw_attackers_strength",
        	"contents": "ghw_attackers_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": " What is the max military strength of the pledged attackers in the given Great Holy War?",
        },
        {
        	"trigger": "ghw_defenders_strength",
        	"contents": "ghw_defenders_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "What is the max military strength of the pledged defenders in the given Great Holy War?",
        },
        {
        	"trigger": "ghw_war_chest_gold",
        	"contents": "ghw_war_chest_gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "How much gold is in the great holy war's war chest?",
        },
        {
        	"trigger": "ghw_war_chest_piety",
        	"contents": "ghw_war_chest_piety = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "How much piety is in the great holy war's war chest?",
        },
        {
        	"trigger": "ghw_war_chest_prestige",
        	"contents": "ghw_war_chest_prestige = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "How much prestige is in the great holy war's war chest?",
        },
        {
        	"trigger": "has_forced_defender",
        	"contents": "has_forced_defender = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "Is the target character forced to be a defender in the given Great Holy War?",
        },
        {
        	"trigger": "has_pledged_attacker",
        	"contents": "has_pledged_attacker = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "Is the target character pledged as an attacker in the given Great Holy War?",
        },
        {
        	"trigger": "has_pledged_defender",
        	"contents": "has_pledged_defender = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "Is the target character pledged as a defender in the given Great Holy War?",
        },
        {
        	"trigger": "is_directed_ghw",
        	"contents": "is_directed_ghw = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "GHW"],
        	"details": "Is the scoped GHW a directed GHW?",
        },
        {
        	"trigger": "obligation_level_score",
        	"contents": "obligation_level_score = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Vassal Contract Obligation Level"],
        	"details": "The score in favour of the vassal for the scoped vassal contract obligation level?",
        },
        {
        	"trigger": "accolade_type_tier",
        	"contents": "accolade_type_tier = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Is the scoped Accolade Type's tier equal to?",
        },
        {
        	"trigger": "type_has_accolade_category",
        	"contents": "type_has_accolade_category = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Does the scoped Accolade Type have the given category?",
        },
        {
        	"trigger": "has_tradition_category",
        	"contents": "has_tradition_category = ${1:<tradition_category>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Culture Tradition"],
        	"details": "Does the scoped tradition belong to the specified category?",
        },
        {
        	"trigger": "artifact_durability",
        	"contents": "artifact_durability = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Does this artifact have the required durability?",
        },
        {
        	"trigger": "artifact_max_durability",
        	"contents": "artifact_max_durability = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Does this artifact have the required max durability?",
        },
        {
        	"trigger": "artifact_slot_type",
        	"contents": "artifact_slot_type = ${1:<inventory_slot>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the artifact of the given inventory slot type?",
        },
        {
        	"trigger": "artifact_type",
        	"contents": "artifact_type = ${1:<artifact_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the artifact of the given type?",
        },
        {
        	"trigger": "can_be_claimed_by",
        	"contents": "can_be_claimed_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Can the scoped artifact be claimed by the given character?",
        },
        {
        	"trigger": "category",
        	"contents": "category = ${1:<artifact_category>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the scoped artifact of given category?",
        },
        {
        	"trigger": "has_artifact_feature",
        	"contents": "has_artifact_feature = ${1:<artifact_feature>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Does the artifact have the given feature?",
        },
        {
        	"trigger": "has_artifact_feature_group",
        	"contents": "has_artifact_feature_group = ${1:<artifact_feature_group>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Does the artifact have the given feature group?",
        },
        {
        	"trigger": "is_equipped",
        	"contents": "is_equipped = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the scoped artifact currently equipped in its owners inventory?",
        },
        {
        	"trigger": "is_unique",
        	"contents": "is_unique = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the scoped artifact unique?",
        },
        {
        	"trigger": "num_artifact_kills",
        	"contents": "num_artifact_kills = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "How many kills has this artifact been used in?",
        },
        {
        	"trigger": "rarity",
        	"contents": "rarity = ${1:<artifact_rarity>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Is the scoped artifact of given rarity?",
        },
        {
        	"trigger": "should_decay",
        	"contents": "should_decay = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Artifact"],
        	"details": "Should the scoped artifact decay with time?",
        },
        {
        	"trigger": "mercenary_company_expiration_days",
        	"contents": "mercenary_company_expiration_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Mercenary Company"],
        	"details": "How many days are left in the mercenary contract?",
        },
        {
        	"trigger": "add_to_temporary_list",
        	"contents": "add_to_temporary_list = ${1:<list>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Saves a temporary target for use during the trigger execution.",
        },
        {
        	"trigger": "can_start_tutorial_lesson",
        	"contents": "can_start_tutorial_lesson = ${1:<tutorial_lesson>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Can the specified tutorial lesson be started?",
        },
        {
        	"trigger": "current_computer_date",
        	"contents": "current_computer_date = ${1:<date>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current computer date.",
        },
        {
        	"trigger": "current_computer_date_day",
        	"contents": "current_computer_date_day = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current computer day.",
        },
        {
        	"trigger": "current_computer_date_month",
        	"contents": "current_computer_date_month = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current computer month.",
        },
        {
        	"trigger": "current_computer_date_year",
        	"contents": "current_computer_date_year = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current computer year.",
        },
        {
        	"trigger": "current_date",
        	"contents": "current_date = ${1:<date>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current ingame date..",
        },
        {
        	"trigger": "current_day",
        	"contents": "current_day = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current ingame day [1, 31].",
        },
        {
        	"trigger": "current_month",
        	"contents": "current_month = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current ingame month [1..12].",
        },
        {
        	"trigger": "current_tooltip_depth",
        	"contents": "current_tooltip_depth = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "What is number of tooltips open rigth now?",
        },
        {
        	"trigger": "current_year",
        	"contents": "current_year = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the current ingame year.",
        },
        {
        	"trigger": "custom_description",
        	"contents": "custom_description = {\n\ttext = ${1:<loc_key>}\n\t${2:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one.",
        },
        {
        	"trigger": "custom_description (all values)",
        	"contents": "custom_description = {\n\ttext = ${1:<loc_key>}\n\tsubject = ${2:<character>}\n\tobject = ${3:<character>}\n\tvalue = ${4:<script_value>}\n\t${5:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one.",
        },
        {
        	"trigger": "custom_tooltip",
        	"contents": "custom_tooltip = {\n\ttext = ${1:<loc_key>}\n\t${2:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Replaces the tooltips for the enclosed triggers with a custom text.",
        },
        {
        	"trigger": "debug_log",
        	"contents": "debug_log = ${1:<loc_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Log whether the parent trigger succeeded or failed.",
        },
        {
        	"trigger": "debug_log_details",
        	"contents": "debug_log_details = ${1:<loc_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Log whether the parent trigger succeeded or failed. Log which children succeeded or failed.",
        },
        {
        	"trigger": "debug_only",
        	"contents": "debug_only = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if the game is in debug mode or not.",
        },
        {
        	"trigger": "game_start_date",
        	"contents": "game_start_date = ${1:<date>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Compare the date of the bookmarked game launched.",
        },
        {
        	"trigger": "global_variable_list_size",
        	"contents": "global_variable_list_size = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks the size of a variable list.",
        },
        {
        	"trigger": "has_dlc",
        	"contents": "has_dlc = ${1:<dlc>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Does the host have this DLC.",
        },
        {
        	"trigger": "has_dlc_feature",
        	"contents": "has_dlc_feature = ${1:<dlc_feature>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Does the host have DLC that enables this particular feature.",
        },
        {
        	"trigger": "has_game_rule",
        	"contents": "has_game_rule = ${1:<game_rule>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the given game rule setting enabled?",
        },
        {
        	"trigger": "has_global_variable",
        	"contents": "has_global_variable = ${1:<variable>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_global_variable_list",
        	"contents": "has_global_variable_list = ${1:<variable_list>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_local_player_open_court_event",
        	"contents": "has_local_player_open_court_event = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the local player opened a court event in the royal court view?",
        },
        {
        	"trigger": "has_local_player_seen_unopened_court_event",
        	"contents": "has_local_player_seen_unopened_court_event = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the local player seen the unopened court event(s) waiting in the royal court view?",
        },
        {
        	"trigger": "has_local_player_unopened_court_event",
        	"contents": "has_local_player_unopened_court_event = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the local player an unopened court event waiting in the royal court view?",
        },
        {
        	"trigger": "has_local_variable",
        	"contents": "has_local_variable = ${1:<variable>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_local_variable_list",
        	"contents": "has_local_variable_list = ${1:<variable_list>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_map_mode",
        	"contents": "has_map_mode = ${1:<map_mode>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if the current map mode is the specified one.",
        },
        {
        	"trigger": "has_multiple_players",
        	"contents": "has_multiple_players = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Does the game have at least two players currently connected?",
        },
        {
        	"trigger": "has_reward_item",
        	"contents": "has_reward_item = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Does the player have a reward item?",
        },
        {
        	"trigger": "has_variable",
        	"contents": "has_variable = ${1:<variable>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_variable_list",
        	"contents": "has_variable_list = ${1:<variable_list>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the current scope has the specified variable set.",
        },
        {
        	"trigger": "has_vassal_stance",
        	"contents": "has_vassal_stance = ${1:<vassal_stance>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Does the scoped vassal character have the given vassal stance?",
        },
        {
        	"trigger": "has_war_result_message_with_outcome",
        	"contents": "has_war_result_message_with_outcome = ${1:<victory/defeeat/white_peace/invalidated/any>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is there a war result message with the specified outcome?",
        },
        {
        	"trigger": "is_bad_nickname",
        	"contents": "is_bad_nickname = ${1:<nickname>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the nickname bad?",
        },
        {
        	"trigger": "is_frontend_character_selected",
        	"contents": "is_frontend_character_selected = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the specified front end character selected?",
        },
        {
        	"trigger": "is_game_view_open",
        	"contents": "is_game_view_open = ${1:<view>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the specified in-game view open?",
        },
        {
        	"trigger": "is_gamestate_tutorial_active",
        	"contents": "is_gamestate_tutorial_active = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the gamestate tutorial active?",
        },
        {
        	"trigger": "is_in_list",
        	"contents": "is_in_list = ${1:<target>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if a target in in a list.",
        },
        {
        	"trigger": "is_mercenary_in_hire_range",
        	"contents": "is_mercenary_in_hire_range = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the mercenary company within the hiring range of the target character?",
        },
        {
        	"trigger": "is_player_selected",
        	"contents": "is_player_selected = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the player playing a character?",
        },
        {
        	"trigger": "is_target_in_global_variable_list",
        	"contents": "is_target_in_global_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if a target is in a variable list.",
        },
        {
        	"trigger": "is_target_in_local_variable_list",
        	"contents": "is_target_in_local_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if a target is in a variable list.",
        },
        {
        	"trigger": "is_target_in_variable_list",
        	"contents": "is_target_in_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if a target is in a variable list.",
        },
        {
        	"trigger": "is_tooltip_with_name_open",
        	"contents": "is_tooltip_with_name_open = ${1:<tooltip>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the tooltip with the specified name open?",
        },
        {
        	"trigger": "is_tutorial_active",
        	"contents": "is_tutorial_active = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the tutorial active?",
        },
        {
        	"trigger": "is_tutorial_lesson_active",
        	"contents": "is_tutorial_lesson_active = ${1:<tutorial_lesson>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is this the current tutorial lesson?",
        },
        {
        	"trigger": "is_tutorial_lesson_chain_completed",
        	"contents": "is_tutorial_lesson_chain_completed = ${1:<tutorial_lesson_chain>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the tutorial lesson chain with the specified key been finished?",
        },
        {
        	"trigger": "is_tutorial_lesson_completed",
        	"contents": "is_tutorial_lesson_completed = ${1:<tutorial_lesson>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the tutorial lesson with the specified name been finished?",
        },
        {
        	"trigger": "is_tutorial_lesson_step_completed",
        	"contents": "is_tutorial_lesson_step_completed = ${1:<tutorial_lesson>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Has the tutorial lesson step been finished?",
        },
        {
        	"trigger": "is_war_overview_tab_open",
        	"contents": "is_war_overview_tab_open = ${1:<victory/defeat/white_peace>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the war overview open at a specified tab?",
        },
        {
        	"trigger": "is_widget_open",
        	"contents": "is_widget_open = ${1:<widget_name>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Is the widget with the specified name open?",
        },
        {
        	"trigger": "list_size",
        	"contents": "list_size = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks the size of a list.",
        },
        {
        	"trigger": "local_variable_list_size",
        	"contents": "local_variable_list_size = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks the size of a list.",
        },
        {
        	"trigger": "perks_in_diplomacy_lifestyle",
        	"contents": "perks_in_diplomacy_lifestyle = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many perks does this lifestyle have?",
        },
        {
        	"trigger": "perks_in_intrigue_lifestyle",
        	"contents": "perks_in_intrigue_lifestyle = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many perks does this lifestyle have?",
        },
        {
        	"trigger": "perks_in_learning_lifestyle",
        	"contents": "perks_in_learning_lifestyle = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many perks does this lifestyle have?",
        },
        {
        	"trigger": "perks_in_martial_lifestyle",
        	"contents": "perks_in_martial_lifestyle = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many perks does this lifestyle have?",
        },
        {
        	"trigger": "perks_in_stewardship_lifestyle",
        	"contents": "perks_in_stewardship_lifestyle = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many perks does this lifestyle have?",
        },
        {
        	"trigger": "release_only",
        	"contents": "release_only = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if the game is in release mode or not.",
        },
        {
        	"trigger": "save_temporary_opinion_value_as",
        	"contents": "save_temporary_opinion_value_as = {\n\tname = ${1:<key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Saves the scoped character's opinion of the target character to be referenced later in the same effect.",
        },
        {
        	"trigger": "save_temporary_scope_as",
        	"contents": "save_temporary_scope_as = ${1:<scope>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Saves a temporary target for use during the trigger execution",
        },
        {
        	"trigger": "save_temporary_scope_value_as",
        	"contents": "save_temporary_scope_value_as = {\n\tname = ${1:<key>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Saves a numerical or bool value to be referenced later in the same effect.",
        },
        {
        	"trigger": "scripted_tests",
        	"contents": "scripted_tests = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if the game is currently running scripted tests.",
        },
        {
        	"trigger": "should_show_disturbing_portrait_modifiers",
        	"contents": "should_show_disturbing_portrait_modifiers = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Can disturbing portrait modifiers be shown?",
        },
        {
        	"trigger": "should_show_nudity",
        	"contents": "should_show_nudity = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Can nudity be shown?",
        },
        {
        	"trigger": "time_of_year",
        	"contents": "time_of_year = {\n\tmin = ${1:<date>}\n\tmax = ${2:<date>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Check if the current date is within the bounds.",
        },
        {
        	"trigger": "variable_list_size",
        	"contents": "variable_list_size = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks the size of a variable list.",
        },
        {
        	"trigger": "years_from_game_start",
        	"contents": "years_from_game_start = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "How many years it has been since the start of the game.",
        },
        {
        	"trigger": "available_loot",
        	"contents": "available_loot = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "How much gold is available to loot for raiding armies?",
        },
        {
        	"trigger": "building_slots",
        	"contents": "building_slots = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "How many building slots exist (including occupied ones)?",
        },
        {
        	"trigger": "combined_building_level",
        	"contents": "combined_building_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "How many levels of normal buildings are there?",
        },
        {
        	"trigger": "fort_level",
        	"contents": "fort_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Compares the fort level of a province.",
        },
        {
        	"trigger": "free_building_slots",
        	"contents": "free_building_slots = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "How many free building slots exist?",
        },
        {
        	"trigger": "geographical_region",
        	"contents": "geographical_region = ${1:<region>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Checks if a province is in a certain geographical region.",
        },
        {
        	"trigger": "has_building",
        	"contents": "has_building = ${1:<building>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a particular building?",
        },
        {
        	"trigger": "has_building_or_higher",
        	"contents": "has_building_or_higher = ${1:<building>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a particular building or its successor?",
        },
        {
        	"trigger": "has_building_with_flag",
        	"contents": "has_building_with_flag = ${1:<building_flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a building with a certain flag?",
        },
        {
        	"trigger": "has_construction_with_flag",
        	"contents": "has_construction_with_flag = ${1:<building_flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a construction of a building with the specified flag?",
        },
        {
        	"trigger": "has_free_building_slot",
        	"contents": "has_free_building_slot = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a free building slot?",
        },
        {
        	"trigger": "has_holding",
        	"contents": "has_holding = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have holding?",
        },
        {
        	"trigger": "has_holding_type",
        	"contents": "has_holding_type = ${1:<holding_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a holding of particular type?",
        },
        {
        	"trigger": "has_ongoing_construction",
        	"contents": "has_ongoing_construction = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the scope province have a construction ongoing?",
        },
        {
        	"trigger": "has_special_building",
        	"contents": "has_special_building = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the province (holding) have a special buidling?",
        },
        {
        	"trigger": "has_special_building_slot",
        	"contents": "has_special_building_slot = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the province (holding) have a special buidling slot?",
        },
        {
        	"trigger": "has_stationed_regiment",
        	"contents": "has_stationed_regiment = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does this province have stationed regiments?",
        },
        {
        	"trigger": "has_stationed_regiment_of_base_type",
        	"contents": "has_stationed_regiment_of_base_type = ${1:<regiment_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Does the province have stationed regiment of base type?",
        },
        {
        	"trigger": "has_travel_point_of_interest",
        	"contents": "has_travel_point_of_interest = ${1:<point_of_interest_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Checks if there is a travel point of interest of type X in the province.",
        },
        {
        	"trigger": "is_coastal",
        	"contents": "is_coastal = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is the province a coastal province?",
        },
        {
        	"trigger": "is_county_capital",
        	"contents": "is_county_capital = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is the province the county capital?",
        },
        {
        	"trigger": "is_occupied",
        	"contents": "is_occupied = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is this province currently being occupied?",
        },
        {
        	"trigger": "is_raided",
        	"contents": "is_raided = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is this province currently being raided?",
        },
        {
        	"trigger": "is_river_province",
        	"contents": "is_river_province = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is the province a river?",
        },
        {
        	"trigger": "is_riverside_province",
        	"contents": "is_riverside_province = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is the province riverside?",
        },
        {
        	"trigger": "is_sea_province",
        	"contents": "is_sea_province = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Is this a sea province?",
        },
        {
        	"trigger": "monthly_income",
        	"contents": "monthly_income = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Check the income of the scoped province?",
        },
        {
        	"trigger": "num_buildings",
        	"contents": "num_buildings = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "How many normal buildings are there?",
        },
        {
        	"trigger": "number_of_characters_in_pool",
        	"contents": "number_of_characters_in_pool = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Check the number of characters in the pool the scoped province is a part of.",
        },
        {
        	"trigger": "terrain",
        	"contents": "terrain = ${1:<terrain_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Checks if a province is of a specific terrain type.",
        },
        {
        	"trigger": "travel_danger_type (terrain)",
        	"contents": "travel_danger_type = {\n\ttravel_plan = ${1:<travel_plan>}\n\tterrain = ${2:<terrain_type>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Checks if a province's danger type is of a specific type for a specific travel plan.",
        },
        {
        	"trigger": "travel_danger_type (type)",
        	"contents": "travel_danger_type = {\n\ttravel_plan = ${1:<travel_plan>}\n\ttype = ${2:<danger_type>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "Checks if a province's danger type is of a specific type for a specific travel plan.",
        },
        {
        	"trigger": "travel_danger_value",
        	"contents": "travel_danger_value = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Province"],
        	"details": "What is the province's danger value for a specific travel plan?",
        },
        {
        	"trigger": "attacker_war_score",
        	"contents": "attacker_war_score = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Compares the attacker war score.",
        },
        {
        	"trigger": "days_since_max_war_score",
        	"contents": "days_since_max_war_score = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Number of days since the war score has been at max.",
        },
        {
        	"trigger": "defender_war_score",
        	"contents": "defender_war_score = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Compares the defender war score.",
        },
        {
        	"trigger": "has_valid_casus_belli",
        	"contents": "has_valid_casus_belli = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Does the war interaction still have a valid casus belli?",
        },
        {
        	"trigger": "is_attacker",
        	"contents": "is_attacker = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Is the target character in the scope war as an attacker?",
        },
        {
        	"trigger": "is_civil_war",
        	"contents": "is_civil_war = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Check if the scope war is a civil war or not.",
        },
        {
        	"trigger": "is_defender",
        	"contents": "is_defender = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Is the target character in the scope war as a defender?",
        },
        {
        	"trigger": "is_participant",
        	"contents": "is_participant = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Is the target character participating in the scope war as an attacker or defender?",
        },
        {
        	"trigger": "is_war_leader",
        	"contents": "is_war_leader = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Is the target character leading one of the sides in the scope war?",
        },
        {
        	"trigger": "is_white_peace_possible",
        	"contents": "is_white_peace_possible = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Check if the scoped war's CB has is_white_peace_possible = yes.",
        },
        {
        	"trigger": "using_cb",
        	"contents": "using_cb = ${1:<casus_belli>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Is the scope war using the specified CB?",
        },
        {
        	"trigger": "war_contribution",
        	"contents": "war_contribution = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Checks how much a character has contributed to the scoped war.",
        },
        {
        	"trigger": "war_days",
        	"contents": "war_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Compares the number of days the war is going on for.",
        },
        {
        	"trigger": "was_called",
        	"contents": "was_called = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "War"],
        	"details": "Has the target character been called to the scope war already?",
        },
        {
        	"trigger": "num_leased_titles",
        	"contents": "num_leased_titles = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Holy Order"],
        	"details": "How many holdings the holy order has under lease?",
        },
        {
        	"trigger": "accolade_rank",
        	"contents": "accolade_rank = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "How many ranks does this Accolade have unlocked?",
        },
        {
        	"trigger": "has_accolade_category",
        	"contents": "has_accolade_category = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Does any of the Accolades types have the given category flag?",
        },
        {
        	"trigger": "has_accolade_parameter",
        	"contents": "has_accolade_parameter = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Does any of the Accolades unlocked ranks have the given parameter flag?",
        },
        {
        	"trigger": "has_accolade_type",
        	"contents": "has_accolade_type = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Does the Accolade have the given type?",
        },
        {
        	"trigger": "has_potential_accolade_successors",
        	"contents": "has_potential_accolade_successors = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Does the Accolade's Owner have a character court that could act as Successor of this Accolade if made into a Knight?",
        },
        {
        	"trigger": "is_accolade_active",
        	"contents": "is_accolade_active = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Is the scoped Accolade active, i.e. assigned by their Liege?",
        },
        {
        	"trigger": "primary_tier",
        	"contents": "primary_tier = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Is the scoped Accolade's primary type tier equal to?",
        },
        {
        	"trigger": "secondary_tier",
        	"contents": "secondary_tier = ${1:<value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Accolade"],
        	"details": "Is the scoped Accolade's secondary type tier equal to?",
        },
        {
        	"trigger": "has_trait_category",
        	"contents": "has_trait_category = ${1:<trait_category>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Trait"],
        	"details": "Does the scoped trait belong to the given trait category?",
        },
        {
        	"trigger": "has_trait_flag",
        	"contents": "has_trait_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Trait"],
        	"details": "Does the scoped trait have the given flag?",
        },
        {
        	"trigger": "is_opposite_of_trait",
        	"contents": "is_opposite_of_trait = ${1:<trait>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Trait"],
        	"details": "Is the scoped trait an opposite trait of the target trait?",
        },
        {
        	"trigger": "is_hostile",
        	"contents": "is_hostile = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the scoped scheme a hostile scheme?",
        },
        {
        	"trigger": "is_scheme_agent_exposed",
        	"contents": "is_scheme_agent_exposed = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the target character an exposed agent in the scope scheme?",
        },
        {
        	"trigger": "is_scheme_exposed",
        	"contents": "is_scheme_exposed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the scheme exposed?",
        },
        {
        	"trigger": "is_type_secret",
        	"contents": "is_type_secret = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the scoped scheme's type a secret type?",
        },
        {
        	"trigger": "scheme_duration_days",
        	"contents": "scheme_duration_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "The number of days since scheme was started.",
        },
        {
        	"trigger": "scheme_is_character_agent",
        	"contents": "scheme_is_character_agent = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the target character part of this scheme?",
        },
        {
        	"trigger": "scheme_monthly_progress",
        	"contents": "scheme_monthly_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Monthly scheme progress in % (i.e. 50 equals 50%).",
        },
        {
        	"trigger": "scheme_number_of_agents",
        	"contents": "scheme_number_of_agents = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "The number of agents in a scheme.",
        },
        {
        	"trigger": "scheme_number_of_exposed_agents",
        	"contents": "scheme_number_of_exposed_agents = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "The number of exposed agents in a scheme.",
        },
        {
        	"trigger": "scheme_power",
        	"contents": "scheme_power = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme power.",
        },
        {
        	"trigger": "scheme_power_resistance_difference",
        	"contents": "scheme_power_resistance_difference = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme power minus scheme resistance difference.",
        },
        {
        	"trigger": "scheme_power_resistance_ratio",
        	"contents": "scheme_power_resistance_ratio = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme power/resistance ratio, ratio is set to +/-10000 if resistance is zero and power is positive/negative.",
        },
        {
        	"trigger": "scheme_progress",
        	"contents": "scheme_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme progress (0 - 10 (defined)).",
        },
        {
        	"trigger": "scheme_resistance",
        	"contents": "scheme_resistance = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme resistance.",
        },
        {
        	"trigger": "scheme_secrecy",
        	"contents": "scheme_secrecy = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme secrecy.",
        },
        {
        	"trigger": "scheme_skill",
        	"contents": "scheme_skill = ${1:<modifier>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the scheme currently affected by the specified modifier?",
        },
        {
        	"trigger": "scheme_success_chance",
        	"contents": "scheme_success_chance = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Scheme success chance.",
        },
        {
        	"trigger": "scheme_type",
        	"contents": "scheme_type = ${1:<scheme_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Scheme"],
        	"details": "Is the scheme of the specified type?",
        },
        {
        	"trigger": "story_type",
        	"contents": "story_type = ${1:<story_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Story"],
        	"details": "Is the story in scope of this type?",
        },
        {
        	"trigger": "age",
        	"contents": "age = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Get character age.",
        },
        {
        	"trigger": "age",
        	"contents": "age = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Get character age.",
        },
        {
        	"trigger": "ai_boldness",
        	"contents": "ai_boldness = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI boldness.",
        },
        {
        	"trigger": "ai_compassion",
        	"contents": "ai_compassion = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI compassion.",
        },
        {
        	"trigger": "ai_diplomacy_stance",
        	"contents": "ai_diplomacy_stance = {\n\ttarget = ${1:<character>}\n\tstance = ${2:<neutral/threat/enemy/friend>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The AI's diplomatic view of the target character.",
        },
        {
        	"trigger": "ai_energy",
        	"contents": "ai_energy = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI energy.",
        },
        {
        	"trigger": "ai_greed",
        	"contents": "ai_greed = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI greed.",
        },
        {
        	"trigger": "ai_honor",
        	"contents": "ai_honor = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI honor.",
        },
        {
        	"trigger": "ai_rationality",
        	"contents": "ai_rationality = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI rationality.",
        },
        {
        	"trigger": "ai_sociability",
        	"contents": "ai_sociability = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI sociability.",
        },
        {
        	"trigger": "ai_values_divergence",
        	"contents": "ai_values_divergence = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Value >/</= sum of differences in ai values.",
        },
        {
        	"trigger": "ai_vengefulness",
        	"contents": "ai_vengefulness = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI vengefulness.",
        },
        {
        	"trigger": "ai_zeal",
        	"contents": "ai_zeal = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI zeal.",
        },
        {
        	"trigger": "all_court_artifact_slots",
        	"contents": "all_court_artifact_slots = ${1:<empty/full>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if all the scoped characters court artifact slots are empty or full.",
        },
        {
        	"trigger": "all_inventory_artifact_slots",
        	"contents": "all_inventory_artifact_slots = ${1:<empty/full>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if all the scoped characters inventory artifact slots are empty or full.",
        },
        {
        	"trigger": "allowed_concubines",
        	"contents": "allowed_concubines = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope owner have concubines?",
        },
        {
        	"trigger": "allowed_more_concubines",
        	"contents": "allowed_more_concubines = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope owner have more concubines?",
        },
        {
        	"trigger": "allowed_more_spouses",
        	"contents": "allowed_more_spouses = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope owner have more spouses?",
        },
        {
        	"trigger": "amenity_level",
        	"contents": "amenity_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the scoped character's amenity level in the given type to the given value.",
        },
        {
        	"trigger": "aptitude",
        	"contents": "aptitude = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "What is the scoped character's aptitude in the target court position type?",
        },
        {
        	"trigger": "attraction",
        	"contents": "attraction = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Attraction value for the scoped character.",
        },
        {
        	"trigger": "average_amenity_level",
        	"contents": "average_amenity_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the scoped character's average amenity level to the given value.",
        },
        {
        	"trigger": "base_weight",
        	"contents": "base_weight = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Base weight of the scoped character.",
        },
        {
        	"trigger": "can_add_hook",
        	"contents": "can_add_hook = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<hook_type>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Will trying to hook the target character override the current hook?",
        },
        {
        	"trigger": "can_add_hook (duration)",
        	"contents": "can_add_hook = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<hook_type>}\n\t${3:<days/months/years>} = ${4:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Will trying to hook the target character override the current hook?",
        },
        {
        	"trigger": "can_arrive_in_time_to_activity_minimum",
        	"contents": "can_arrive_in_time_to_activity_minimum = ${1:<activity>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character arrive to the target activity in time?",
        },
        {
        	"trigger": "can_attack_in_hierarchy",
        	"contents": "can_attack_in_hierarchy = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope target be attacking the defender based on their liege-vassal relations?",
        },
        {
        	"trigger": "can_be_acclaimed",
        	"contents": "can_be_acclaimed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the given character potentially be the Acclaimed Knight of an Accolade?",
        },
        {
        	"trigger": "can_be_child_of",
        	"contents": "can_be_child_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Would target character have been able to have children at the time as the scoped character's birth?",
        },
        {
        	"trigger": "can_be_employed_as",
        	"contents": "can_be_employed_as = ${1:<court_position>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character be employed as target court position type?",
        },
        {
        	"trigger": "can_be_parent_of",
        	"contents": "can_be_parent_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Would scoped character have been able to have children at the time of the target character's birth?",
        },
        {
        	"trigger": "can_benefit_from_artifact",
        	"contents": "can_benefit_from_artifact = ${1:<artifact>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character benefit from the main bonuses of this artifact?",
        },
        {
        	"trigger": "can_create_faction",
        	"contents": "can_create_faction = {\n\ttype = ${1:<faction_type>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the character create the faction of the specified type against the specified character?",
        },
        {
        	"trigger": "can_declare_war",
        	"contents": "can_declare_war = {\n\tdefender = ${1:<character>}\n\tcasus_belli = ${2:<casus_belli>}\n\ttarget_titles = {\n\t\t${3:<title>}\n\t}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character declare war on target defender with specific CB for specified titles?",
        },
        {
        	"trigger": "can_declare_war (claimant)",
        	"contents": "can_declare_war = {\n\tdefender = ${1:<character>}\n\tcasus_belli = ${2:<casus_belli>}\n\ttarget_titles = {\n\t\t${3:<title>}\n\t}\n\tclaimant = ${4:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character declare war on target defender with specific CB for specified titles for specified claimant?",
        },
        {
        	"trigger": "can_diverge",
        	"contents": "can_diverge = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can this ruler diverge their culture? Includes checking the cost.",
        },
        {
        	"trigger": "can_diverge_excluding_cost",
        	"contents": "can_diverge_excluding_cost = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can this ruler diverge their culture? Does not check the cost.",
        },
        {
        	"trigger": "can_embrace_tradition",
        	"contents": "can_embrace_tradition = ${1:<culture_tradition>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can scoped character embrace new culture tradition?",
        },
        {
        	"trigger": "can_embrace_tradition (replace)",
        	"contents": "can_embrace_tradition = {\n\ttradition = ${1:<culture_tradition>}\n\treplace = ${2:<culture_tradition>}}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can scoped character embrace new culture tradition?",
        },
        {
        	"trigger": "can_employ_court_position_type",
        	"contents": "can_employ_court_position_type = ${1:<court_position_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character employ the target court position type?",
        },
        {
        	"trigger": "can_equip_artifact",
        	"contents": "can_equip_artifact = ${1:<artifact>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character equip given artifact?",
        },
        {
        	"trigger": "can_execute_decision",
        	"contents": "can_execute_decision = ${1:<decision>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character able to execute the asigned decision?",
        },
        {
        	"trigger": "can_have_children",
        	"contents": "can_have_children = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the character have children? Only checks hard blocks from traits, not fertility",
        },
        {
        	"trigger": "can_host_activity",
        	"contents": "can_host_activity = ${1:<activity_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character host the target activity type?",
        },
        {
        	"trigger": "can_hybridize",
        	"contents": "can_hybridize = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can this ruler hybridize with the target culture? Includes checking the cost.",
        },
        {
        	"trigger": "can_hybridize_excluding_cost",
        	"contents": "can_hybridize_excluding_cost = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can this ruler hybridize with the target culture? Does not check the cost.",
        },
        {
        	"trigger": "can_join_activity",
        	"contents": "can_join_activity = ${1:<activity>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character join the target activity?",
        },
        {
        	"trigger": "can_join_or_create_faction_against",
        	"contents": "can_join_or_create_faction_against = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope character create if join a faction against the target?",
        },
        {
        	"trigger": "can_join_or_create_faction_against (faction)",
        	"contents": "can_join_or_create_faction_against = {\n\twho = ${1:<character>}\n\tfaction = ${2:<faction>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scope character create if join a faction against the target?",
        },
        {
        	"trigger": "can_sponsor_inspiration",
        	"contents": "can_sponsor_inspiration = ${1:<inspiration>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character sponsor the target inspiration?",
        },
        {
        	"trigger": "can_start_scheme",
        	"contents": "can_start_scheme = {\n\ttype = ${1:<scheme_type>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the character start the scheme?",
        },
        {
        	"trigger": "character_has_commander_trait_scope_does_not",
        	"contents": "character_has_commander_trait_scope_does_not = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a commander trait that the scope does not?",
        },
        {
        	"trigger": "character_is_land_realm_neighbor",
        	"contents": "character_is_land_realm_neighbor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is scoped character realm neighbor of target? Meaning they're independent/under same liege, and border your realm.",
        },
        {
        	"trigger": "character_is_realm_neighbor",
        	"contents": "character_is_realm_neighbor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is scoped character realm neighbor of target? Meaning they're independent/under same liege, and border your realm (including across two sea zones).",
        },
        {
        	"trigger": "completely_controls",
        	"contents": "completely_controls = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character controls all counties and baronies inside de jure title (no hostile occupation either)?",
        },
        {
        	"trigger": "completely_controls_region",
        	"contents": "completely_controls_region = ${1:<region>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character controls all counties and baronies inside the specified region (no hostile occupation either)?",
        },
        {
        	"trigger": "council_task_monthly_progress",
        	"contents": "council_task_monthly_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's monthly progress on their assigned council task this big?",
        },
        {
        	"trigger": "court_grandeur_base",
        	"contents": "court_grandeur_base = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the base court grandeur value for a character.",
        },
        {
        	"trigger": "court_grandeur_current",
        	"contents": "court_grandeur_current = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the current court grandeur value for a character.",
        },
        {
        	"trigger": "court_grandeur_current_level",
        	"contents": "court_grandeur_current_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the current court grandeur level for a character, always 0 for those without one.",
        },
        {
        	"trigger": "court_grandeur_minimum_expected",
        	"contents": "court_grandeur_minimum_expected = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the minimum expected court grandeur value for a character.",
        },
        {
        	"trigger": "court_grandeur_minimum_expected_level",
        	"contents": "court_grandeur_minimum_expected_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the minimum expected court grandeur level for a character, always 0 for those without one.",
        },
        {
        	"trigger": "court_positions_currently_available",
        	"contents": "court_positions_currently_available = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many court positions the scoped character CAN currently employs.",
        },
        {
        	"trigger": "court_positions_currently_filled",
        	"contents": "court_positions_currently_filled = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many court positions the scope character currently employs.",
        },
        {
        	"trigger": "create_faction_type_chance",
        	"contents": "create_faction_type_chance = {\n\ttype = ${1:<faction_type>}\n\ttarget = ${2:<character>}\n\tvalue = ${3:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if chance to create a faction against a target of the scope character is true against the scripted value.",
        },
        {
        	"trigger": "current_military_strength",
        	"contents": "current_military_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's current military strength this big?",
        },
        {
        	"trigger": "current_weight",
        	"contents": "current_weight = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Current weight of the scoped character.",
        },
        {
        	"trigger": "current_weight_for_portrait",
        	"contents": "current_weight_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Current weight of the scoped character as a value for portraits scaled between 0.0 and 1.0.",
        },
        {
        	"trigger": "days_as_ruler",
        	"contents": "days_as_ruler = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of days this character has been a ruler, returns -1 if character isn't a ruler.",
        },
        {
        	"trigger": "days_in_prison",
        	"contents": "days_in_prison = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "number of days the character has been imprisoned for (0 if not imprisoned).",
        },
        {
        	"trigger": "days_of_continuous_peace",
        	"contents": "days_of_continuous_peace = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of days the character has been in peace (0 if in war). Raids count as 'not peace'.",
        },
        {
        	"trigger": "days_of_continuous_war",
        	"contents": "days_of_continuous_war = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of days the character has been in peace (0 if in peace).",
        },
        {
        	"trigger": "days_since_death",
        	"contents": "days_since_death = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of days since the character has died.",
        },
        {
        	"trigger": "days_since_joined_court",
        	"contents": "days_since_joined_court = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Gets the days since scoped character joined their current court.",
        },
        {
        	"trigger": "death_reason",
        	"contents": "death_reason = ${1:<death_reason>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have the given death reason?",
        },
        {
        	"trigger": "debt_level",
        	"contents": "debt_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's debt level this value?",
        },
        {
        	"trigger": "diarch_aptitude",
        	"contents": "diarch_aptitude = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Diarch aptitude score for the scoped (potential) diarch.",
        },
        {
        	"trigger": "diarch_loyalty",
        	"contents": "diarch_loyalty = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Diarch loyalty score for the scoped (potential) diarch.",
        },
        {
        	"trigger": "diarchy_swing",
        	"contents": "diarchy_swing = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Get diarchy scales of power swing.",
        },
        {
        	"trigger": "diplomacy",
        	"contents": "diplomacy = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required diplomacy skill level?",
        },
        {
        	"trigger": "diplomacy_diff",
        	"contents": "diplomacy_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required diplomacy skill level difference against target?",
        },
        {
        	"trigger": "diplomacy_for_portrait",
        	"contents": "diplomacy_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Diplomacy skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "diplomacy_lifestyle_perk_points",
        	"contents": "diplomacy_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perk points available does the character have?",
        },
        {
        	"trigger": "diplomacy_lifestyle_perks",
        	"contents": "diplomacy_lifestyle_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle does the character have?",
        },
        {
        	"trigger": "diplomacy_lifestyle_unlockable_perks",
        	"contents": "diplomacy_lifestyle_unlockable_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle can the character currently unlock?",
        },
        {
        	"trigger": "diplomacy_lifestyle_xp",
        	"contents": "diplomacy_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much lifestyle xp does the character have?",
        },
        {
        	"trigger": "does_ai_liege_in_vassal_contract_desire_obligation_change",
        	"contents": "does_ai_liege_in_vassal_contract_desire_obligation_change = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the AI liege in a vassal contract desire changing an obligation level?",
        },
        {
        	"trigger": "does_ai_vassal_in_vassal_contract_desire_obligation_change",
        	"contents": "does_ai_vassal_in_vassal_contract_desire_obligation_change = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the AI vassal in a vassal contract desire changing an obligation level?",
        },
        {
        	"trigger": "domain_limit",
        	"contents": "domain_limit = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's domain limit this big?",
        },
        {
        	"trigger": "domain_limit_available",
        	"contents": "domain_limit_available = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is there this much space left in the character's domain limit? (Negative for over limit)",
        },
        {
        	"trigger": "domain_limit_percentage",
        	"contents": "domain_limit_percentage = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's domain this big in comparison to their limit?",
        },
        {
        	"trigger": "domain_size",
        	"contents": "domain_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's domain this big?",
        },
        {
        	"trigger": "domain_size_excluding_grace_period",
        	"contents": "domain_size_excluding_grace_period = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's domain this big?",
        },
        {
        	"trigger": "dread",
        	"contents": "dread = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required dread?",
        },
        {
        	"trigger": "dread_modified_ai_boldness",
        	"contents": "dread_modified_ai_boldness = {\n\tcharacter = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "AI boldness modified by the dread of the specified character.",
        },
        {
        	"trigger": "effective_age",
        	"contents": "effective_age = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character old/young enough?",
        },
        {
        	"trigger": "employs_court_position",
        	"contents": "employs_court_position = ${1:<court_position_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character employing a target court position type?",
        },
        {
        	"trigger": "fertility",
        	"contents": "fertility = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required fertility?",
        },
        {
        	"trigger": "focus_progress",
        	"contents": "focus_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this much focus progress",
        },
        {
        	"trigger": "gold",
        	"contents": "gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required gold?",
        },
        {
        	"trigger": "government_allows",
        	"contents": "government_allows = ${1:<feature>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the government of the character allows something.",
        },
        {
        	"trigger": "government_disallows",
        	"contents": "government_disallows = ${1:<feature>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the government of the character disallows something.",
        },
        {
        	"trigger": "government_has_flag",
        	"contents": "government_has_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the government of the character has a specific flag.",
        },
        {
        	"trigger": "has_active_diarchy",
        	"contents": "has_active_diarchy = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character has an active diarchy?",
        },
        {
        	"trigger": "has_active_mandate",
        	"contents": "has_active_mandate = ${1:<mandate>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the diarch have this mandate active?",
        },
        {
        	"trigger": "has_activity_intent",
        	"contents": "has_activity_intent = ${1:<activity_intent>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have the given activity intent?",
        },
        {
        	"trigger": "has_activity_state",
        	"contents": "has_activity_state = ${1:<travel/passive/active>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have the given state in their currenty involved activity?",
        },
        {
        	"trigger": "has_any_artifact",
        	"contents": "has_any_artifact = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have any artifacts?",
        },
        {
        	"trigger": "has_any_artifact_claim",
        	"contents": "has_any_artifact_claim = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have any artifact claims at all?",
        },
        {
        	"trigger": "has_any_cb_on",
        	"contents": "has_any_cb_on = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have any casus bellis on the taget character?",
        },
        {
        	"trigger": "has_any_display_cb_on",
        	"contents": "has_any_display_cb_on = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have any casus bellis on the taget character that should be displayed?",
        },
        {
        	"trigger": "has_any_focus",
        	"contents": "has_any_focus = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have any focus set?",
        },
        {
        	"trigger": "has_any_nickname",
        	"contents": "has_any_nickname = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Has the scope character any nickname?",
        },
        {
        	"trigger": "has_any_scripted_relation",
        	"contents": "has_any_scripted_relation = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have any scripted relation with the taget character?",
        },
        {
        	"trigger": "has_any_secret_relation",
        	"contents": "has_any_secret_relation = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have any secret relation with the taget character?",
        },
        {
        	"trigger": "has_any_secrets",
        	"contents": "has_any_secrets = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have any secrets?",
        },
        {
        	"trigger": "has_any_unequipped_artifact",
        	"contents": "has_any_unequipped_artifact = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have any unequipped artifacts?",
        },
        {
        	"trigger": "has_artifact_claim",
        	"contents": "has_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have a personal or house claim on the target artifact?",
        },
        {
        	"trigger": "has_away_hostages",
        	"contents": "has_away_hostages = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have Hostages abroad?",
        },
        {
        	"trigger": "has_bad_nickname",
        	"contents": "has_bad_nickname = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have a bad nickname?",
        },
        {
        	"trigger": "has_banish_reason",
        	"contents": "has_banish_reason = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the banish reason towards the target?",
        },
        {
        	"trigger": "has_cb_on",
        	"contents": "has_cb_on = {\n\ttarget = ${1:<character>}\n\tcb = ${2:<casus_belli>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have the specified casus bellis on the taget character?",
        },
        {
        	"trigger": "has_character_flag",
        	"contents": "has_character_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this flag?",
        },
        {
        	"trigger": "has_claim_on",
        	"contents": "has_claim_on = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a claim on the target title?",
        },
        {
        	"trigger": "has_completed_activity_intent",
        	"contents": "has_completed_activity_intent = ${1:<activity_intent>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Has the scoped character completed an intent of the given type in their involved activity?",
        },
        {
        	"trigger": "has_completed_activity_intent (character)",
        	"contents": "has_completed_activity_intent = {\n\ttype = ${1:<activity_intent>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Has the scoped character completed an intent of the given type in their involved activity?",
        },
        {
        	"trigger": "has_completed_inspiration",
        	"contents": "has_completed_inspiration = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the scoped character has ever completed an inspiration.",
        },
        {
        	"trigger": "has_council_position",
        	"contents": "has_council_position = ${1:<council_position_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have the given position?",
        },
        {
        	"trigger": "has_councillor_for_skill",
        	"contents": "has_councillor_for_skill = ${1:<skill_name/general>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have a councillor for the specified skill?",
        },
        {
        	"trigger": "has_court_language",
        	"contents": "has_court_language = ${1:<language>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character's court language the given language?",
        },
        {
        	"trigger": "has_court_language_of_culture",
        	"contents": "has_court_language_of_culture = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character's court language the language of the target culture?",
        },
        {
        	"trigger": "has_court_position",
        	"contents": "has_court_position = ${1:<court_position_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character holding the target court position type?",
        },
        {
        	"trigger": "has_culture",
        	"contents": "has_culture = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this culture?",
        },
        {
        	"trigger": "has_de_jure_claim_on",
        	"contents": "has_de_jure_claim_on = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have a dejure claim against the target?",
        },
        {
        	"trigger": "has_diarchy_active_parameter",
        	"contents": "has_diarchy_active_parameter = ${1:<parameter>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does active diarchy have this parameter active for current power level?",
        },
        {
        	"trigger": "has_diarchy_parameter",
        	"contents": "has_diarchy_parameter = ${1:<parameter>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can active diarchy have this parameter at some power level?",
        },
        {
        	"trigger": "has_diarchy_type",
        	"contents": "has_diarchy_type = ${1:<diarchy_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is scope character in a diarchy of a specific type?",
        },
        {
        	"trigger": "has_divorce_reason",
        	"contents": "has_divorce_reason = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the divorce reason towards the target?",
        },
        {
        	"trigger": "has_dread_level_towards",
        	"contents": "has_dread_level_towards = {\n\ttarget = ${1:<character>}\n\tlevel = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How intimdated is the scoped character by the target?",
        },
        {
        	"trigger": "has_dynasty",
        	"contents": "has_dynasty = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a valid dynasty?",
        },
        {
        	"trigger": "has_election_vote_of",
        	"contents": "has_election_vote_of = {\n\twho = ${1:<character>}\n\ttitle = ${2:<title>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character voting for the scoped character in the election of the target title?",
        },
        {
        	"trigger": "has_employed_any_court_position",
        	"contents": "has_employed_any_court_position = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have any employed court positions?",
        },
        {
        	"trigger": "has_execute_reason",
        	"contents": "has_execute_reason = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the execute reason towards the target?",
        },
        {
        	"trigger": "has_faith",
        	"contents": "has_faith = ${1:<faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this faith?",
        },
        {
        	"trigger": "has_father",
        	"contents": "has_father = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a valid living father?",
        },
        {
        	"trigger": "has_focus",
        	"contents": "has_focus = ${1:<focus>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this focus?",
        },
        {
        	"trigger": "has_free_council_slot",
        	"contents": "has_free_council_slot = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have a council position to fill?",
        },
        {
        	"trigger": "has_gene",
        	"contents": "has_gene = {\n\tcategory = ${1:<category>}\n\ttemplate = ${2:<template>}}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the specified gene template? Only works for morph genes.",
        },
        {
        	"trigger": "has_government",
        	"contents": "has_government = ${1:<government_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the character has a specific government type.",
        },
        {
        	"trigger": "has_had_focus_for_days",
        	"contents": "has_had_focus_for_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character had a focus for that time?",
        },
        {
        	"trigger": "has_hook",
        	"contents": "has_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a hook on the target?",
        },
        {
        	"trigger": "has_hook_from_secret",
        	"contents": "has_hook_from_secret = ${1:<secret>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a hook based on the target secret?",
        },
        {
        	"trigger": "has_hook_of_type",
        	"contents": "has_hook_of_type = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<type>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a hook on the target of the given type?",
        },
        {
        	"trigger": "has_imprisonment_reason",
        	"contents": "has_imprisonment_reason = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the imprisonment reason towards the target?",
        },
        {
        	"trigger": "has_inactive_trait",
        	"contents": "has_inactive_trait = ${1:<trait>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this trait or a trait of this trait group amongst their inactive traits?",
        },
        {
        	"trigger": "has_lifestyle",
        	"contents": "has_lifestyle = ${1:<lifestyle>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this lifestyle?",
        },
        {
        	"trigger": "has_mother",
        	"contents": "has_mother = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a valid living mother?",
        },
        {
        	"trigger": "has_nickname",
        	"contents": "has_nickname = ${1:<nickname>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this nickname?",
        },
        {
        	"trigger": "has_opposite_relation",
        	"contents": "has_opposite_relation = {\n\ttarget = ${1:<character>}\n\trelation = ${2:<relation>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have an opposite relationship of the relation value with the target character?",
        },
        {
        	"trigger": "has_outstanding_artifact_claims",
        	"contents": "has_outstanding_artifact_claims = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have any artifact claims that can be pressed?",
        },
        {
        	"trigger": "has_owned_scheme",
        	"contents": "has_owned_scheme = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does this character own a scheme?",
        },
        {
        	"trigger": "has_pending_court_events",
        	"contents": "has_pending_court_events = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have pending court events?",
        },
        {
        	"trigger": "has_pending_interaction_of_type",
        	"contents": "has_pending_interaction_of_type = ${1:<interaction_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a pending interaction of the type? (player-only)",
        },
        {
        	"trigger": "has_perk",
        	"contents": "has_perk = ${1:<perk>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this perk?",
        },
        {
        	"trigger": "has_personal_artifact_claim",
        	"contents": "has_personal_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have a personal claim on the target artifact?",
        },
        {
        	"trigger": "has_potential_acclaimed_knights",
        	"contents": "has_potential_acclaimed_knights = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the given character have any potential knights that could be appointed as Acclaimed Knights?",
        },
        {
        	"trigger": "has_primary_title",
        	"contents": "has_primary_title = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character has specific title as his primary title?",
        },
        {
        	"trigger": "has_prisoners",
        	"contents": "has_prisoners = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have prisoners?",
        },
        {
        	"trigger": "has_raid_immunity_against",
        	"contents": "has_raid_immunity_against = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's (top-liege) realm immune to raiding by the target?",
        },
        {
        	"trigger": "has_raised_armies",
        	"contents": "has_raised_armies = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have raised or gathering armies?",
        },
        {
        	"trigger": "has_realm_law",
        	"contents": "has_realm_law = ${1:<law>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have the given realm law?",
        },
        {
        	"trigger": "has_realm_law_flag",
        	"contents": "has_realm_law_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have a law with the given flag?",
        },
        {
        	"trigger": "has_relation_activity_recurrer",
        	"contents": "has_relation_activity_recurrer = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_antiquarian",
        	"contents": "has_relation_antiquarian = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_best_friend",
        	"contents": "has_relation_best_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_bully",
        	"contents": "has_relation_bully = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_court_physician",
        	"contents": "has_relation_court_physician = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_crush",
        	"contents": "has_relation_crush = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_flag",
        	"contents": "has_relation_flag = {\n\ttarget = ${1:<character>}\n\tflag = ${2:<flag>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have a specific flag on a relation with the target character?",
        },
        {
        	"trigger": "has_relation_friend",
        	"contents": "has_relation_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_guardian",
        	"contents": "has_relation_guardian = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_intrigue_mentor",
        	"contents": "has_relation_intrigue_mentor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_intrigue_student",
        	"contents": "has_relation_intrigue_student = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_lover",
        	"contents": "has_relation_lover = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_mentor",
        	"contents": "has_relation_mentor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_nemesis",
        	"contents": "has_relation_nemesis = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_nursed_child",
        	"contents": "has_relation_nursed_child = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_oaf",
        	"contents": "has_relation_oaf = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_potential_friend",
        	"contents": "has_relation_potential_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_potential_hook",
        	"contents": "has_relation_potential_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_potential_lover",
        	"contents": "has_relation_potential_lover = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_potential_rival",
        	"contents": "has_relation_potential_rival = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_rival",
        	"contents": "has_relation_rival = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_soldier_friend",
        	"contents": "has_relation_soldier_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_soulmate",
        	"contents": "has_relation_soulmate = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_student",
        	"contents": "has_relation_student = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_to",
        	"contents": "has_relation_to = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a relation to the target?",
        },
        {
        	"trigger": "has_relation_victim",
        	"contents": "has_relation_victim = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_ward",
        	"contents": "has_relation_ward = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_wedding_bad_fertility",
        	"contents": "has_relation_wedding_bad_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_wedding_good_fertility",
        	"contents": "has_relation_wedding_good_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_wedding_very_bad_fertility",
        	"contents": "has_relation_wedding_very_bad_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_wedding_very_good_fertility",
        	"contents": "has_relation_wedding_very_good_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_relation_wet_nurse",
        	"contents": "has_relation_wet_nurse = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a scripted relationship with a target character?",
        },
        {
        	"trigger": "has_religion",
        	"contents": "has_religion = ${1:<religion>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this religion?",
        },
        {
        	"trigger": "has_revoke_title_reason",
        	"contents": "has_revoke_title_reason = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the revoke title reason towards the target?",
        },
        {
        	"trigger": "has_royal_court",
        	"contents": "has_royal_court = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have a royal court?",
        },
        {
        	"trigger": "has_same_court_language",
        	"contents": "has_same_court_language = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character's court language the same language as the target character's?",
        },
        {
        	"trigger": "has_same_court_type_as",
        	"contents": "has_same_court_type_as = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the same court type as the target?",
        },
        {
        	"trigger": "has_same_culture_as",
        	"contents": "has_same_culture_as = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the same culture as the target?",
        },
        {
        	"trigger": "has_same_focus_as",
        	"contents": "has_same_focus_as = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the same focus as the target?",
        },
        {
        	"trigger": "has_same_government",
        	"contents": "has_same_government = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the character has the same government type as another character.",
        },
        {
        	"trigger": "has_same_sinful_trait",
        	"contents": "has_same_sinful_trait = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Do the two characters share a trait that is considered sinful by both of their respective faiths?",
        },
        {
        	"trigger": "has_same_virtue_trait",
        	"contents": "has_same_virtue_trait = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Do the two characters share a trait that is considered virtuous by both of their respective faiths?",
        },
        {
        	"trigger": "has_secret_relation_activity_recurrer",
        	"contents": "has_secret_relation_activity_recurrer = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_antiquarian",
        	"contents": "has_secret_relation_antiquarian = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_best_friend",
        	"contents": "has_secret_relation_best_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_bully",
        	"contents": "has_secret_relation_bully = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_court_physician",
        	"contents": "has_secret_relation_court_physician = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_crush",
        	"contents": "has_secret_relation_crush = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_guardian",
        	"contents": "has_secret_relation_guardian = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_intrigue_mentor",
        	"contents": "has_secret_relation_intrigue_mentor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_intrigue_student",
        	"contents": "has_secret_relation_intrigue_student = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_lover",
        	"contents": "has_secret_relation_lover = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_mentor",
        	"contents": "has_secret_relation_mentor = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_nemesis",
        	"contents": "has_secret_relation_nemesis = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_nursed_child",
        	"contents": "has_secret_relation_nursed_child = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },

        {
        	"trigger": "has_secret_relation_oaf",
        	"contents": "has_secret_relation_oaf = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_potential_friend",
        	"contents": "has_secret_relation_potential_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_potential_hook",
        	"contents": "has_secret_relation_potential_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_potential_lover",
        	"contents": "has_secret_relation_potential_lover = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_potential_rival",
        	"contents": "has_secret_relation_potential_rival = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_rival",
        	"contents": "has_secret_relation_rival = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_soldier_friend",
        	"contents": "has_secret_relation_soldier_friend = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_soulmate",
        	"contents": "has_secret_relation_soulmate = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_student",
        	"contents": "has_secret_relation_student = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_victim",
        	"contents": "has_secret_relation_victim = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_ward",
        	"contents": "has_secret_relation_ward = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_wedding_bad_fertility",
        	"contents": "has_secret_relation_wedding_bad_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_wedding_good_fertility",
        	"contents": "has_secret_relation_wedding_good_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_wedding_very_bad_fertility",
        	"contents": "has_secret_relation_wedding_very_bad_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_wedding_very_good_fertility",
        	"contents": "has_secret_relation_wedding_very_good_fertility = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_secret_relation_wet_nurse",
        	"contents": "has_secret_relation_wet_nurse = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks for a secret scripted relationship with a target character.",
        },
        {
        	"trigger": "has_selected_mandate",
        	"contents": "has_selected_mandate = ${1:<mandate>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Was this mandate selected for the diarch?",
        },
        {
        	"trigger": "has_sexuality",
        	"contents": "has_sexuality = ${1:<heterosexual/homosexual/bisexual/asexual/none>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character's sexuality match the scripted?",
        },
        {
        	"trigger": "has_spawned_court_events",
        	"contents": "has_spawned_court_events = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have spawned court events?",
        },
        {
        	"trigger": "has_strong_claim_on",
        	"contents": "has_strong_claim_on = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a Pressed Claim on the target title?",
        },
        {
        	"trigger": "has_strong_hook",
        	"contents": "has_strong_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a strong hook on the target?",
        },
        {
        	"trigger": "has_strong_usable_hook",
        	"contents": "has_strong_usable_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a strong hook on the target that is not on cooldown?",
        },
        {
        	"trigger": "has_targeting_faction",
        	"contents": "has_targeting_faction = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Has the scope character a faction targeting him/her?",
        },
        {
        	"trigger": "has_title",
        	"contents": "has_title = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character hold the title?",
        },
        {
        	"trigger": "has_trait",
        	"contents": "has_trait = ${1:<trait>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this trait or a trait of this trait group?",
        },
        {
        	"trigger": "has_trait_rank (rank)",
        	"contents": "has_trait_rank = {\n\ttrait = ${1:<trait>}\n\trank = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare the trait rank of a character to a value or other character.",
        },
        {
        	"trigger": "has_trait_rank (character)",
        	"contents": "has_trait_rank = {\n\ttrait = ${1:<trait>}\n\tcharacter = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare the trait rank of a character to a value or other character.",
        },
        {
        	"trigger": "has_trait_with_flag",
        	"contents": "has_trait_with_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have a trait with a certain flag?",
        },
        {
        	"trigger": "has_trait_xp",
        	"contents": "has_trait_xp = {\n\ttrait = ${1:<trait>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the scoped character has the given amount of XP in the trait level track.",
        },
        {
        	"trigger": "has_trait_xp (track)",
        	"contents": "has_trait_xp = {\n\ttrait = ${1:<trait>}\n\ttrack = ${2:<track_key>}\n\tvalue = ${3:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the scoped character has the given amount of XP in the trait level track.",
        },
        {
        	"trigger": "has_usable_hook",
        	"contents": "has_usable_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a hook on the target that isn't on cooldown?",
        },
        {
        	"trigger": "has_weak_claim_on",
        	"contents": "has_weak_claim_on = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have an Unpressed Claim on the target title?",
        },
        {
        	"trigger": "has_weak_hook",
        	"contents": "has_weak_hook = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a weak hook on the target?",
        },
        {
        	"trigger": "health",
        	"contents": "health = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required health?",
        },
        {
        	"trigger": "highest_held_title_tier",
        	"contents": "highest_held_title_tier = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "What is the highest held landed title tier of the character?",
        },
        {
        	"trigger": "highest_skill",
        	"contents": "highest_skill = ${1:<diplomacy/martial/stewardship/intrigue/learning>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the skill the highest skill (excluding Prowess) of the character?",
        },
        {
        	"trigger": "holds_landed_title",
        	"contents": "holds_landed_title = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character landed (holds a county or barony)?",
        },
        {
        	"trigger": "hostage_duration",
        	"contents": "hostage_duration = {\n\t${1:<days/months/years>} = ${2:<script_value>}}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "For how long has the scope character been a hostage?",
        },
        {
        	"trigger": "important_action_is_valid_but_invisible",
        	"contents": "important_action_is_valid_but_invisible = ${1:<important_action>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is there an important action available to the character, but they dismissed it?",
        },
        {
        	"trigger": "important_action_is_visible",
        	"contents": "important_action_is_visible = ${1:<important_action>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is there an important action shown to the character?",
        },
        {
        	"trigger": "in_diplomatic_range",
        	"contents": "in_diplomatic_range = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character and the target character within each others diplomatic range?",
        },
        {
        	"trigger": "intrigue",
        	"contents": "intrigue = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required intrigue skill level?",
        },
        {
        	"trigger": "intrigue_diff",
        	"contents": "intrigue_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required intrigue skill level difference against target?",
        },
        {
        	"trigger": "intrigue_for_portrait",
        	"contents": "intrigue_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Intrigue skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "intrigue_lifestyle_perk_points",
        	"contents": "intrigue_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perk points available does the character have?",
        },
        {
        	"trigger": "intrigue_lifestyle_perks",
        	"contents": "intrigue_lifestyle_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle does the character have?",
        },
        {
        	"trigger": "intrigue_lifestyle_unlockable_perks",
        	"contents": "intrigue_lifestyle_unlockable_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle can the character currently unlock?",
        },
        {
        	"trigger": "intrigue_lifestyle_xp",
        	"contents": "intrigue_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much lifestyle xp does the character have?",
        },
        {
        	"trigger": "is_a_faction_leader",
        	"contents": "is_a_faction_leader = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a leader of a faction?",
        },
        {
        	"trigger": "is_a_faction_member",
        	"contents": "is_a_faction_member = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a member of a faction?",
        },
        {
        	"trigger": "is_acclaimed",
        	"contents": "is_acclaimed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the given character the Acclaimed Knight of an Accolade?",
        },
        {
        	"trigger": "is_accolade_successor",
        	"contents": "is_accolade_successor = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the given character the Successor of an Accolade?",
        },
        {
        	"trigger": "is_activity_type_on_cooldown",
        	"contents": "is_activity_type_on_cooldown = ${1:<activity_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the given activity type on cooldown for the current character?",
        },
        {
        	"trigger": "is_adult",
        	"contents": "is_adult = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character adult?",
        },
        {
        	"trigger": "is_agent_exposed_in_scheme",
        	"contents": "is_agent_exposed_in_scheme = ${1:<scheme>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character an exposed agent in the target scheme?",
        },
        {
        	"trigger": "is_ai",
        	"contents": "is_ai = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character played by AI?",
        },
        {
        	"trigger": "is_alive",
        	"contents": "is_alive = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character alive or dead?",
        },
        {
        	"trigger": "is_allied_in_war",
        	"contents": "is_allied_in_war = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character allied to the target character in a war?",
        },
        {
        	"trigger": "is_allied_to",
        	"contents": "is_allied_to = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character allied to the target character?",
        },
        {
        	"trigger": "is_at_home",
        	"contents": "is_at_home = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at home?",
        },
        {
        	"trigger": "is_at_location",
        	"contents": "is_at_location = ${1:<province>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character currently in the target province?",
        },
        {
        	"trigger": "is_at_same_location",
        	"contents": "is_at_same_location = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character currently in the same province as the target character?",
        },
        {
        	"trigger": "is_at_war",
        	"contents": "is_at_war = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war?",
        },
        {
        	"trigger": "is_at_war_as_attacker",
        	"contents": "is_at_war_as_attacker = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war as an attacker?",
        },
        {
        	"trigger": "is_at_war_as_defender",
        	"contents": "is_at_war_as_defender = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war as a defender?",
        },
        {
        	"trigger": "is_at_war_with",
        	"contents": "is_at_war_with = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war with the target?",
        },
        {
        	"trigger": "is_at_war_with_liege",
        	"contents": "is_at_war_with_liege = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war with their liege?",
        },
        {
        	"trigger": "is_attacker_in_war",
        	"contents": "is_attacker_in_war = ${1:<war>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character in target war as an attacker?",
        },
        {
        	"trigger": "is_attracted_to_gender_of",
        	"contents": "is_attracted_to_gender_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the sexuality of the scope character make them attracted to the target character?",
        },
        {
        	"trigger": "is_attracted_to_men",
        	"contents": "is_attracted_to_men = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character attracted to men?",
        },
        {
        	"trigger": "is_attracted_to_women",
        	"contents": "is_attracted_to_women = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character attracted to women?",
        },
        {
        	"trigger": "is_away_from_court",
        	"contents": "is_away_from_court = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character away from the court?",
        },
        {
        	"trigger": "is_betrothed",
        	"contents": "is_betrothed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character betrothed?",
        },
        {
        	"trigger": "is_causing_raid_hostility_towards",
        	"contents": "is_causing_raid_hostility_towards = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character making the target hostile due to having raided their (top-liege's) realm?",
        },
        {
        	"trigger": "is_character_interaction_potentially_accepted",
        	"contents": "is_character_interaction_potentially_accepted = {\n\trecipient = ${1:<character>}\n\tinteraction = ${2:<interaction_name>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character interaction specified available and potentially accepted for the target character?",
        },
        {
        	"trigger": "is_character_interaction_potentially_accepted (all values)",
        	"contents": "is_character_interaction_potentially_accepted = {\n\trecipient = ${1:<character>}\n\tinteraction = ${2:<interaction_name>}\n\tsecondary_actor = ${3:<character>}\n\tsecondary_recipient = ${4:<character>}\n\ttarget_title = ${5:<title>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character interaction specified available and potentially accepted for the target character?",
        },
        {
        	"trigger": "is_character_interaction_shown",
        	"contents": "is_character_interaction_shown = {\n\trecipient = ${1:<character>}\n\tinteraction = ${2:<interaction_name>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character interaction specified shown for the target character?",
        },
        {
        	"trigger": "is_character_interaction_valid",
        	"contents": "is_character_interaction_valid = {\n\trecipient = ${1:<character>}\n\tinteraction = ${2:<interaction_name>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character interaction specified valid (shown and usable) for the target character?",
        },
        {
        	"trigger": "is_character_window_main_character",
        	"contents": "is_character_window_main_character = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the local player the main character in the character window?",
        },
        {
        	"trigger": "is_child_of",
        	"contents": "is_child_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a child of the target character?",
        },
        {
        	"trigger": "is_claimant",
        	"contents": "is_claimant = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a claimant to any landed titles?",
        },
        {
        	"trigger": "is_clergy",
        	"contents": "is_clergy = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a clergy?",
        },
        {
        	"trigger": "is_close_family_of",
        	"contents": "is_close_family_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a close family of the target character?",
        },
        {
        	"trigger": "is_close_or_extended_family_of",
        	"contents": "is_close_or_extended_family_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a close or extended family of the target character?",
        },
        {
        	"trigger": "is_commanding_army",
        	"contents": "is_commanding_army = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a commanding an army?",
        },
        {
        	"trigger": "is_concubine",
        	"contents": "is_concubine = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a concubine?",
        },
        {
        	"trigger": "is_concubine_of",
        	"contents": "is_concubine_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character a concubine of the scope character?",
        },
        {
        	"trigger": "is_consort_of",
        	"contents": "is_consort_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a spouse or concubine of the target character?",
        },
        {
        	"trigger": "is_council_task_valid",
        	"contents": "is_council_task_valid = {\n\ttask_type = ${1:<council_position_task>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if the task of the scope councillor is valid.",
        },
        {
        	"trigger": "is_councillor",
        	"contents": "is_councillor = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a councillor?",
        },
        {
        	"trigger": "is_councillor_of",
        	"contents": "is_councillor_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a councillor for the specified character?",
        },
        {
        	"trigger": "is_court_position_employer",
        	"contents": "is_court_position_employer = {\n\tcourt_position = ${1:<court_position>}\n\twho = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character employed in the target position by target character?",
        },
        {
        	"trigger": "is_courtier",
        	"contents": "is_courtier = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a courtier?",
        },
        {
        	"trigger": "is_courtier_of",
        	"contents": "is_courtier_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a courtier of the target character?",
        },
        {
        	"trigger": "is_cousin_of",
        	"contents": "is_cousin_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a cousin of the target character?",
        },
        {
        	"trigger": "is_decision_on_cooldown",
        	"contents": "is_decision_on_cooldown = ${1:<decision>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the given decision on cooldown for the current character?",
        },
        {
        	"trigger": "is_defender_in_war",
        	"contents": "is_defender_in_war = ${1:<war>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character in the target war as a defender?",
        },
        {
        	"trigger": "is_designated_diarch",
        	"contents": "is_designated_diarch = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character was diesignated as diarch by their liege?",
        },
        {
        	"trigger": "is_diarch",
        	"contents": "is_diarch = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character currently an active diarch of anyone?",
        },
        {
        	"trigger": "is_diarch_of_target",
        	"contents": "is_diarch_of_target = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character currently an active diarch of the target?",
        },
        {
        	"trigger": "is_diarchy_successor",
        	"contents": "is_diarchy_successor = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character next in the line of succession for diarchy?",
        },
        {
        	"trigger": "is_employer_of",
        	"contents": "is_employer_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character a courtier of the scope character?",
        },
        {
        	"trigger": "is_extended_family_of",
        	"contents": "is_extended_family_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a extended family of the target character?",
        },
        {
        	"trigger": "is_female",
        	"contents": "is_female = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character female?",
        },
        {
        	"trigger": "is_forbidden_from_scheme",
        	"contents": "is_forbidden_from_scheme = ${1:<scheme>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character forbidden from the target scheme?",
        },
        {
        	"trigger": "is_forced_into_faction",
        	"contents": "is_forced_into_faction = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character forced to be part of a faction?",
        },
        {
        	"trigger": "is_forced_into_scheme",
        	"contents": "is_forced_into_scheme = ${1:<scheme>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the scope character is forced into the target scheme.",
        },
        {
        	"trigger": "is_foreign_court_guest",
        	"contents": "is_foreign_court_guest = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest from another a court?",
        },
        {
        	"trigger": "is_foreign_court_guest_of",
        	"contents": "is_foreign_court_guest_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest from another a court, visiting the target character's court?",
        },
        {
        	"trigger": "is_foreign_court_or_pool_guest",
        	"contents": "is_foreign_court_or_pool_guest = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest?",
        },
        {
        	"trigger": "is_foreign_court_or_pool_guest_of",
        	"contents": "is_foreign_court_or_pool_guest_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest?",
        },
        {
        	"trigger": "is_from_ruler_designer",
        	"contents": "is_from_ruler_designer = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Was this character made from the ruler designer?",
        },
        {
        	"trigger": "is_grandchild_of",
        	"contents": "is_grandchild_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a grandchild of the target character?",
        },
        {
        	"trigger": "is_grandparent_of",
        	"contents": "is_grandparent_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a grandparent of the target character?",
        },
        {
        	"trigger": "is_great_grandchild_of",
        	"contents": "is_great_grandchild_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a great grandchild of the target character?",
        },
        {
        	"trigger": "is_great_grandparent_of",
        	"contents": "is_great_grandparent_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a great grandparent of the target character?",
        },
        {
        	"trigger": "is_heir_of",
        	"contents": "is_heir_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character an heir of the target?",
        },
        {
        	"trigger": "is_hostage",
        	"contents": "is_hostage = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a Hostage?",
        },
        {
        	"trigger": "is_hostage_from",
        	"contents": "is_hostage_from = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a Hostage with target character as their original Liege?",
        },
        {
        	"trigger": "is_hostage_of",
        	"contents": "is_hostage_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a Hostage with target character as their Warden?",
        },
        {
        	"trigger": "is_hostage_warden",
        	"contents": "is_hostage_warden = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a Warden with Hostages?",
        },
        {
        	"trigger": "is_immortal",
        	"contents": "is_immortal = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character immortal?",
        },
        {
        	"trigger": "is_important_decision",
        	"contents": "is_important_decision = ${1:<decision>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped decision an important decision for the target character?",
        },
        {
        	"trigger": "is_imprisoned",
        	"contents": "is_imprisoned = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character imprisoned?",
        },
        {
        	"trigger": "is_imprisoned_by",
        	"contents": "is_imprisoned_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character imprisoned by the target character?",
        },
        {
        	"trigger": "is_in_army",
        	"contents": "is_in_army = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in an army (a commander or a knight)?",
        },
        {
        	"trigger": "is_in_civil_war",
        	"contents": "is_in_civil_war = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character at war with their liege, or one or more of their vassals?",
        },
        {
        	"trigger": "is_in_guest_subset",
        	"contents": "is_in_guest_subset = {\n\tname = ${1:<subset_key>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character in the specified guest subset in the activity they are involved in?",
        },
        {
        	"trigger": "is_in_guest_subset (phase)",
        	"contents": "is_in_guest_subset = {\n\tname = ${1:<subset_key>}\n\tphase = ${2:<phase_key>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character in the specified guest subset in the activity they are involved in?",
        },
        {
        	"trigger": "is_in_ongoing_great_holy_war",
        	"contents": "is_in_ongoing_great_holy_war = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in an ongoing great holy war?",
        },
        {
        	"trigger": "is_in_pool_at",
        	"contents": "is_in_pool_at = ${1:<province>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in the pool the target province is a part of?",
        },
        {
        	"trigger": "is_in_prison_type",
        	"contents": "is_in_prison_type = ${1:<imprisonment_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character imprisoned in a prison of the specified type?",
        },
        {
        	"trigger": "is_in_the_same_court_as",
        	"contents": "is_in_the_same_court_as = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in the same court as the target character?",
        },
        {
        	"trigger": "is_in_the_same_court_as_or_guest",
        	"contents": "is_in_the_same_court_as_or_guest = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in the same court as the target character?",
        },
        {
        	"trigger": "is_incapable",
        	"contents": "is_incapable = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character incapable?",
        },
        {
        	"trigger": "is_independent_ruler",
        	"contents": "is_independent_ruler = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character an independent ruler?",
        },
        {
        	"trigger": "is_knight",
        	"contents": "is_knight = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a knight?",
        },
        {
        	"trigger": "is_knight_of",
        	"contents": "is_knight_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a knight of the target character?",
        },
        {
        	"trigger": "is_landed",
        	"contents": "is_landed = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character landed?",
        },
        {
        	"trigger": "is_landless_ruler",
        	"contents": "is_landless_ruler = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a landless ruler?",
        },
        {
        	"trigger": "is_leader_in_war",
        	"contents": "is_leader_in_war = ${1:<war>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character leading one of the sides in the target war?",
        },
        {
        	"trigger": "is_leading_faction_type",
        	"contents": "is_leading_faction_type = ${1:<faction_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character leading a faction of the specified type?",
        },
        {
        	"trigger": "is_liege_or_above_of",
        	"contents": "is_liege_or_above_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a liege or above of the target character?",
        },
        {
        	"trigger": "is_local_player",
        	"contents": "is_local_player = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character the local player?",
        },
        {
        	"trigger": "is_lowborn",
        	"contents": "is_lowborn = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a lowborn?",
        },
        {
        	"trigger": "is_male",
        	"contents": "is_male = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character male?",
        },
        {
        	"trigger": "is_married",
        	"contents": "is_married = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character married?",
        },
        {
        	"trigger": "is_nibling_of",
        	"contents": "is_nibling_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a nibling of the target character?",
        },
        {
        	"trigger": "is_normal_councillor",
        	"contents": "is_normal_councillor = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a regular councillor?",
        },
        {
        	"trigger": "is_overriding_designated_winner",
        	"contents": "is_overriding_designated_winner = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character overriding the winner in the GHW they're pledged to?",
        },
        {
        	"trigger": "is_parent_of",
        	"contents": "is_parent_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a parent of the target character?",
        },
        {
        	"trigger": "is_participant_in_activity",
        	"contents": "is_participant_in_activity = ${1:<activity>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a participant in the target activity?",
        },
        {
        	"trigger": "is_participant_in_war",
        	"contents": "is_participant_in_war = ${1:<war>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character participating in the target war as an attacker or defender?",
        },
        {
        	"trigger": "is_performing_council_task",
        	"contents": "is_performing_council_task = ${1:<council_task>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character performing the given task?",
        },
        {
        	"trigger": "is_player_heir_of",
        	"contents": "is_player_heir_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character the player heir of the target character?",
        },
        {
        	"trigger": "is_pledged_ghw_attacker",
        	"contents": "is_pledged_ghw_attacker = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a pledged attacker in the current GHW?",
        },
        {
        	"trigger": "is_pool_character",
        	"contents": "is_pool_character = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character in the pool?",
        },
        {
        	"trigger": "is_pool_guest",
        	"contents": "is_pool_guest = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest from the pool?",
        },
        {
        	"trigger": "is_pool_guest_of",
        	"contents": "is_pool_guest_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a guest from the pool, visiting the target character's court?",
        },
        {
        	"trigger": "is_potential_knight",
        	"contents": "is_potential_knight = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a POTENTIAL knight to their liege?",
        },
        {
        	"trigger": "is_powerful_vassal",
        	"contents": "is_powerful_vassal = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a powerful vassal?",
        },
        {
        	"trigger": "is_powerful_vassal_of",
        	"contents": "is_powerful_vassal_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a powerful vassal of the target?",
        },
        {
        	"trigger": "is_pregnant",
        	"contents": "is_pregnant = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character pregnant?",
        },
        {
        	"trigger": "is_primary_heir_of",
        	"contents": "is_primary_heir_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character the heir of the target's primary title?",
        },
        {
        	"trigger": "is_ruler",
        	"contents": "is_ruler = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a ruler?",
        },
        {
        	"trigger": "is_scheming_against",
        	"contents": "is_scheming_against = {\n\ttarget = ${1:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks whether the scope character is an owner or an owner agent in a scheme against target.",
        },
        {
        	"trigger": "is_scheming_against (type)",
        	"contents": "is_scheming_against = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<scheme_type>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks whether the scope character is an owner or an owner agent in a scheme against target.",
        },
        {
        	"trigger": "is_scheming_against (skill)",
        	"contents": "is_scheming_against = {\n\ttarget = ${1:<character>}\n\tscheme_skill = ${2:<skill>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks whether the scope character is an owner or an owner agent in a scheme against target. ",
        },
        {
        	"trigger": "is_sibling_of",
        	"contents": "is_sibling_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a sibling of the target character?",
        },
        {
        	"trigger": "is_spouse_of",
        	"contents": "is_spouse_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a spouse of the target character, and are both alive?",
        },
        {
        	"trigger": "is_spouse_of_even_if_dead",
        	"contents": "is_spouse_of_even_if_dead = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a spouse of the target character, even if one or both are dead?",
        },
        {
        	"trigger": "is_successor_of_accolade",
        	"contents": "is_successor_of_accolade = ${1:<accolade>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character the successor of a given Accolade?",
        },
        {
        	"trigger": "is_theocratic_lessee",
        	"contents": "is_theocratic_lessee = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a theocratic lessee (bishop)?",
        },
        {
        	"trigger": "is_travel_entourage_character",
        	"contents": "is_travel_entourage_character = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character travelling and part of the entourage?",
        },
        {
        	"trigger": "is_travel_leader",
        	"contents": "is_travel_leader = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character travelling and the active travel leader?",
        },
        {
        	"trigger": "is_travelling",
        	"contents": "is_travelling = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character currently travelling?",
        },
        {
        	"trigger": "is_twin_of",
        	"contents": "is_twin_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a twin of the target character?",
        },
        {
        	"trigger": "is_unborn_child_of_concubine",
        	"contents": "is_unborn_child_of_concubine = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the unborn a child of a concubine?",
        },
        {
        	"trigger": "is_unborn_known_bastard",
        	"contents": "is_unborn_known_bastard = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the unborn a known bastard?",
        },
        {
        	"trigger": "is_uncle_or_aunt_of",
        	"contents": "is_uncle_or_aunt_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character an uncle or aunt of the target character?",
        },
        {
        	"trigger": "is_valid_as_agent_in_scheme",
        	"contents": "is_valid_as_agent_in_scheme = ${1:<scheme>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character suitable as an agent for the target scheme?",
        },
        {
        	"trigger": "is_valid_for_event_debug_cooldown",
        	"contents": "is_valid_for_event_debug_cooldown = ${1:<event_key>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character valid for the given event, including a cooldown check?",
        },
        {
        	"trigger": "is_valid_successor_for_accolade",
        	"contents": "is_valid_successor_for_accolade = ${1:<accolade>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character a valid candidate to take over as successor of this Accolade?",
        },
        {
        	"trigger": "is_vassal_of",
        	"contents": "is_vassal_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character a direct vassal of the target character?",
        },
        {
        	"trigger": "is_vassal_or_below_of",
        	"contents": "is_vassal_or_below_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scope character a vassal or below of the target character?",
        },
        {
        	"trigger": "is_visibly_fertile",
        	"contents": "is_visibly_fertile = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character visibly fertile?",
        },
        {
        	"trigger": "join_faction_chance",
        	"contents": "join_faction_chance = {\n\ttarget = ${1:<faction>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if the chance of the scope character to join the faction against the scripted value?",
        },
        {
        	"trigger": "join_scheme_chance",
        	"contents": "join_scheme_chance = {\n\tscheme = ${1:<scheme_target>}\n\tmax = ${2:<value>}\n\tmin = ${3:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check if the change of the scope character is between the given range (being min and max exclusive)",
        },
        {
        	"trigger": "knows_court_language_of",
        	"contents": "knows_court_language_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character know the court language of the target character?",
        },
        {
        	"trigger": "knows_language",
        	"contents": "knows_language = ${1:<language>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character know the language?",
        },
        {
        	"trigger": "knows_language_of_culture",
        	"contents": "knows_language_of_culture = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character know the language of the target culture?",
        },
        {
        	"trigger": "knows_language_of_culture",
        	"contents": "knows_language_of_culture = ${1:<culture>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character know the language of the target culture?",
        },
        {
        	"trigger": "learning",
        	"contents": "learning = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required learning skill level?",
        },
        {
        	"trigger": "learning_diff",
        	"contents": "learning_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required learning skill level difference against target?",
        },
        {
        	"trigger": "learning_for_portrait",
        	"contents": "learning_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Learning skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "learning_lifestyle_perk_points",
        	"contents": "learning_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perk points available does the character have?",
        },
        {
        	"trigger": "learning_lifestyle_perks",
        	"contents": "learning_lifestyle_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle does the character have?",
        },
        {
        	"trigger": "learning_lifestyle_unlockable_perks",
        	"contents": "learning_lifestyle_unlockable_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle can the character currently unlock?",
        },
        {
        	"trigger": "learning_lifestyle_xp",
        	"contents": "learning_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much lifestyle xp does the character have?",
        },
        {
        	"trigger": "long_term_gold",
        	"contents": "long_term_gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required gold? (AI category 'long term')",
        },
        {
        	"trigger": "long_term_gold_maximum",
        	"contents": "long_term_gold_maximum = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How big is the 'long term' budget is supposed to get?",
        },
        {
        	"trigger": "mandate_type_qualification",
        	"contents": "mandate_type_qualification = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Diarch qualification for spefic mandate type.",
        },
        {
        	"trigger": "martial",
        	"contents": "martial = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required martial skill level?",
        },
        {
        	"trigger": "martial_diff",
        	"contents": "martial_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required martial skill level difference against target?",
        },
        {
        	"trigger": "martial_for_portrait",
        	"contents": "martial_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Martial skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "martial_lifestyle_perk_points",
        	"contents": "martial_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perk points available does the character have?",
        },
        {
        	"trigger": "martial_lifestyle_perks",
        	"contents": "martial_lifestyle_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle does the character have?",
        },
        {
        	"trigger": "martial_lifestyle_unlockable_perks",
        	"contents": "martial_lifestyle_unlockable_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle can the character currently unlock?",
        },
        {
        	"trigger": "martial_lifestyle_xp",
        	"contents": "martial_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much lifestyle xp does the character have?",
        },
        {
        	"trigger": "matrilinear_betrothal",
        	"contents": "matrilinear_betrothal = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is this character's betrothal matrilinear? False if there's no betrothal.",
        },
        {
        	"trigger": "matrilinear_marriage",
        	"contents": "matrilinear_marriage = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the marriage with the spouse matrilinear?",
        },
        {
        	"trigger": "max_active_accolades",
        	"contents": "max_active_accolades = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many active accolades can this character have at most?",
        },
        {
        	"trigger": "max_military_strength",
        	"contents": "max_military_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's max military strength this big?",
        },
        {
        	"trigger": "max_number_maa_soldiers_of_base_type",
        	"contents": "max_number_maa_soldiers_of_base_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of max soldiers of MaA of the base type?",
        },
        {
        	"trigger": "max_number_maa_soldiers_of_type",
        	"contents": "max_number_maa_soldiers_of_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of max soldiers of MaA of the type?",
        },
        {
        	"trigger": "max_number_of_concubines",
        	"contents": "max_number_of_concubines = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The maximum number of concubines a character can have.",
        },
        {
        	"trigger": "max_number_of_knights",
        	"contents": "max_number_of_knights = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check how many knights the scoped character can potentially have.",
        },
        {
        	"trigger": "missing_unique_ancestors",
        	"contents": "missing_unique_ancestors = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The amount of missing unique ancestors from the characters real father and mother.",
        },
        {
        	"trigger": "monthly_character_balance",
        	"contents": "monthly_character_balance = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's monthly balance this big?",
        },
        {
        	"trigger": "monthly_character_expenses",
        	"contents": "monthly_character_expenses = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's monthly expenses this big?",
        },
        {
        	"trigger": "monthly_character_income",
        	"contents": "monthly_character_income = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's monthly income this big?",
        },
        {
        	"trigger": "monthly_character_income_long_term",
        	"contents": "monthly_character_income_long_term = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Did the character allocate the required gold? (AI category long term)",
        },
        {
        	"trigger": "monthly_character_income_reserved",
        	"contents": "monthly_character_income_reserved = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Did the character allocate the required gold? (AI category reserved)",
        },
        {
        	"trigger": "monthly_character_income_short_term",
        	"contents": "monthly_character_income_short_term = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Did the character allocate the required gold? (AI category short term)",
        },
        {
        	"trigger": "monthly_character_income_war_chest",
        	"contents": "monthly_character_income_war_chest = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Did the character allocate the required gold? (AI category war chest)",
        },
        {
        	"trigger": "months_as_ruler",
        	"contents": "months_as_ruler = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of months this character has been a ruler.",
        },
        {
        	"trigger": "morph_gene_attribute",
        	"contents": "morph_gene_attribute = {\n\tcategory = ${1:<category>}\n\tattribute = ${2:<attribute>}\n\tvalue = ${3:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare entity attribute from specific gene.",
        },
        {
        	"trigger": "morph_gene_value",
        	"contents": "morph_gene_value = {\n\tcategory = ${1:<category>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare value of specific gene.",
        },
        {
        	"trigger": "num_active_accolades",
        	"contents": "num_active_accolades = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many active accolades does this character currently have?",
        },
        {
        	"trigger": "num_inactive_accolades",
        	"contents": "num_inactive_accolades = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many inactive accolades does this character currently have?",
        },
        {
        	"trigger": "num_of_bad_genetic_traits",
        	"contents": "num_of_bad_genetic_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare the number of bad genetic traits.",
        },
        {
        	"trigger": "num_of_good_genetic_traits",
        	"contents": "num_of_good_genetic_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compare the number of good genetic traits.",
        },
        {
        	"trigger": "num_of_known_languages",
        	"contents": "num_of_known_languages = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many languages does the character know?",
        },
        {
        	"trigger": "num_of_relation_activity_recurrer",
        	"contents": "num_of_relation_activity_recurrer = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_antiquarian",
        	"contents": "num_of_relation_antiquarian = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_best_friend",
        	"contents": "num_of_relation_best_friend = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_bully",
        	"contents": "num_of_relation_bully = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_court_physician",
        	"contents": "num_of_relation_court_physician = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_crush",
        	"contents": "num_of_relation_crush = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_friend",
        	"contents": "num_of_relation_friend = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_guardian",
        	"contents": "num_of_relation_guardian = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_intrigue_mentor",
        	"contents": "num_of_relation_intrigue_mentor = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_intrigue_student",
        	"contents": "num_of_relation_intrigue_student = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_lover",
        	"contents": "num_of_relation_lover = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_mentor",
        	"contents": "num_of_relation_mentor = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_nemesis",
        	"contents": "num_of_relation_nemesis = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_nursed_child",
        	"contents": "num_of_relation_nursed_child = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_oaf",
        	"contents": "num_of_relation_oaf = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_potential_friend",
        	"contents": "num_of_relation_potential_friend = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_potential_hook",
        	"contents": "num_of_relation_potential_hook = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_potential_lover",
        	"contents": "num_of_relation_potential_lover = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_potential_rival",
        	"contents": "num_of_relation_potential_rival = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_rival",
        	"contents": "num_of_relation_rival = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_soldier_friend",
        	"contents": "num_of_relation_soldier_friend = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_soulmate",
        	"contents": "num_of_relation_soulmate = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_student",
        	"contents": "num_of_relation_student = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_victim",
        	"contents": "num_of_relation_victim = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_ward",
        	"contents": "num_of_relation_ward = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_wedding_bad_fertility",
        	"contents": "num_of_relation_wedding_bad_fertility = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_wedding_good_fertility",
        	"contents": "num_of_relation_wedding_good_fertility = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_wedding_very_bad_fertility",
        	"contents": "num_of_relation_wedding_very_bad_fertility = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_wedding_very_good_fertility",
        	"contents": "num_of_relation_wedding_very_good_fertility = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_of_relation_wet_nurse",
        	"contents": "num_of_relation_wet_nurse = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Compares the number of scripted relations a character has of the type.",
        },
        {
        	"trigger": "num_sinful_traits",
        	"contents": "num_sinful_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have this number of virtous traits?",
        },
        {
        	"trigger": "num_virtuous_traits",
        	"contents": "num_virtuous_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scoped character have this number of virtous traits?",
        },
        {
        	"trigger": "number_maa_regiments_of_base_type",
        	"contents": "number_maa_regiments_of_base_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of MaA of the base type?",
        },
        {
        	"trigger": "number_maa_regiments_of_type",
        	"contents": "number_maa_regiments_of_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of MaA of the type?",
        },
        {
        	"trigger": "number_maa_soldiers_of_base_type",
        	"contents": "number_maa_soldiers_of_base_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of soldiers of MaA of the base type?",
        },
        {
        	"trigger": "number_maa_soldiers_of_type",
        	"contents": "number_maa_soldiers_of_type = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the scope character have value amount of soldiers of MaA of the type?",
        },
        {
        	"trigger": "number_of_commander_traits",
        	"contents": "number_of_commander_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many commander traits?",
        },
        {
        	"trigger": "number_of_commander_traits_in_common",
        	"contents": "number_of_commander_traits_in_common = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character and the target have a number of commander traits in common?",
        },
        {
        	"trigger": "number_of_concubines",
        	"contents": "number_of_concubines = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The number of concubines the scoped character has.",
        },
        {
        	"trigger": "number_of_desired_concubines",
        	"contents": "number_of_desired_concubines = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The number of fertile concubines the scoped character should have to not get penalties.",
        },
        {
        	"trigger": "number_of_election_votes",
        	"contents": "number_of_election_votes = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check the number of votes the scoped character has in the target title.",
        },
        {
        	"trigger": "number_of_fertile_concubines",
        	"contents": "number_of_fertile_concubines = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The number of visibly fertile concubines the scoped character has.",
        },
        {
        	"trigger": "number_of_knights",
        	"contents": "number_of_knights = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Check how many knights the scoped character has at the moment.",
        },
        {
        	"trigger": "number_of_lifestyle_traits",
        	"contents": "number_of_lifestyle_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many lifestyle traits?",
        },
        {
        	"trigger": "number_of_maa_regiments",
        	"contents": "number_of_maa_regiments = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The number of men at arms the scoped character has.",
        },
        {
        	"trigger": "number_of_opposing_personality_traits",
        	"contents": "number_of_opposing_personality_traits = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character and the target have a number of opposing personality traits?",
        },
        {
        	"trigger": "number_of_opposing_traits",
        	"contents": "number_of_opposing_traits = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character and the target have a number of opposing traits?",
        },
        {
        	"trigger": "number_of_personality_traits",
        	"contents": "number_of_personality_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many personality traits?",
        },
        {
        	"trigger": "number_of_personality_traits_in_common",
        	"contents": "number_of_personality_traits_in_common = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character and the target have a number of personality traits in common?",
        },
        {
        	"trigger": "number_of_powerful_vassals",
        	"contents": "number_of_powerful_vassals = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have a specified number of powerful vassals?",
        },
        {
        	"trigger": "number_of_sinful_traits_in_common",
        	"contents": "number_of_sinful_traits_in_common = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Do the two characters share a number of traits that is considered sinful by both of their respective faiths?",
        },
        {
        	"trigger": "number_of_stationed_maa_regiments",
        	"contents": "number_of_stationed_maa_regiments = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The number of stationed men at arms the scoped character has.",
        },
        {
        	"trigger": "number_of_traits",
        	"contents": "number_of_traits = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many traits?",
        },
        {
        	"trigger": "number_of_traits_in_common",
        	"contents": "number_of_traits_in_common = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character and the target have a number of traits in common?",
        },
        {
        	"trigger": "number_of_virtue_traits_in_common",
        	"contents": "number_of_virtue_traits_in_common = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Do the two characters share a number of traits that is considered virtuous by both of their respective faiths?",
        },
        {
        	"trigger": "opinion",
        	"contents": "opinion = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character's opinion of the target greater or equal than the value?",
        },
        {
        	"trigger": "owns_a_story",
        	"contents": "owns_a_story = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks whether the scope character is the owner of any currently active story.",
        },
        {
        	"trigger": "owns_story_of_type",
        	"contents": "owns_story_of_type = ${1:<story_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character own a story of this type?",
        },
        {
        	"trigger": "patrilinear_betrothal",
        	"contents": "patrilinear_betrothal = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is this character's betrothal patrilinear?",
        },
        {
        	"trigger": "perk_points",
        	"contents": "perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many perk points across all lifestyles combined?",
        },
        {
        	"trigger": "perk_points_assigned",
        	"contents": "perk_points_assigned = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many perk points assigned across all lifestyles combined?",
        },
        {
        	"trigger": "perks_in_tree",
        	"contents": "perks_in_tree = {\n\ttree = ${1:<tree_key>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have this many perk points assigned to this tree?",
        },
        {
        	"trigger": "piety",
        	"contents": "piety = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required piety?",
        },
        {
        	"trigger": "piety_level",
        	"contents": "piety_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required piety level?",
        },
        {
        	"trigger": "player_heir_position",
        	"contents": "player_heir_position = {\n\ttarget = ${1:<character>}\n\tposition = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "heck where the target character is in the scoped character's player heir list.",
        },
        {
        	"trigger": "pregnancy_days",
        	"contents": "pregnancy_days = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How long has the character been pregnant?",
        },
        {
        	"trigger": "prestige",
        	"contents": "prestige = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required prestige?",
        },
        {
        	"trigger": "prestige_level",
        	"contents": "prestige_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required prestige level?",
        },
        {
        	"trigger": "prowess",
        	"contents": "prowess = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required prowess skill level?",
        },
        {
        	"trigger": "prowess_diff",
        	"contents": "prowess_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required prowess skill level difference against target?",
        },
        {
        	"trigger": "prowess_for_portrait",
        	"contents": "prowess_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Prowess skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "ransom_cost",
        	"contents": "ransom_cost = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "What is the ransom cost of the character?",
        },
        {
        	"trigger": "realm_size",
        	"contents": "realm_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's top liege's realm this big (# of counties)?",
        },
        {
        	"trigger": "realm_to_title_distance_squared",
        	"contents": "realm_to_title_distance_squared = {\n\ttitle = ${1:<title>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the character's realm within this distance of the title?",
        },
        {
        	"trigger": "reserved_gold",
        	"contents": "reserved_gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required gold? (AI category 'reserved')",
        },
        {
        	"trigger": "reserved_gold_maximum",
        	"contents": "reserved_gold_maximum = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How big is the 'reserved' budget is supposed to get?",
        },
        {
        	"trigger": "reverse_opinion",
        	"contents": "reverse_opinion = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character's opinion of the scope character greater or equal than the value?",
        },
        {
        	"trigger": "scriptedtests_can_marry_character",
        	"contents": "scriptedtests_can_marry_character = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the character marry the target character?",
        },
        {
        	"trigger": "scriptedtests_dread_base",
        	"contents": "scriptedtests_dread_base = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the specified dread baseline value?",
        },
        {
        	"trigger": "scriptedtests_gold_income_no_theocracy",
        	"contents": "scriptedtests_gold_income_no_theocracy = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the specified tax income, excluding income from the theocratic lessee?",
        },
        {
        	"trigger": "scriptedtests_piety_income",
        	"contents": "scriptedtests_piety_income = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the specified piety income?",
        },
        {
        	"trigger": "sex_opposite_of",
        	"contents": "sex_opposite_of = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Are the scoped character and the target character of the opposite sex?",
        },
        {
        	"trigger": "sex_same_as",
        	"contents": "sex_same_as = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Are the scoped character and the target character of the same sex?",
        },
        {
        	"trigger": "short_term_gold",
        	"contents": "short_term_gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required gold? (AI category 'short term')",
        },
        {
        	"trigger": "short_term_gold_maximum",
        	"contents": "short_term_gold_maximum = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How big is the 'short term' budget is supposed to get?",
        },
        {
        	"trigger": "should_decision_create_alert",
        	"contents": "should_decision_create_alert = ${1:<decision>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped decision an important decision for the target character?",
        },
        {
        	"trigger": "should_notify_can_host_activity",
        	"contents": "should_notify_can_host_activity = ${1:<activity_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Should the scoped character be alerted that they can host the target activity type?",
        },
        {
        	"trigger": "should_notify_can_join_open_activity",
        	"contents": "should_notify_can_join_open_activity = ${1:<activity_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Should the scoped character be alerted that they can join the target activity type?",
        },
        {
        	"trigger": "stewardship",
        	"contents": "stewardship = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required stewardship skill level?",
        },
        {
        	"trigger": "stewardship_diff",
        	"contents": "stewardship_diff = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required stewardship skill level difference against target?",
        },
        {
        	"trigger": "stewardship_for_portrait",
        	"contents": "stewardship_for_portrait = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Stewardship skill scaled between 0.0 and 1.0 for portraits.",
        },
        {
        	"trigger": "stewardship_lifestyle_perk_points",
        	"contents": "stewardship_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perk points available does the character have?",
        },
        {
        	"trigger": "stewardship_lifestyle_perks",
        	"contents": "stewardship_lifestyle_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle does the character have?",
        },
        {
        	"trigger": "stewardship_lifestyle_unlockable_perks",
        	"contents": "stewardship_lifestyle_unlockable_perks = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many perks from this lifestyle can the character currently unlock?",
        },
        {
        	"trigger": "stewardship_lifestyle_xp",
        	"contents": "stewardship_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much lifestyle xp does the character have?",
        },
        {
        	"trigger": "stress",
        	"contents": "stress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required stress?",
        },
        {
        	"trigger": "stress_level",
        	"contents": "stress_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required stress level?",
        },
        {
        	"trigger": "strife_opinion",
        	"contents": "strife_opinion = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Strife opinion value accumulated by the character.",
        },
        {
        	"trigger": "sub_realm_size",
        	"contents": "sub_realm_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's sub-realm this big?",
        },
        {
        	"trigger": "target_is_liege_or_above",
        	"contents": "target_is_liege_or_above = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character the liege or above the scope character?",
        },
        {
        	"trigger": "target_is_same_character_or_above",
        	"contents": "target_is_same_character_or_above = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character the same character or above (in the vassal hierarchy) the scope character?",
        },
        {
        	"trigger": "target_is_liege_or_above",
        	"contents": "target_is_liege_or_above = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the target character a vassal or below the scope character?",
        },
        {
        	"trigger": "target_weight",
        	"contents": "target_weight = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Target weight of the scoped character.",
        },
        {
        	"trigger": "tier_difference",
        	"contents": "tier_difference = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Difference in highest_held_title_tier between the scoped character and the target character (-5 to 5).",
        },
        {
        	"trigger": "time_after_diarch_designated",
        	"contents": "time_after_diarch_designated = {\n\t${1:<days/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How much time passed after diarch was designated?",
        },
        {
        	"trigger": "time_in_prison",
        	"contents": "time_in_prison = {\n\t${1:<days/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "For how long has the character been imprisoned?",
        },
        {
        	"trigger": "time_in_prison_type",
        	"contents": "time_in_prison_type = {\n\t${1:<days/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "For how long has the character been imprisoned with the current type?",
        },
        {
        	"trigger": "time_since_death",
        	"contents": "time_since_death = {\n\t${1:<days/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "For how long has the character been dead?",
        },
        {
        	"trigger": "time_to_hook_expiry",
        	"contents": "time_to_hook_expiry = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The # of days until the scoped character's hook on the target expires.",
        },
        {
        	"trigger": "trait_compatibility",
        	"contents": "trait_compatibility = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Sum of trait compatibility values.",
        },
        {
        	"trigger": "travel_leader_cost",
        	"contents": "travel_leader_cost = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "What this character would cost as a travel leader?",
        },
        {
        	"trigger": "travel_leader_safety",
        	"contents": "travel_leader_safety = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The safety-aptitude of the current travel leader.",
        },
        {
        	"trigger": "travel_leader_speed",
        	"contents": "travel_leader_speed = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The speed-aptitude of the current travel leader.",
        },
        {
        	"trigger": "tyranny",
        	"contents": "tyranny = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required tyranny?",
        },
        {
        	"trigger": "vassal_contract_has_flag",
        	"contents": "vassal_contract_has_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Do any of the current active obligations in the scoped character's vassal contract have the given flag?",
        },
        {
        	"trigger": "vassal_contract_has_modifiable_obligations",
        	"contents": "vassal_contract_has_modifiable_obligations = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the scoped character's contract be modified at all?",
        },
        {
        	"trigger": "vassal_contract_is_blocked_from_modification",
        	"contents": "vassal_contract_is_blocked_from_modification = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Has the scoped character's contract been blocked from modification?",
        },
        {
        	"trigger": "vassal_contract_obligation_level",
        	"contents": "vassal_contract_obligation_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The level of the provided contract type in the scoped character's current vassal contract.",
        },
        {
        	"trigger": "vassal_contract_obligation_level_can_be_decreased",
        	"contents": "vassal_contract_obligation_level_can_be_decreased = ${1:<obligation_level>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the obligation level of the scoped character's vassal contract be decreased?",
        },
        {
        	"trigger": "vassal_contract_obligation_level_can_be_increased",
        	"contents": "vassal_contract_obligation_level_can_be_increased = ${1:<obligation_level>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Can the obligation level of the scoped character's vassal contract be increased?",
        },
        {
        	"trigger": "vassal_contract_obligation_level_score",
        	"contents": "vassal_contract_obligation_level_score = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "The score in favour of the vassal for the provided contract type in the scoped character's current vassal contract.",
        },
        {
        	"trigger": "vassal_count",
        	"contents": "vassal_count = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's number of vassals (excluding barons) this high?",
        },
        {
        	"trigger": "vassal_limit",
        	"contents": "vassal_limit = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's vassal limit this big?",
        },
        {
        	"trigger": "vassal_limit_available",
        	"contents": "vassal_limit_available = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is there this much space left in the character's vassal limit? (Negative above limit)",
        },
        {
        	"trigger": "vassal_limit_percentage",
        	"contents": "vassal_limit_percentage = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's vassal count this big in comparison to their limit?",
        },
        {
        	"trigger": "war_chest_gold",
        	"contents": "war_chest_gold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Does the character have the required gold? (AI category 'war chest')",
        },
        {
        	"trigger": "war_chest_gold_maximum",
        	"contents": "war_chest_gold_maximum = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How big is the 'war chest' budget is supposed to get?",
        },
        {
        	"trigger": "was_hostage_child",
        	"contents": "was_hostage_child = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Was the scoped character a Hostage as a Child?",
        },
        {
        	"trigger": "year_of_birth",
        	"contents": "year_of_birth = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Get character year_of_birth.",
        },
        {
        	"trigger": "yearly_character_balance",
        	"contents": "yearly_character_balance = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's yearly balance this big?",
        },
        {
        	"trigger": "yearly_character_expenses",
        	"contents": "yearly_character_expenses = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's yearly expenses this big?",
        },
        {
        	"trigger": "yearly_character_income",
        	"contents": "yearly_character_income = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Is the scoped character's yearly income this big?",
        },
        {
        	"trigger": "years_as_diarch",
        	"contents": "years_as_diarch = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many whole years has the character been an active diarch?",
        },
        {
        	"trigger": "years_as_ruler",
        	"contents": "years_as_ruler = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Number of years this character has been a ruler, returns -1 if character isn't a ruler.",
        },
        {
        	"trigger": "years_in_diarchy",
        	"contents": "years_in_diarchy = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "How many whole years has liege spent in a diarchy?",
        },
        {
        	"trigger": "yields_alliance",
        	"contents": "yields_alliance = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Character"],
        	"details": "Checks if the character would get an alliance with the target character through such a marriage.",
        },
        {
        	"trigger": "num_total_troops",
        	"contents": "num_total_troops = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat"],
        	"details": "Number of total troops on boths sides.",
        },
        {
        	"trigger": "warscore_value",
        	"contents": "warscore_value = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat"],
        	"details": "Warscore value.",
        },
        {
        	"trigger": "active_de_jure_drift_progress",
        	"contents": "active_de_jure_drift_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "",
        },
        {
        	"trigger": "can_be_leased_out",
        	"contents": "can_be_leased_out = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Can the scoped title be leased out?",
        },
        {
        	"trigger": "can_title_create_faction",
        	"contents": "can_title_create_faction = {\n\ttype = ${1:<faction>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Can the title create the faction of the specified type against the specified character?",
        },
        {
        	"trigger": "can_title_join_faction",
        	"contents": "can_title_join_faction = ${1:<faction>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Can the scope title join the faction?",
        },
        {
        	"trigger": "county_control",
        	"contents": "county_control = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the county title have the required county countrol?",
        },
        {
        	"trigger": "county_control_rate",
        	"contents": "county_control_rate = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "How much county control is the county gaining each month?",
        },
        {
        	"trigger": "county_control_rate_modifier",
        	"contents": "county_control_rate_modifier = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "What's the multiplier to the control gain rate?",
        },
        {
        	"trigger": "county_holder_opinion",
        	"contents": "county_holder_opinion = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Compares the county's opinion of its holder.",
        },
        {
        	"trigger": "county_opinion",
        	"contents": "county_opinion = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Compares the county's opinion of the current count.",
        },
        {
        	"trigger": "county_opinion_target",
        	"contents": "county_opinion_target = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Compares the county's opinion of the target character to the specified value?",
        },
        {
        	"trigger": "county_opinion_target",
        	"contents": "county_opinion_target = {\n\ttarget = ${1:<drift_target_title>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Compare drift progress towards target with value?",
        },
        {
        	"trigger": "de_jure_drifting_towards",
        	"contents": "de_jure_drifting_towards = ${1:<drift_target_title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scoped landed title de jure drifts toward another title?",
        },
        {
        	"trigger": "development_level",
        	"contents": "development_level = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the county title have the required county development level?",
        },
        {
        	"trigger": "development_rate",
        	"contents": "development_rate = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "How much development progress is the county gaining each month?",
        },
        {
        	"trigger": "development_rate_modifier",
        	"contents": "development_rate_modifier = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "What's the multiplier to the development progress?",
        },
        {
        	"trigger": "development_towards_level_increase",
        	"contents": "development_towards_level_increase = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the county title have the required progress towards the next level of development?",
        },
        {
        	"trigger": "has_character_nominiated",
        	"contents": "has_character_nominiated = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Has the target character nominated a successor for the scoped title?",
        },
        {
        	"trigger": "has_disabled_building",
        	"contents": "has_disabled_building = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope landed title connected to a holding that contains at least one disabled building?",
        },
        {
        	"trigger": "has_holy_site_flag",
        	"contents": "has_holy_site_flag = ${1:<flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the barony have a holy site with the given flag?",
        },
        {
        	"trigger": "has_order_of_succession",
        	"contents": "has_order_of_succession = ${1:<succession>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the scoped title have a given order of succession?",
        },
        {
        	"trigger": "has_revokable_lease",
        	"contents": "has_revokable_lease = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the title under a lease that can be revoked manually?",
        },
        {
        	"trigger": "has_title_law",
        	"contents": "has_title_law = ${1:<title_law>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the scoped title have the given title-specifc-law?",
        },
        {
        	"trigger": "has_title_law_flag",
        	"contents": "has_title_law_flag = ${1:<title_law_flag>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the scoped title have a title-specific law with the given flag?",
        },
        {
        	"trigger": "has_user_set_coa",
        	"contents": "has_user_set_coa = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Has the user set a specific coat of arms for this title?",
        },
        {
        	"trigger": "has_wrong_holding_type",
        	"contents": "has_wrong_holding_type = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope landed title connected to a holding that cannot be governed by the current lessee or holder?",
        },
        {
        	"trigger": "is_capital_barony",
        	"contents": "is_capital_barony = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is title in the scope a capital barony?",
        },
        {
        	"trigger": "is_coastal_county",
        	"contents": "is_coastal_county = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the county coastal?",
        },
        {
        	"trigger": "is_connected_to",
        	"contents": "is_connected_to = {\n\ttarget = ${1:<title>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the county connected to the other county?",
        },
        {
        	"trigger": "is_connected_to (all values)",
        	"contents": "is_connected_to = {\n\tmax_naval_distance = ${1:<value>}\n\tallow_one_county_land_gap = ${2:<yes/no>}\n\ttarget = ${3:<title>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the county connected to the other county?",
        },
        {
        	"trigger": "is_contested",
        	"contents": "is_contested = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope landed title contested in any war?",
        },
        {
        	"trigger": "is_de_facto_liege_or_above_target",
        	"contents": "is_de_facto_liege_or_above_target = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the title de facto liege or above the target title?",
        },
        {
        	"trigger": "is_de_jure_liege_or_above_target",
        	"contents": "is_de_jure_liege_or_above_target = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the title de jure liege or above the target title?",
        },
        {
        	"trigger": "is_head_of_faith",
        	"contents": "is_head_of_faith = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is this title a head of faith title?",
        },
        {
        	"trigger": "is_holy_order",
        	"contents": "is_holy_order = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope landed title a holy order?",
        },
        {
        	"trigger": "is_holy_site",
        	"contents": "is_holy_site = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the barony a holy site of any faith?",
        },
        {
        	"trigger": "is_holy_site_controlled_by",
        	"contents": "is_holy_site_controlled_by = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the target character control a holy site of the scoped object?",
        },
        {
        	"trigger": "is_holy_site_of",
        	"contents": "is_holy_site_of = ${1:<faith>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the barony a holy site of the given faith?",
        },
        {
        	"trigger": "is_landless_type_title",
        	"contents": "is_landless_type_title = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is this title considered a landless type title?",
        },
        {
        	"trigger": "is_leased_out",
        	"contents": "is_leased_out = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scoped title leased out?",
        },
        {
        	"trigger": "is_mercenary_company",
        	"contents": "is_mercenary_company = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope landed title a mercenary company?",
        },
        {
        	"trigger": "is_neighbor_to_realm",
        	"contents": "is_neighbor_to_realm = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is this landed title adjacent to the character's realm?",
        },
        {
        	"trigger": "is_riverside_county",
        	"contents": "is_riverside_county = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the county riverside?",
        },
        {
        	"trigger": "is_target_of_council_task",
        	"contents": "is_target_of_council_task = ${1:<council_task>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the county currently affected by the specified council task?",
        },
        {
        	"trigger": "is_title_created",
        	"contents": "is_title_created = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is title in the scope created?",
        },
        {
        	"trigger": "is_titular",
        	"contents": "is_titular = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is this title titular?",
        },
        {
        	"trigger": "is_under_holy_order_lease",
        	"contents": "is_under_holy_order_lease = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scoped title leased out to any holy order?",
        },
        {
        	"trigger": "place_in_line_of_succession",
        	"contents": "place_in_line_of_succession = {\n\ttarget = ${1:<character>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "What place in line of succession does the character hold?",
        },
        {
        	"trigger": "recent_history",
        	"contents": "recent_history = {\n\ttype = ${1:<history_type>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Does the scope title have a history entry of the specified type in recent history?",
        },
        {
        	"trigger": "target_is_de_facto_liege_or_above",
        	"contents": "target_is_de_facto_liege_or_above = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the target title de facto liege or above?",
        },
        {
        	"trigger": "target_is_de_jure_liege_or_above",
        	"contents": "target_is_de_jure_liege_or_above = ${1:<title>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the target title de jure liege or above?",
        },
        {
        	"trigger": "tier",
        	"contents": "tier = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "What tier is the scoped title?",
        },
        {
        	"trigger": "title_create_faction_type_chance",
        	"contents": "title_create_faction_type_chance = {\n\ttype = ${1:<faction_type>}\n\ttarget = ${2:<character>}\n\tvalue = ${3:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Check if chance to create a faction against a target of the scope landed title is true against the scripted value.",
        },
        {
        	"trigger": "title_held_years",
        	"contents": "title_held_years = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Returns the number of years a title is held if valid (otherwise returns 0).",
        },
        {
        	"trigger": "title_is_a_faction_member",
        	"contents": "title_is_a_faction_member = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Is the scope title a member of a faction?",
        },
        {
        	"trigger": "title_join_faction_chance",
        	"contents": "title_join_faction_chance = {\n\tfaction = ${1:<faction_target>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Check if the chance of the scope landed title to join the faction against the scripted value.",
        },
        {
        	"trigger": "title_will_leave_sub_realm_on_succession",
        	"contents": "title_will_leave_sub_realm_on_succession = ${1:<character>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title"],
        	"details": "Will the title leave the sub-realm of the character on the RHS upon succession?",
        },
        {
        	"trigger": "average_faction_opinion",
        	"contents": "average_faction_opinion = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Average opinion of all the characters of the faction scope target.",
        },
        {
        	"trigger": "average_faction_opinion_not_powerful_vassal",
        	"contents": "average_faction_opinion_not_powerful_vassal = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Average opinion of the character that are NOT powerful vassals of the faction scope target.",
        },
        {
        	"trigger": "average_faction_opinion_powerful_vassal",
        	"contents": "average_faction_opinion_powerful_vassal = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Average opinion of the character that are powerful vassals of the faction scope target.",
        },
        {
        	"trigger": "discontent_per_month",
        	"contents": "discontent_per_month = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "How much is the Faction's Discontent increasing each month?",
        },
        {
        	"trigger": "faction_can_press_demands",
        	"contents": "faction_can_press_demands = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Can the scope faction press demands?",
        },
        {
        	"trigger": "faction_discontent",
        	"contents": "faction_discontent = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Current discontent of the faction.",
        },
        {
        	"trigger": "faction_is_at_war",
        	"contents": "faction_is_at_war = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Is the scope faction at war?",
        },
        {
        	"trigger": "faction_is_type",
        	"contents": "faction_is_type = ${1:<faction_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Is the faction of this type?",
        },
        {
        	"trigger": "faction_power",
        	"contents": "faction_power = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Current power of the faction.",
        },
        {
        	"trigger": "faction_power_threshold",
        	"contents": "faction_power_threshold = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Current power threshold of the faction.",
        },
        {
        	"trigger": "has_special_character",
        	"contents": "has_special_character = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Has the faction a special character assigned?",
        },
        {
        	"trigger": "has_special_title",
        	"contents": "has_special_title = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Has the faction a special title assigned?",
        },
        {
        	"trigger": "months_until_max_discontent",
        	"contents": "months_until_max_discontent = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "How many months until Discontent is max (100)?",
        },
        {
        	"trigger": "number_of_faction_members_in_council",
        	"contents": "number_of_faction_members_in_council = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Faction"],
        	"details": "Current number of faction members in faction.",
        },
        {
        	"trigger": "building_levies",
        	"contents": "building_levies = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title/Province"],
        	"details": "The amount of levies in a county or province from buildings.",
        },
        {
        	"trigger": "building_max_garrison",
        	"contents": "building_max_garrison = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title/Province"],
        	"details": "The max amount of garrison in a county or province from buildings.",
        },
        {
        	"trigger": "squared_distance",
        	"contents": "squared_distance = {\n\ttarget = ${1:<province/barony/county>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Title/Province"],
        	"details": "How far away is the province/barony/county from the target?",
        },
        {
        	"trigger": "has_maa_of_type",
        	"contents": "has_maa_of_type = ${1:<regiment_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Does this combat side have at least one MaA of the given regiment type?",
        },
        {
        	"trigger": "is_combat_side_attacker",
        	"contents": "is_combat_side_attacker = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Whether the combat side was the attacker or not.",
        },
        {
        	"trigger": "is_combat_side_pursuing",
        	"contents": "is_combat_side_pursuing = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Is this side the winner of the combat.",
        },
        {
        	"trigger": "is_combat_side_pursuing",
        	"contents": "is_combat_side_pursuing = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Is this side the winner of the combat.",
        },
        {
        	"trigger": "is_combat_side_retreating",
        	"contents": "is_combat_side_retreating = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Is this side defeated in the combat.",
        },
        {
        	"trigger": "num_enemies_killed",
        	"contents": "num_enemies_killed = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Number of troops killed on the opposite side.",
        },
        {
        	"trigger": "percent_enemies_killed",
        	"contents": "percent_enemies_killed = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Percantage of enemies killed out of total number of enemy soldiers.",
        },
        {
        	"trigger": "side_army_size",
        	"contents": "side_army_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "What is the current size of all armies combined on this combat side?",
        },
        {
        	"trigger": "side_max_army_size",
        	"contents": "side_max_army_size = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "What is the max possible size of all armies combined on this combat side?",
        },
        {
        	"trigger": "side_soldiers",
        	"contents": "side_soldiers = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "How many soldiers does this side have still fighting?",
        },
        {
        	"trigger": "side_strength",
        	"contents": "side_strength = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "How strong is this side? (Scaled down by a factor of 1000)",
        },
        {
        	"trigger": "troops_ratio",
        	"contents": "troops_ratio = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Combat Side"],
        	"details": "Side's troops/opposide side's troops.",
        },
        {
        	"trigger": "base_inspiration_gold_cost",
        	"contents": "base_inspiration_gold_cost = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Gets the base gold cost of the scoped inspiration.",
        },
        {
        	"trigger": "days_since_creation",
        	"contents": "days_since_creation = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Gets the days since creation of the scoped inspiration.",
        },
        {
        	"trigger": "days_since_sponsorship",
        	"contents": "days_since_sponsorship = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Gets the days since sponsorship started of the scoped inspiration.",
        },
        {
        	"trigger": "has_inspiration_type",
        	"contents": "has_inspiration_type = ${1:<inspiration_type>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Checks if the scoped inspiration has the given inspiration database type.",
        },
        {
        	"trigger": "inspiration_gold_invested",
        	"contents": "inspiration_gold_invested = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Gets the amount of gold invested in the scoped inspiration.",
        },
        {
        	"trigger": "inspiration_progress",
        	"contents": "inspiration_progress = ${1:<script_value>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "Inspiration"],
        	"details": "Gets the progress of the scoped inspiration.",
        },
   ]
}
