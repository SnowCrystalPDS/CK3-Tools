{
   "scope": "text.pdx",

   "completions":
   [
        {
        	"trigger": "dynast",
        	"contents": "dynast",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Dynasty -> Character"],
        	"details": "Get dynasty head of scoped dynasty.",
        },
        {
        	"trigger": "activity_host",
        	"contents": "activity_host",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Activity -> Character"],
        	"details": "Get host character of the scoped activity.",
        },
        {
        	"trigger": "activity_location",
        	"contents": "activity_location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Activity -> Province"],
        	"details": "Get current location of the scoped activity.",
        },
        {
        	"trigger": "activity_type",
        	"contents": "activity_type",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Activity -> Activity Type"],
        	"details": "Get the type of a given activity.",
        },
        {
        	"trigger": "calc_culture_dominant_faith",
        	"contents": "calc_culture_dominant_faith",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Culture -> Faith"],
        	"details": "Calculates what faith is the biggest in the culture based on # of counties.",
        },
        {
        	"trigger": "calc_culture_dominant_religion",
        	"contents": "calc_culture_dominant_religion",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Culture -> Religion"],
        	"details": "Calculates what religion is the biggest in the culture based on # of counties.",
        },
        {
        	"trigger": "culture_head",
        	"contents": "culture_head",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Culture -> Character"],
        	"details": "Get culture head of scoped culture.",
        },
        {
        	"trigger": "memory_owner",
        	"contents": "memory_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Memory -> Character"],
        	"details": "Get the owner of a character memory.",
        },
        {
        	"trigger": "memory_participant",
        	"contents": "memory_participant",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Memory -> Character"],
        	"details": "Get the participant of a given tag from a memory.",
        },
        {
        	"trigger": "house_founder",
        	"contents": "house_founder",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "House -> Character"],
        	"details": "Get house founder of the scoped house.",
        },
        {
        	"trigger": "house_head",
        	"contents": "house_head",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "House -> Character"],
        	"details": "Get house head of the scoped character.",
        },
        {
        	"trigger": "last_house_head",
        	"contents": "last_house_head",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "House -> Character"],
        	"details": "Get last house head of scoped house.",
        },
        {
        	"trigger": "faith",
        	"contents": "faith",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character/Title/Province/GHW -> Faith"],
        	"details": "Get faith of scope.",
        },
        {
        	"trigger": "councillor",
        	"contents": "councillor",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Council Task -> Character"],
        	"details": "Scope to the councillor in a council task.",
        },
        {
        	"trigger": "secret_owner",
        	"contents": "secret_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Secret -> Character"],
        	"details": "Get owner of scoped secret.",
        },
        {
        	"trigger": "secret_target",
        	"contents": "secret_target",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Secret -> Character"],
        	"details": "Get target character of scoped secret.",
        },
        {
        	"trigger": "army_commander",
        	"contents": "army_commander",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Army -> Character"],
        	"details": "Get commander of scoped army.",
        },
        {
        	"trigger": "current_location",
        	"contents": "current_location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Province"],
        	"details": "Get the current province of the travel plan.",
        },
        {
        	"trigger": "departure_location",
        	"contents": "departure_location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Province"],
        	"details": "Get the province from which this travel plan started.",
        },
        {
        	"trigger": "final_destination_province",
        	"contents": "final_destination_province",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Province"],
        	"details": "Get the final destination province of the travel plan.",
        },
        {
        	"trigger": "next_destination_province",
        	"contents": "next_destination_province",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Province"],
        	"details": "Get the next destination province of the travel plan.",
        },
        {
        	"trigger": "next_location",
        	"contents": "next_location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Province"],
        	"details": "Get the next province the travel plan is going to.",
        },
        {
        	"trigger": "travel_leader",
        	"contents": "travel_leader",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Character"],
        	"details": "Get the Travel Leader of the scoped travel plan.",
        },
        {
        	"trigger": "travel_plan_activity",
        	"contents": "travel_plan_activity",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Activity"],
        	"details": "Activity associated with the scoped travel plan.",
        },
        {
        	"trigger": "travel_plan_owner",
        	"contents": "travel_plan_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Travel Plan -> Character"],
        	"details": "Get the owner of the scoped travel plan.",
        },
        {
        	"trigger": "founder",
        	"contents": "founder",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faith -> Character"],
        	"details": "Get founder of scoped faith.",
        },
        {
        	"trigger": "great_holy_war",
        	"contents": "great_holy_war",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faith -> GHW"],
        	"details": "Get GHW of scoped faith.",
        },
        {
        	"trigger": "religious_head",
        	"contents": "religious_head",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faith -> Character"],
        	"details": "Get religious head of scoped faith.",
        },
        {
        	"trigger": "religious_head_title",
        	"contents": "religious_head_title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faith -> Title"],
        	"details": "Get landed title belonging to the religious head.",
        },
        {
        	"trigger": "location",
        	"contents": "location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character/Combat/Army -> Province"],
        	"details": "Get province of scope.",
        },
        {
        	"trigger": "ghw_designated_winner",
        	"contents": "ghw_designated_winner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> Character"],
        	"details": "Get designated winner of scoped GHW.",
        },
        {
        	"trigger": "ghw_target_character",
        	"contents": "ghw_target_character",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> Character"],
        	"details": "Get target character of scoped GHW.",
        },
        {
        	"trigger": "ghw_target_title",
        	"contents": "ghw_target_title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> Title"],
        	"details": "Get target landed title of scoped GHW.",
        },
        {
        	"trigger": "ghw_title_recipient",
        	"contents": "ghw_title_recipient",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> Character"],
        	"details": "Get the title recipient of scoped GHW.",
        },
        {
        	"trigger": "ghw_war",
        	"contents": "ghw_war",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> War"],
        	"details": "Get GHW from scoped war.",
        },
        {
        	"trigger": "ghw_war_declarer",
        	"contents": "ghw_war_declarer",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "GHW -> Character"],
        	"details": "Get declarer of scoped GHW.",
        },
        {
        	"trigger": "religion",
        	"contents": "religion",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character/Title/Province/Faith/GHW -> Religion"],
        	"details": "Get religion of scope.",
        },
        {
        	"trigger": "vassal_contract_type",
        	"contents": "vassal_contract_type",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Vassal Contract Obligation Level -> Vassal Contract"],
        	"details": "Get the type of vassal contract.",
        },
        {
        	"trigger": "war",
        	"contents": "war",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Casus Belli -> War"],
        	"details": "Get war of scoped casus belli.",
        },
        {
        	"trigger": "claimant",
        	"contents": "claimant",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Casus Belli/War -> Character"],
        	"details": "Get claimant of scope.",
        },
        {
        	"trigger": "primary_attacker",
        	"contents": "primary_attacker",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Casus Belli/War -> Character"],
        	"details": "Get primary attacker of scope.",
        },
        {
        	"trigger": "primary_defender",
        	"contents": "primary_defender",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Casus Belli/War -> Character"],
        	"details": "Get primary defender of scope.",
        },
        {
        	"trigger": "artifact_age",
        	"contents": "artifact_age",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Value"],
        	"details": "Get age of scoped artifact.",
        },
        {
        	"trigger": "artifact_owner",
        	"contents": "artifact_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Character"],
        	"details": "Get owner of scoped artifact.",
        },
        {
        	"trigger": "creator",
        	"contents": "creator",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Character"],
        	"details": "Get creator of scoped artifact.",
        },
        {
        	"trigger": "previous_owner",
        	"contents": "previous_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Character"],
        	"details": "Get the previous owner of the scoped activity.",
        },
        {
        	"trigger": "previous_owner_level_2",
        	"contents": "previous_owner_level_2",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Character"],
        	"details": "Get the 2 previous owner of the scoped activity.",
        },
        {
        	"trigger": "previous_owner_level_3",
        	"contents": "previous_owner_level_3",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Artifact -> Character"],
        	"details": "Get the 3 previous owner of the scoped activity.",
        },
        {
        	"trigger": "mercenary_company_leader",
        	"contents": "mercenary_company_leader",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Mercenary Company -> Character"],
        	"details": "Get leader of scoped mercenary company.",
        },
        {
        	"trigger": "dummy_female",
        	"contents": "dummy_female",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "All -> Character"],
        	"details": "Global link to the dummy female character.",
        },
        {
        	"trigger": "dummy_male",
        	"contents": "dummy_male",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "All -> Character"],
        	"details": "Global link to the dummy male character.",
        },
        {
        	"trigger": "no",
        	"contents": "no",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Boolean"],
        	"details": "Boolean literal for false values.",
        },
        {
        	"trigger": "prev",
        	"contents": "prev",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "All"],
        	"details": "The previous scope.",
        },
        {
        	"trigger": "root",
        	"contents": "root",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "All"],
        	"details": "The head of the current top scope.",
        },
        {
        	"trigger": "this",
        	"contents": "this",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "All"],
        	"details": "The current scope.",
        },
        {
        	"trigger": "yes",
        	"contents": "yes",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Boolean"],
        	"details": "Boolean literal for true values.",
        },
        {
        	"trigger": "province_owner",
        	"contents": "province_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Province -> Character"],
        	"details": "Get province owner of scoped province.",
        },
        {
        	"trigger": "casus_belli",
        	"contents": "casus_belli",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "War -> Casus Belli"],
        	"details": "Get casus belli of scoped war.",
        },
        {
        	"trigger": "holy_order_patron",
        	"contents": "holy_order_patron",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Holy Order -> Character"],
        	"details": "Get patron of scoped holy order.",
        },
        {
        	"trigger": "leader",
        	"contents": "leader",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Holy Order -> Character"],
        	"details": "Get leader of scoped holy order.",
        },
        {
        	"trigger": "title",
        	"contents": "title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Holy Order -> Title"],
        	"details": "Get landed title of scoped holy order.",
        },
        {
        	"trigger": "acclaimed_knight",
        	"contents": "acclaimed_knight",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Character"],
        	"details": "Get the Acclaimed Knight of given Accolade.",
        },
        {
        	"trigger": "accolade_owner",
        	"contents": "accolade_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Character"],
        	"details": "Get the Owner of given Accolade.",
        },
        {
        	"trigger": "accolade_successor",
        	"contents": "accolade_successor",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Character"],
        	"details": "Get the Successor of given Accolade.",
        },
        {
        	"trigger": "founder_culture",
        	"contents": "founder_culture",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Culture"],
        	"details": "Get the founder Culture of given Accolade.",
        },
        {
        	"trigger": "founder_dynasty",
        	"contents": "founder_dynasty",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Dynasty"],
        	"details": "Get the founder Dynasty of given Accolade.",
        },
        {
        	"trigger": "founder_faith",
        	"contents": "founder_faith",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Faith"],
        	"details": "Get the founder Faith of given Accolade.",
        },
        {
        	"trigger": "founder_house",
        	"contents": "founder_house",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> House"],
        	"details": "Get the founder House of given Accolade.",
        },
        {
        	"trigger": "primary_type",
        	"contents": "primary_type",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Accolade Type"],
        	"details": "Get the primary Accolade Type of given Accolade.",
        },
        {
        	"trigger": "secondary_type",
        	"contents": "secondary_type",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Accolade -> Accolade Type"],
        	"details": "Get the secondary Accolade Type of given Accolade.",
        },
        {
        	"trigger": "scheme_artifact",
        	"contents": "scheme_artifact",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Scheme -> Artifact"],
        	"details": "Get artifact of scoped scheme.",
        },
        {
        	"trigger": "scheme_owner",
        	"contents": "scheme_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Scheme -> Character"],
        	"details": "Get owner of scoped scheme.",
        },
        {
        	"trigger": "scheme_target",
        	"contents": "scheme_target",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Scheme -> Character"],
        	"details": "Get target character of scoped scheme.",
        },
        {
        	"trigger": "story_owner",
        	"contents": "story_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Story -> Character"],
        	"details": "Get owner of scoped story.",
        },
        {
        	"trigger": "accolade",
        	"contents": "accolade",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Accolade"],
        	"details": "Get the Accolade of which this character is the Acclaimed Knight.",
        },
        {
        	"trigger": "betrothed",
        	"contents": "betrothed",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the betrothed of the scoped character.",
        },
        {
        	"trigger": "capital_barony",
        	"contents": "capital_barony",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Title"],
        	"details": "Get capital barony title (realm capital) of scoped character.",
        },
        {
        	"trigger": "capital_county",
        	"contents": "capital_county",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Title"],
        	"details": "Get de jure liege title of the capital county (realm capital) of the scoped character.",
        },
        {
        	"trigger": "capital_province",
        	"contents": "capital_province",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Province"],
        	"details": "Get capital province of scoped character.",
        },
        {
        	"trigger": "commanding_army",
        	"contents": "commanding_army",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Army"],
        	"details": "Get commanding army of scoped character.",
        },
        {
        	"trigger": "concubinist",
        	"contents": "concubinist",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get concubinist of the scoped character.",
        },
        {
        	"trigger": "council_task",
        	"contents": "council_task",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Council Task"],
        	"details": "Scope to the active task of the scoped councillor.",
        },
        {
        	"trigger": "council_task",
        	"contents": "council_task",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Council Task"],
        	"details": "Scope to the active task of the scoped councillor.",
        },
        {
        	"trigger": "councillor_task_target",
        	"contents": "councillor_task_target",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Province"],
        	"details": "Scope to the active task target of the scoped councillor.",
        },
        {
        	"trigger": "court_owner",
        	"contents": "court_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the court owner of the scoped character.",
        },
        {
        	"trigger": "current_travel_plan",
        	"contents": "current_travel_plan",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Travel Plan"],
        	"details": "Get the character's current travel plan.",
        },
        {
        	"trigger": "default_location",
        	"contents": "default_location",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Province"],
        	"details": "Get the province which the 'default' location a character should be at when not traveling.",
        },
        {
        	"trigger": "designated_diarch",
        	"contents": "designated_diarch",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the designated diarch of a ruler.",
        },
        {
        	"trigger": "designated_heir",
        	"contents": "designated_heir",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get designated heir of scoped character.",
        },
        {
        	"trigger": "diarch",
        	"contents": "diarch",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the active diarch of a ruler.",
        },
        {
        	"trigger": "diarchy_successor",
        	"contents": "diarchy_successor",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the next character in the diarchy line of successon.",
        },
        {
        	"trigger": "dynasty",
        	"contents": "dynasty",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Dynasty"],
        	"details": "Get dynasty of scoped character.",
        },
        {
        	"trigger": "employer",
        	"contents": "employer",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get employer of scoped character.",
        },
        {
        	"trigger": "father",
        	"contents": "father",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get father of the scoped character.",
        },
        {
        	"trigger": "ghw_beneficiary",
        	"contents": "ghw_beneficiary",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get great holy war beneficiary of scoped character.",
        },
        {
        	"trigger": "home_court",
        	"contents": "home_court",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the home court owner of the scoped hostage.",
        },
        {
        	"trigger": "host",
        	"contents": "host",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get current host of the scoped character.",
        },
        {
        	"trigger": "house",
        	"contents": "house",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> House"],
        	"details": "Get house of the scoped character.",
        },
        {
        	"trigger": "imprisoner",
        	"contents": "imprisoner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get imprisoner of scoped character.",
        },
        {
        	"trigger": "inspiration",
        	"contents": "inspiration",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Inspiration"],
        	"details": "Get the current inspiration of the scoped character.",
        },
        {
        	"trigger": "intent_target",
        	"contents": "intent_target",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the intent target of scoped character.",
        },
        {
        	"trigger": "involved_activity",
        	"contents": "involved_activity",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Activity"],
        	"details": "Get involved activity of scoped character.",
        },
        {
        	"trigger": "joined_faction",
        	"contents": "joined_faction",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Faction"],
        	"details": "Get joined faction of scoped character.",
        },
        {
        	"trigger": "killer",
        	"contents": "killer",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the scoped characters killer.",
        },
        {
        	"trigger": "knight_army",
        	"contents": "knight_army",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Army"],
        	"details": "Get knight army of scoped character.",
        },
        {
        	"trigger": "last_played_character",
        	"contents": "last_played_character",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get last played character of the currently scoped player character.",
        },
        {
        	"trigger": "liege",
        	"contents": "liege",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the liege of the scoped character.",
        },
        {
        	"trigger": "liege_or_court_owner",
        	"contents": "liege_or_court_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the liege of the scoped character, if non then get court owner.",
        },
        {
        	"trigger": "matchmaker",
        	"contents": "matchmaker",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get matchmaker of the scoped character.",
        },
        {
        	"trigger": "mother",
        	"contents": "mother",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get mother of the scoped character.",
        },
        {
        	"trigger": "player_heir",
        	"contents": "player_heir",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get player heir of scoped character.",
        },
        {
        	"trigger": "pregnancy_assumed_father",
        	"contents": "pregnancy_assumed_father",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the assumed father of the scoped characters unborn baby.",
        },
        {
        	"trigger": "pregnancy_real_father",
        	"contents": "pregnancy_real_father",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the real father of the scoped characters unborn baby.",
        },
        {
        	"trigger": "primary_heir",
        	"contents": "primary_heir",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get primary heir of scoped character.",
        },
        {
        	"trigger": "primary_partner",
        	"contents": "primary_partner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the primary partner (consort) of the scoped character.",
        },
        {
        	"trigger": "primary_spouse",
        	"contents": "primary_spouse",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the primary spouse of the scoped character.",
        },
        {
        	"trigger": "primary_title",
        	"contents": "primary_title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Title"],
        	"details": "Get primary title of scoped character.",
        },
        {
        	"trigger": "real_father",
        	"contents": "real_father",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the real father of the scoped character.",
        },
        {
        	"trigger": "real_mother",
        	"contents": "real_mother",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the real mother of the scoped character.",
        },
        {
        	"trigger": "realm_priest",
        	"contents": "realm_priest",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get realm priest of scoped character.",
        },
        {
        	"trigger": "top_liege",
        	"contents": "top_liege",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the top liege of the scoped character.",
        },
        {
        	"trigger": "warden",
        	"contents": "warden",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character -> Character"],
        	"details": "Get the warden of the scoped hostage.",
        },
        {
        	"trigger": "combat_attacker",
        	"contents": "combat_attacker",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat -> Combat Side"],
        	"details": "Get attacker side of scoped combat.",
        },
        {
        	"trigger": "combat_defender",
        	"contents": "combat_defender",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat -> Combat Side"],
        	"details": "Get defender side of scoped combat.",
        },
        {
        	"trigger": "combat_war",
        	"contents": "combat_war",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat -> War"],
        	"details": "Get war of scoped combat.",
        },
        {
        	"trigger": "capital_vassal",
        	"contents": "capital_vassal",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Title"],
        	"details": "Get capital vassal title of scoped title.",
        },
        {
        	"trigger": "current_heir",
        	"contents": "current_heir",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Character"],
        	"details": "Get current heir to scoped title.",
        },
        {
        	"trigger": "de_facto_liege",
        	"contents": "de_facto_liege",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Title"],
        	"details": "Get de facto liege title of scoped title.",
        },
        {
        	"trigger": "de_jure_liege",
        	"contents": "de_jure_liege",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Title"],
        	"details": "Get de jure liege title of scoped title.",
        },
        {
        	"trigger": "holder",
        	"contents": "holder",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Character"],
        	"details": "Get holder of scoped title.",
        },
        {
        	"trigger": "lessee",
        	"contents": "lessee",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Character"],
        	"details": "Get current lessee of scoped title.",
        },
        {
        	"trigger": "lessee_title",
        	"contents": "lessee_title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Title"],
        	"details": "Get lessee title of scoped landed title.",
        },
        {
        	"trigger": "previous_holder",
        	"contents": "previous_holder",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Character"],
        	"details": "Get previous holder of scoped landed title.",
        },
        {
        	"trigger": "title_capital_county",
        	"contents": "title_capital_county",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Title"],
        	"details": "Get preferred capital county of scoped title.",
        },
        {
        	"trigger": "title_province",
        	"contents": "title_province",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title -> Province"],
        	"details": "Get province of scoped landed title.",
        },
        {
        	"trigger": "faction_leader",
        	"contents": "faction_leader",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faction -> Character"],
        	"details": "Get leader of scoped faction.",
        },
        {
        	"trigger": "faction_target",
        	"contents": "faction_target",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faction -> Character"],
        	"details": "Get target character of scoped faction.",
        },
        {
        	"trigger": "faction_war",
        	"contents": "faction_war",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faction -> War"],
        	"details": "Get war of scoped faction.",
        },
        {
        	"trigger": "special_character",
        	"contents": "special_character",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faction -> Character"],
        	"details": "Get special character of scoped faction.",
        },
        {
        	"trigger": "special_title",
        	"contents": "special_title",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Faction -> Title"],
        	"details": "Get special landed title of scoped faction.",
        },
        {
        	"trigger": "barony",
        	"contents": "barony",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Title"],
        	"details": "Get de jure barony title of scope.",
        },
        {
        	"trigger": "barony_controller",
        	"contents": "barony_controller",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Character"],
        	"details": "Get barony controller of scope.",
        },
        {
        	"trigger": "county",
        	"contents": "county",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Title"],
        	"details": "Get de jure county title of scope.",
        },
        {
        	"trigger": "duchy",
        	"contents": "duchy",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Title"],
        	"details": "Get de jure duchy title of scope.",
        },
        {
        	"trigger": "empire",
        	"contents": "empire",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Title"],
        	"details": "Get de jure empire title of scope.",
        },
        {
        	"trigger": "kingdom",
        	"contents": "kingdom",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Title/Province -> Title"],
        	"details": "Get de jure kingdom title of scope.",
        },
        {
        	"trigger": "combat",
        	"contents": "combat",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat Side -> Combat"],
        	"details": "Get combat of scoped combat side.",
        },
        {
        	"trigger": "enemy_side",
        	"contents": "enemy_side",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat Side -> Combat Side"],
        	"details": "Get enemy (opposite) combat side of scoped side.",
        },
        {
        	"trigger": "side_commander",
        	"contents": "side_commander",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat Side -> Character"],
        	"details": "Get commander of scoped combat side.",
        },
        {
        	"trigger": "side_primary_participant",
        	"contents": "side_primary_participant",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Combat Side -> Character"],
        	"details": "Get primary participant of scoped combat side.",
        },
        {
        	"trigger": "inspiration_owner",
        	"contents": "inspiration_owner",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Inspiration -> Character"],
        	"details": "Get the character who owns the inspiration.",
        },
        {
        	"trigger": "inspiration_sponsor",
        	"contents": "inspiration_sponsor",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Inspiration -> Character"],
        	"details": "Get the character who is sponsoring the inspiration.",
        },
        {
        	"trigger": "culture",
        	"contents": "culture",
        	"annotation": "EventTarget",
        	"kind": ["markup", "S", "Character/Title/Province -> Culture"],
        	"details": "Get culture of scope.",
        },
   ]
}
