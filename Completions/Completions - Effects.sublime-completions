{
   "scope": "text.pdx",

   "completions":
   [
        {
        	"trigger": "add_dynasty_perk",
        	"contents": "add_dynasty_perk = ${1:<perk>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Dynasty"],
        	"details": "Adds dynasty perk.",
        },
        {
        	"trigger": "add_dynasty_prestige",
        	"contents": "add_dynasty_prestige = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Dynasty"],
        	"details": "Adds dynasty prestige.",
        },
        {
        	"trigger": "add_dynasty_prestige_level",
        	"contents": "add_dynasty_prestige_level = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Dynasty"],
        	"details": "Adds dynasty prestige levels.",
        },
        {
        	"trigger": "remove_dynasty_perk",
        	"contents": "remove_dynasty_perk = ${1:<perk>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Dynasty"],
        	"details": "Removes dynasty perk.",
        },
        {
        	"trigger": "set_dynasty_name",
        	"contents": "set_dynasty_name = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Dynasty"],
        	"details": "Sets dynasty name.",
        },
        {
        	"trigger": "add_activity_log_entry",
        	"contents": "add_activity_log_entry = {\n\tkey = ${1:<loc_key>}\n\tscore = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Add a new log entry to the scoped activity.",
        },
        {
        	"trigger": "add_activity_log_entry (all values)",
        	"contents": "add_activity_log_entry = {\n\tkey = ${1:<loc_key>}\n\tscore = ${2:<script_value>}\n\ttags = { }\n\tshow_in_conclusion = ${3:<yes/no>}\n\tcharacter = ${4:<character>}\n\ttarget = ${5:<character>}\n\tlocation = ${6:<province>}\n\tartifact = ${7:<artifact>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Add a new log entry to the scoped activity.",
        },
        {
        	"trigger": "add_to_current_phase_guest_subset",
        	"contents": "add_to_current_phase_guest_subset = {\n\tname = ${1:<subset_key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Adds the target character to the designated subset in the current phase.",
        },
        {
        	"trigger": "add_to_guest_subset",
        	"contents": "add_to_guest_subset = {\n\tname = ${1:<subset_key>}\n\ttarget = ${2:<character>}\n\tphase = ${3:<phase_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Adds the target character to the designated subset.",
        },
        {
        	"trigger": "progress_activity_phase_after",
        	"contents": "progress_activity_phase_after = {\n\t${1:<days/weeks/months>} = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Progress the current activity phase forward after X days.",
        },
        {
        	"trigger": "remove_from_current_phase_guest_subset",
        	"contents": "remove_from_current_phase_guest_subset = {\n\tname = ${1:<subset_key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Removes the target character from the designated subset in the current phase.",
        },
        {
        	"trigger": "remove_from_guest_subset",
        	"contents": "remove_from_guest_subset = {\n\tname = ${1:<subset_key>}\n\ttarget = ${2:<character>}\n\tphase = ${3:<phase_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Removes the target character from the designated subset.",
        },
        {
        	"trigger": "set_activity_host",
        	"contents": "set_activity_host = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "The host of the scoped activity is set to the target character.",
        },
        {
        	"trigger": "skip_activity_phase",
        	"contents": "skip_activity_phase = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Activity"],
        	"details": "Skip the current activity phase, either directly to the next phase, or to completion.",
        },
        {
        	"trigger": "add_culture_tradition",
        	"contents": "add_culture_tradition = ${1:<culture_tradition>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Adds the cultural tradition specified in the RHS to the scope.",
        },
        {
        	"trigger": "add_innovation",
        	"contents": "add_innovation = ${1:<innovation>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Add innovation to a culture.",
        },
        {
        	"trigger": "add_name_list",
        	"contents": "add_name_list = ${1:<name>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Adds the name list to the culture.",
        },
        {
        	"trigger": "add_random_innovation",
        	"contents": "add_random_innovation = ${1:<culturegroup_military/culture_group_civic/culture_group_regional/yes>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Add random available innovation.",
        },
        {
        	"trigger": "add_random_valid_tradition",
        	"contents": "add_random_valid_tradition = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Adds one random valid tradition to a culture. Target character provides context for can_pick and is_shown.",
        },
        {
        	"trigger": "add_random_valid_tradition_replace_if_necessary",
        	"contents": "add_random_valid_tradition_replace_if_necessary = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Adds one random valid tradition to a culture. Target character provides context for can_pick and is_shown.",
        },
        {
        	"trigger": "change_cultural_acceptance",
        	"contents": "change_cultural_acceptance = {\n\ttarget = ${1:<culture>}\n\tvalue = ${2:<script_value>}\n\tdesc = ${3:<loc_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Changes cultural acceptance with the target culture.",
        },
        {
        	"trigger": "clear_culture_traditions",
        	"contents": "clear_culture_traditions = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Removes all cultural traditions from the scope culture.",
        },
        {
        	"trigger": "copy_all_traditions_from",
        	"contents": "copy_all_traditions_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Replaces all traditions of scoped culture with traditions from the given culture.",
        },
        {
        	"trigger": "get_all_innovations_from",
        	"contents": "get_all_innovations_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Discover all innovations from the target culture.",
        },
        {
        	"trigger": "get_random_innovation_from",
        	"contents": "get_random_innovation_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Get random available innovation from another culture.",
        },
        {
        	"trigger": "join_era",
        	"contents": "join_era = ${1:<culture_era_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Joins all culture eras up to and including the given one.",
        },
        {
        	"trigger": "leave_era",
        	"contents": "leave_era = ${1:<culture_era_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Leaves all culture eras down to and including the given one.",
        },
        {
        	"trigger": "remove_culture_tradition",
        	"contents": "remove_culture_tradition = ${1:<tradition>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Removes the cultural tradition specified in the RHS from the scope.",
        },
        {
        	"trigger": "remove_innovation",
        	"contents": "remove_innovation = ${1:<innovation>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Remove innovation from a culture.",
        },
        {
        	"trigger": "remove_random_culture_tradition",
        	"contents": "remove_random_culture_tradition = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Removes a random cultural tradition from the scope.",
        },
        {
        	"trigger": "reset_culture_creation_date",
        	"contents": "reset_culture_creation_date = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Sets the culture creation date to be todays date.",
        },
        {
        	"trigger": "set_cultural_acceptance",
        	"contents": "set_cultural_acceptance = {\n\ttarget = ${1:<culture>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Sets cultural acceptance with the target culture.",
        },
        {
        	"trigger": "set_culture_name",
        	"contents": "set_culture_name = {\n\tnoun = ${1:<loc_key>}\n\tcollective_noun = ${2:<loc_key>}\n\tprefix = ${3:<loc_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Permanently sets the name of the scope culture to the parsed text from the provided localization string.",
        },
        {
        	"trigger": "set_culture_pillar",
        	"contents": "set_culture_pillar = ${1:<pillar>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Adds the current pillar specified in the RHS to the scope culture, replacing the pillar in the matching slot.",
        },
        {
        	"trigger": "set_ethos_from",
        	"contents": "set_ethos_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Set the ethos from the RHS on the scope culture.",
        },
        {
        	"trigger": "set_heritage_from",
        	"contents": "set_heritage_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Set the heritage from the RHS on the scope culture.",
        },
        {
        	"trigger": "set_language_from",
        	"contents": "set_language_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Set the language from the RHS on the scope culture.",
        },
        {
        	"trigger": "set_martial_custom_from",
        	"contents": "set_martial_custom_from = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Set the martial custom from the RHS on the scope culture.",
        },
        {
        	"trigger": "set_name_list",
        	"contents": "set_name_list = ${1:<name>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Culture"],
        	"details": "Remove all existing name lists then adds the specified name list to the culture.",
        },
        {
        	"trigger": "add_house_artifact_claim",
        	"contents": "add_house_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "House"],
        	"details": "Adds a claim on the target artifact to the scoped house.",
        },
        {
        	"trigger": "remove_house_artifact_claim",
        	"contents": "remove_house_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "House"],
        	"details": "Removes a claim on the target artifact from the scoped house.",
        },
        {
        	"trigger": "set_house_name",
        	"contents": "set_house_name = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "House"],
        	"details": "Sets dynasty house name.",
        },
        {
        	"trigger": "set_house_name_from_dynasty",
        	"contents": "set_house_name_from_dynasty = ${1:<dynasty>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "House"],
        	"details": "Sets dynasty house name from another dynasty's name.",
        },
        {
        	"trigger": "set_house_name_from_house",
        	"contents": "set_house_name_from_house = ${1:<house>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "House"],
        	"details": "Sets dynasty house name from another dynasty house's name.",
        },
        {
        	"trigger": "add_secret_participant",
        	"contents": "add_secret_participant = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Adds a participant to the secret.",
        },
        {
        	"trigger": "disable_exposure_by",
        	"contents": "disable_exposure_by = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Forbids the target character from exposing the secret.",
        },
        {
        	"trigger": "expose_secret",
        	"contents": "expose_secret = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Exposes the scope secret.",
        },
        {
        	"trigger": "remove_secret",
        	"contents": "remove_secret = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Removes the scope secret.",
        },
        {
        	"trigger": "reveal_to",
        	"contents": "reveal_to = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Reveals the scope secret to the target character.",
        },
        {
        	"trigger": "set_secret_owner",
        	"contents": "set_secret_owner = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Sets a new owner for the secret.",
        },
        {
        	"trigger": "spend_by",
        	"contents": "spend_by = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Secret"],
        	"details": "Spends the scope secret.",
        },
        {
        	"trigger": "add_loot",
        	"contents": "add_loot = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Army"],
        	"details": "Adds loot to the currently scoped raiding army.",
        },
        {
        	"trigger": "assign_commander",
        	"contents": "assign_commander = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Army"],
        	"details": "Assign a commander for the scoped army.",
        },
        {
        	"trigger": "remove_commander",
        	"contents": "remove_commander = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Army"],
        	"details": "Removes the currently assigned commander from the scoped army.",
        },
        {
        	"trigger": "set_army_location",
        	"contents": "set_army_location = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Army"],
        	"details": "Teleports the army to the given location.",
        },
        {
        	"trigger": "abort_travel_plan",
        	"contents": "abort_travel_plan = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Abort the travel plan immediately - no further travelling is executed.",
        },
        {
        	"trigger": "add_companion",
        	"contents": "add_companion = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Adds a character as a companion to the scoped travel plan.",
        },
        {
        	"trigger": "add_destination_progress",
        	"contents": "add_destination_progress = {\n\t${1:<days/weeks/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Add X days towards the progress of the travel plan to the next destination.",
        },
        {
        	"trigger": "add_travel_option",
        	"contents": "add_travel_option = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Adds the travel option specified in the RHS to the scope travel plan.",
        },
        {
        	"trigger": "add_travel_waypoint",
        	"contents": "add_travel_waypoint = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Adds a travel waypoint just ahead of the current travel location, and change the path accordingly.",
        },
        {
        	"trigger": "cancel_travel_plan",
        	"contents": "cancel_travel_plan = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Cancel travel plan future path, leave any associated activities, and reroute home.",
        },
        {
        	"trigger": "complete_travel_plan",
        	"contents": "complete_travel_plan = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Complete the travel plan immediately - no further travelling is executed.",
        },
        {
        	"trigger": "delay_travel_plan",
        	"contents": "delay_travel_plan = {\n\t${1:<days/weeks/months/years>} = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Add X days towards the progress of the travel plan to the next destination.",
        },
        {
        	"trigger": "pause_travel_plan",
        	"contents": "pause_travel_plan = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Pause the travel plan, until explicitly resumed.",
        },
        {
        	"trigger": "pause_travel_plan_mp",
        	"contents": "pause_travel_plan_mp = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Pause the travel plan, until resumed, if in multiplayer.",
        },
        {
        	"trigger": "remove_character",
        	"contents": "remove_character = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Remove character from a travel plan. You cannot remove the travel plan owner.",
        },
        {
        	"trigger": "remove_travel_option",
        	"contents": "remove_travel_option = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Removes the travel option specified in the RHS from the scope travel plan.",
        },
        {
        	"trigger": "reroute_to_home",
        	"contents": "reroute_to_home = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Remove future destinations of the travel plan and set the next destination to home.",
        },
        {
        	"trigger": "resume_travel_plan",
        	"contents": "resume_travel_plan = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Resume the travel plan, if paused.",
        },
        {
        	"trigger": "resume_travel_plan_mp",
        	"contents": "resume_travel_plan_mp = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Resume the travel plan, if paused for multiplayer purposes via 'pause_travel_plan_mp'.",
        },
        {
        	"trigger": "set_travel_leader",
        	"contents": "set_travel_leader = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Set a character as the travel leader on the scoped travel plan.",
        },
        {
        	"trigger": "set_travel_plan_owner",
        	"contents": "set_travel_plan_owner = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Travel Plan"],
        	"details": "Set a character as the owner of the scoped travel plan.",
        },
        {
        	"trigger": "activate_holy_site",
        	"contents": "activate_holy_site = ${1:<holy_site>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Activate an inactive holy site.",
        },
        {
        	"trigger": "add_doctrine",
        	"contents": "add_doctrine = ${1:<doctrine>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Add doctrine to faith.",
        },
        {
        	"trigger": "change_fervor",
        	"contents": "change_fervor = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Changes the fervor of the faith by the given value.",
        },
        {
        	"trigger": "deactivate_holy_site",
        	"contents": "deactivate_holy_site = ${1:<holy_site>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Deactivate an active holy site.",
        },
        {
        	"trigger": "remove_doctrine",
        	"contents": "remove_doctrine = ${1:<doctrine>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Remove doctrine from faith.",
        },
        {
        	"trigger": "remove_religious_head_title",
        	"contents": "remove_religious_head_title = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Removes the religious head title of the faith.",
        },
        {
        	"trigger": "set_religious_head_title",
        	"contents": "set_religious_head_title = ${1:<landed_title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Sets the religious head title of the faith to the given title.",
        },
        {
        	"trigger": "start_great_holy_war",
        	"contents": "start_great_holy_war = {\n\ttarget_character = ${1:<character>}\n\ttarget_title = ${2:<landed_title>}\n\tdelay = ${3:<script_value>}\n\twar = ${4:<war>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faith"],
        	"details": "Starts a great holy war.",
        },
        {
        	"trigger": "activate_struggle_catalyst",
        	"contents": "activate_struggle_catalyst = {\n\tcatalyst = ${1:<catalyst>}\n\tcharacter = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Activate a catalyst.",
        },
        {
        	"trigger": "change_struggle_phase",
        	"contents": "change_struggle_phase = ${1:<struggle_phase_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Change the phase from the current one to a listed scripted phase.",
        },
        {
        	"trigger": "end_struggle",
        	"contents": "end_struggle = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "End a struggle.",
        },
        {
        	"trigger": "set_culture_as_involved",
        	"contents": "set_culture_as_involved = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Set a culture as involved in the scoped Struggle.",
        },
        {
        	"trigger": "set_culture_as_uninvolved",
        	"contents": "set_culture_as_uninvolved = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Set a culture as involved in the scoped Struggle.",
        },
        {
        	"trigger": "set_faith_as_involved",
        	"contents": "set_faith_as_involved = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Set a faith as involved in the scoped Struggle.",
        },
        {
        	"trigger": "set_faith_as_uninvolved",
        	"contents": "set_faith_as_uninvolved = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Struggle"],
        	"details": "Set a faith as uninvolved in the scoped Struggle.",
        },
        {
        	"trigger": "change_war_chest_gold",
        	"contents": "change_war_chest_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Changes the amount of gold in the war chest by the given amount.",
        },
        {
        	"trigger": "change_war_chest_piety",
        	"contents": "change_war_chest_piety = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Changes the amount of piety in the war chest by the given amount.",
        },
        {
        	"trigger": "change_war_chest_prestige",
        	"contents": "change_war_chest_prestige = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Changes the amount of prestige in the war chest by the given amount.",
        },
        {
        	"trigger": "divide_war_chest",
        	"contents": "divide_war_chest = {\n\tfraction = ${1:<script_value>}\n\tgold = yes\n\tpiety = yes\n\tprestige = yes\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The scoped GHW gives out its war-chest in full or in part.",
        },
        {
        	"trigger": "do_ghw_title_handout",
        	"contents": "do_ghw_title_handout = ${1:<title_and_vassal_change>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Hands out titles in the target kingdom to the GHW attacker beneficiaries.",
        },
        {
        	"trigger": "pledge_attacker",
        	"contents": "pledge_attacker = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character pledges themselves as an attacker in the GHW.",
        },
        {
        	"trigger": "pledge_defender",
        	"contents": "pledge_defender = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character pledges themselves as a defender in the GHW.",
        },
        {
        	"trigger": "reset_designated_winner",
        	"contents": "reset_designated_winner = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The GHW stops having a designated winner.",
        },
        {
        	"trigger": "set_designated_winner",
        	"contents": "set_designated_winner = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character becomes the designated winner of the GHW.",
        },
        {
        	"trigger": "set_great_holy_war_target",
        	"contents": "set_great_holy_war_target = {\n\ttarget_character = ${1:<character>}\n\ttarget_title = ${2:<landed_title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Sets the target of the great holy war.",
        },
        {
        	"trigger": "set_war_declarer",
        	"contents": "set_war_declarer = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character becomes the character that should declare war instead of the religious head.",
        },
        {
        	"trigger": "start_ghw_war",
        	"contents": "start_ghw_war = ${1:<casus_belli>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "Starts the GHW war.",
        },
        {
        	"trigger": "unpledge_attacker",
        	"contents": "unpledge_attacker = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character removes their pledge as an attacker in the GHW.",
        },
        {
        	"trigger": "unpledge_defender",
        	"contents": "unpledge_defender = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "GHW"],
        	"details": "The target character removes their pledge as a defender in the GHW.",
        },
        {
        	"trigger": "generate_coa",
        	"contents": "generate_coa = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title/Dynasty/House"],
        	"details": "Generates a coat of arms for the scoped landed title, dynasty or house.",
        },
        {
        	"trigger": "reset_coa",
        	"contents": "reset_coa = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title/Dynasty/House"],
        	"details": "Rest the coat of arms for the scoped landed title, dynasty or house to its template.",
        },
        {
        	"trigger": "set_coa",
        	"contents": "set_coa = ${1:<title/dynasty/house>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title/Dynasty/House"],
        	"details": "Sets the coat of arms of a landed title, dynasty, or house to the right hand side coat of arms or that of an object of the same type.",
        },
        {
        	"trigger": "add_from_contribution_attackers",
        	"contents": "add_from_contribution_attackers = {\n\tprestige = ${1:<script_value>}\n\tpiety = ${2:<script_value>}\n\tgold = ${3:<script_value>}\n\topinion = {\n\t\tmodifier = ${4:<modifier>}\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Casus Belli"],
        	"details": "Adds prestige, gold and piety based on contribution to allied attackers.",
        },
        {
        	"trigger": "add_from_contribution_defenders",
        	"contents": "add_from_contribution_defenders = {\n\tprestige = ${1:<script_value>}\n\tpiety = ${2:<script_value>}\n\tgold = ${3:<script_value>}\n\topinion = {\n\t\tmodifier = ${4:<modifier>}\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Casus Belli"],
        	"details": "Adds prestige, gold and piety based on contribution to allied defenders.",
        },
        {
        	"trigger": "add_artifact_history",
        	"contents": "add_artifact_history = {\n\ttype = ${1:<type>}\n\tdate = ${2:<date>}\n\tactor = ${3:<character>}\n\trecipient = ${4:<character>}\n\tlocation = ${5:<province>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Adds a history entry to the artifact.",
        },
        {
        	"trigger": "add_artifact_title_history",
        	"contents": "add_artifact_title_history = {\n\ttarget = ${1:<title>}\n\tdate = ${2:<date>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Adds the title history of the given title to the scoped artifacts history.",
        },
        {
        	"trigger": "add_durability",
        	"contents": "add_durability = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Add this much to the artifacts durability.",
        },
        {
        	"trigger": "equip_artifact_to_owner",
        	"contents": "equip_artifact_to_owner = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Makes the owner of the scoped artifact equip it, will not replace equipped slots.",
        },
        {
        	"trigger": "equip_artifact_to_owner_replace",
        	"contents": "equip_artifact_to_owner_replace = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Makes the owner of the scoped artifact equip it, will replace equipped slots.",
        },
        {
        	"trigger": "reforge_artifact",
        	"contents": "reforge_artifact = {\n\tname = ${1:<loc_key>}\n\tdescription = ${2:<loc_key>}\n\trarity = ${3:<value>}\n\ttype = ${4:<inventory_slot>}\n\tmodifier = ${5:<static_modifier>}\n\tdurability = ${6:<script_value>}\n\tmax_durability = ${7:<script_value>}\n\tdecaying = ${8:<yes/no>}\n\thistory = ${9:<artifact_history_entry>}\n\ttemplate = ${10:<artifact_scripted_template>}\n\tvisuals = ${11:<artifact_visual_type>}\n\tgenerate_history = ${12:<yes/no>}\n\tquality = ${13:<script_value>}\n\twealth = ${14:<script_value>}\n\tcreator = ${15:<character>}\n\tvisuals_source = ${16:<title/dynasty/house>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Reforges the given artifact, restoring its durability and potentially changing any other attributes such as type or modifiers unless those fields are left empty.",
        },
        {
        	"trigger": "remove_artifact_feature_group",
        	"contents": "remove_artifact_feature_group = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Removes th feature from the specified group from the artifact.",
        },
        {
        	"trigger": "set_artifact_description",
        	"contents": "set_artifact_description = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets the description of the given artifact.",
        },
        {
        	"trigger": "set_artifact_feature",
        	"contents": "set_artifact_feature = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets the specified feature on the artifact.",
        },
        {
        	"trigger": "set_artifact_feature_group",
        	"contents": "set_artifact_feature_group = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets a feature from the specified group on the artifact.",
        },
        {
        	"trigger": "set_artifact_name",
        	"contents": "set_artifact_name = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets the name of the given artifact.",
        },
        {
        	"trigger": "set_artifact_rarity",
        	"contents": "set_artifact_rarity = ${1:<rarity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets the rarity of the scoped artifact.",
        },
        {
        	"trigger": "set_max_durability",
        	"contents": "set_max_durability = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Sets the artifact's max durability.",
        },
        {
        	"trigger": "set_owner",
        	"contents": "set_owner = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Change the artifacts owner and transfer it to the given character.",
        },
        {
        	"trigger": "set_should_decay",
        	"contents": "set_should_decay = ${1:<yes/no>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Set if the scoped artifact should decay with time or not.",
        },
        {
        	"trigger": "unequip_artifact_from_owner",
        	"contents": "unequip_artifact_from_owner = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Artifact"],
        	"details": "Makes the owner of the scoped artifact unequip it.",
        },
        {
        	"trigger": "add_diplomacy_skill",
        	"contents": "add_diplomacy_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds diplomacy skill.",
        },
        {
        	"trigger": "add_focus_progress",
        	"contents": "add_focus_progress = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds focus progress.",
        },
        {
        	"trigger": "add_internal_flag",
        	"contents": "add_internal_flag = ${1:<flag>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds effect to be read internally (no effect in the gamestate).",
        },
        {
        	"trigger": "add_intrigue_skill",
        	"contents": "add_intrigue_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds intrigue skill.",
        },
        {
        	"trigger": "add_learning_skill",
        	"contents": "add_learning_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds learning skill.",
        },
        {
        	"trigger": "add_martial_skill",
        	"contents": "add_martial_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds martial skill.",
        },
        {
        	"trigger": "add_prowess_skill",
        	"contents": "add_prowess_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds prowess skill.",
        },
        {
        	"trigger": "add_stewardship_skill",
        	"contents": "add_stewardship_skill = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds stewardship skill.",
        },
        {
        	"trigger": "add_title_law",
        	"contents": "add_title_law = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Add law to scoped title, overriding any current law from the same group. DOES NOT apply law change costs and effects.",
        },
        {
        	"trigger": "add_title_law_effects",
        	"contents": "add_title_law_effects = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Add law to scoped title, overriding any current law from the same group. DOES apply law change costs and effects.",
        },
        {
        	"trigger": "add_to_global_variable_list",
        	"contents": "add_to_global_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds the event target to a variable list.",
        },
        {
        	"trigger": "add_to_list",
        	"contents": "add_to_list = ${1:<list>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds the current scope to an arbitrarily-named list.",
        },
        {
        	"trigger": "add_to_local_variable_list",
        	"contents": "add_to_local_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds the event target to a variable list.",
        },
        {
        	"trigger": "add_to_temporary_list",
        	"contents": "add_to_temporary_list = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds the current scope to an arbitrarily-named list to be referenced later in the same effect.",
        },
        {
        	"trigger": "add_to_variable_list",
        	"contents": "add_to_variable_list = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Adds the event target to a variable list.",
        },
        {
        	"trigger": "break_betrothal",
        	"contents": "break_betrothal = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Breaks the betrothal between the scope character to the target character.",
        },
        {
        	"trigger": "change_global_variable",
        	"contents": "change_global_variable = {\n\tname = ${1:<variable>}\n\t${2:<add/subtract/multiply/divide/modulo/min/max>} = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Changes the value or a numeric variable.",
        },
        {
        	"trigger": "change_local_variable",
        	"contents": "change_local_variable = {\n\tname = ${1:<variable>}\n\t${2:<add/subtract/multiply/divide/modulo/min/max>} = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Changes the value or a numeric variable.",
        },
        {
        	"trigger": "change_title_holder",
        	"contents": "change_title_holder = {\n\tholder = ${1:<character>}\n\tchange = ${2:<title_and_vassal_change>}\n\ttake_baronies = ${3:<yes/no>}\n\tgovernment_base = ${4:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "",
        },
        {
        	"trigger": "change_title_holder_include_vassals",
        	"contents": "change_title_holder_include_vassals = {\n\tholder = ${1:<character>}\n\tchange = ${2:<title_and_vassal_change>}\n\ttake_baronies = ${3:<yes/no>}\n\tgovernment_base = ${4:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "",
        },
        {
        	"trigger": "change_variable",
        	"contents": "change_variable = {\n\tname = ${1:<variable>}\n\t${2:<add/subtract/multiply/divide/modulo/min/max>} = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Changes the value or a numeric variable.",
        },
        {
        	"trigger": "clamp_global_variable",
        	"contents": "clamp_global_variable = {\n\tname = ${1:<variable>}\n\tmin = ${2:<script_value>}\n\tmax = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Clamps a variable the specified max and min.",
        },
        {
        	"trigger": "clamp_local_variable",
        	"contents": "clamp_local_variable = {\n\tname = ${1:<variable>}\n\tmin = ${2:<script_value>}\n\tmax = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Clamps a variable the specified max and min.",
        },
        {
        	"trigger": "clamp_variable",
        	"contents": "clamp_variable = {\n\tname = ${1:<variable>}\n\tmin = ${2:<script_value>}\n\tmax = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Clamps a variable the specified max and min.",
        },
        {
        	"trigger": "clear_global_variable_list",
        	"contents": "clear_global_variable_list = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Empties the list.",
        },
        {
        	"trigger": "clear_local_variable_list",
        	"contents": "clear_local_variable_list = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Empties the list.",
        },
        {
        	"trigger": "clear_saved_scope",
        	"contents": "clear_saved_scope = ${1:<saved_scope>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Clears a saved scope from the top scope.",
        },
        {
        	"trigger": "clear_traits",
        	"contents": "clear_traits = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes all traits for the character.",
        },
        {
        	"trigger": "clear_variable_list",
        	"contents": "clear_variable_list = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Empties the list.",
        },
        {
        	"trigger": "close_all_views",
        	"contents": "close_all_views = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Closes all views.",
        },
        {
        	"trigger": "close_view",
        	"contents": "close_view = ${1:<view>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to close the defined view.",
        },
        {
        	"trigger": "close_view (player)",
        	"contents": "close_view = {\n\tview = ${1:<view>}\n\tplayer = ${2:<player>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to close the defined view.",
        },
        {
        	"trigger": "copy_traits",
        	"contents": "copy_traits = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds all traits of the target to the character. Skips any traits that the character isn't allowed to have.",
        },
        {
        	"trigger": "create_accolade",
        	"contents": "create_accolade = {\n\tknight = ${1:<character>}\n\tprimary = ${2:<accolade_type>}\n\tsecondary = ${3:<accolade_type>}\n\tname = ${4:<loc_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Create an accolade for the scoped character with the given knight and types.",
        },
        {
        	"trigger": "create_betrothal",
        	"contents": "create_betrothal = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Betroth the scope character to the target character.",
        },
        {
        	"trigger": "create_betrothal_matrilineal",
        	"contents": "create_betrothal_matrilineal = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Betroth the scope character to the target character matrilineally.",
        },
        {
        	"trigger": "create_character (all values)",
        	"contents": "create_character = {\n\tsave_event_target_as = ${1:<scope>}\n\tsave_temporary_event_target_as = ${2:<scope>}\n\tname = ${3:<loc_key>}\n\tage = ${4:<value>}\n\tgender = ${5:<male/female/character>}\n\tgender_female_chance = ${6:<script_value>}\n\topposite_gender = ${7:<character>}\n\ttrait = ${8:<trait>}\n\trandom_traits_list = {\n\t\tcount = ${9:<script_value>}\n\n\t}\n\trandom_traits = ${10:<yes/no>}\n\thealth = ${11:<value>}\n\tfertility = ${12:<value>}\n\tmother = ${13:<character>}\n\tfather = ${14:<character>}\n\treal_father = ${15:<character>}\n\temployer = ${16:<character>}\n\tlocation = ${17:<province>}\n\ttemplate_character = ${18:<template>}\n\tfaith = ${19:<faith>}\n\trandom_faith = {}\n\tculture = ${20:<culture>}\n\trandom_culture = {}\n\trandom_culture_in_group = ${21:<culture_group/culture>}\n\tdynasty_house = ${22:<dynasty_house>}\n\tdynasty = ${23:<generate/inherit/none>}\n\t${24:<martial/diplomacy/intrigue/stewardship/learning>} = ${25:<value>}\n\tafter_creation = {}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Creates a character.",
        },
        {
        	"trigger": "create_dynamic_title",
        	"contents": "create_dynamic_title = {\n\ttier = ${1:<tier>}\n\tname = ${2:<loc_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Creates a dynamic title.",
        },
        {
        	"trigger": "create_holy_order",
        	"contents": "create_holy_order = {\n\tleader = ${1:<character>}\n\tcapital = ${2:<landed_title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Create a new holy order.",
        },
        {
        	"trigger": "create_title_and_vassal_change",
        	"contents": "create_title_and_vassal_change = {\n\ttype = ${1:<type>}\n\tsave_scope_as = ${2:<scope>}\n\tadd_claim_on_loss = ${3:<yes/no>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Starts a title and vassal change and saves it as a temporary event target.",
        },
        {
        	"trigger": "custom_description",
        	"contents": "custom_description = {\n\ttext = ${1:<loc_key>}\n\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one.",
        },
        {
        	"trigger": "custom_description (all values)",
        	"contents": "custom_description = {\n\ttext = ${1:<loc_key>}\n\tsubject = ${2:<character>}\n\tobject = ${3:<character>}\n\tvalue = ${4:<script_value>}\n\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one.",
        },
        {
        	"trigger": "custom_description_no_bullet",
        	"contents": "custom_description_no_bullet = {\n\ttext = ${1:<loc_key>}\n\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one. Also ensures no bullet point appears.",
        },
        {
        	"trigger": "custom_description_no_bullet (all values)",
        	"contents": "custom_description_no_bullet = {\n\ttext = ${1:<loc_key>}\n\tsubject = ${2:<character>}\n\tobject = ${3:<character>}\n\tvalue = ${4:<script_value>}\n\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Wraps effects that get a custom description instead of the auto-generated one Also ensures no bullet point appears.",
        },
        {
        	"trigger": "custom_label",
        	"contents": "custom_label = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Just a tooltip.",
        },
        {
        	"trigger": "custom_tooltip",
        	"contents": "custom_tooltip = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Just a tooltip.",
        },
        {
        	"trigger": "debug_log",
        	"contents": "debug_log = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Log a string to the debug log when this effect executes.",
        },
        {
        	"trigger": "debug_log_date",
        	"contents": "debug_log_date = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Logs the current date to the debug.log.",
        },
        {
        	"trigger": "debug_log_scopes",
        	"contents": "debug_log_scopes = ${1:<yes/no>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Log the current scope to the debug log. (Yes = full scope info, no = current scope only)",
        },
        {
        	"trigger": "destroy_artifact",
        	"contents": "destroy_artifact = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Destroy given artifact, regardless of owner.",
        },
        {
        	"trigger": "destroy_character_memory",
        	"contents": "destroy_character_memory = ${1:<memory>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Destroy given artifact, regardless of owner.",
        },
        {
        	"trigger": "destroy_inspiration",
        	"contents": "destroy_inspiration = ${1:<inspiration>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Destroys the targeted inspiration.",
        },
        {
        	"trigger": "destroy_owned_artifact",
        	"contents": "destroy_owned_artifact = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Destroy artifact owned by character.",
        },
        {
        	"trigger": "divorce",
        	"contents": "divorce = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Divorces the scope character from the target character.",
        },
        {
        	"trigger": "duel (target)",
        	"contents": "duel = {\n\tskill = ${1:<skill>}\n\ttarget = ${2:<character>}\n\t25 = {\n\n\t}\n\t25 = {\n\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Effect that selects an effect based on comparing specified skill(s) of a character to another character's skill(s).",
        },
        {
        	"trigger": "duel (value)",
        	"contents": "duel = {\n\tskill = ${1:<skill>}\n\tvalue = ${2:<script_value>}\n\t25 = {\n\n\t}\n\t25 = {\n\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Effect that selects an effect based on comparing specified skill(s) of a character to a value.",
        },
        {
        	"trigger": "end_inspiration_sponsorship",
        	"contents": "end_inspiration_sponsorship = ${1:<inspiration>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Stops the sponsorship of the targeted inspiration.",
        },
        {
        	"trigger": "error_log",
        	"contents": "error_log = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Log a string to the error log when this effect executes.",
        },
        {
        	"trigger": "invalidate_activity",
        	"contents": "invalidate_activity = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Invalidate and destroy the target activity, running its on_invalidate effect.",
        },
        {
        	"trigger": "multiply_focus_progress",
        	"contents": "multiply_focus_progress = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Multiplies focus progress.",
        },
        {
        	"trigger": "open_interaction_window",
        	"contents": "open_interaction_window = {\n\tinteraction = ${1:<interaction>}\n\tactor = ${2:<character>}\n\trecipient = ${3:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to open the defined view.",
        },
        {
        	"trigger": "open_view",
        	"contents": "open_view = ${1:<view>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to open the defined view without scope data.",
        },
        {
        	"trigger": "open_view_data",
        	"contents": "open_view_data = ${1:<view>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to open the defined view with scope data.",
        },
        {
        	"trigger": "pan_camera_to_province",
        	"contents": "pan_camera_to_province = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Pans the camera to the specified province.",
        },
        {
        	"trigger": "pan_camera_to_title",
        	"contents": "pan_camera_to_title = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Pans the camera to the specified title.",
        },
        {
        	"trigger": "remove_from_list",
        	"contents": "remove_from_list = ${1:<list>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes the current scope from a named list.",
        },
        {
        	"trigger": "remove_global_variable",
        	"contents": "remove_global_variable = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes a variable.",
        },
        {
        	"trigger": "remove_list_global_variable",
        	"contents": "remove_list_global_variable = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes the target from a variable list.",
        },
        {
        	"trigger": "remove_list_local_variable",
        	"contents": "remove_list_local_variable = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes the target from a variable list.",
        },
        {
        	"trigger": "remove_list_variable",
        	"contents": "remove_list_variable = {\n\tname = ${1:<variable>}\n\ttarget = ${2:<scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes the target from a variable list.",
        },
        {
        	"trigger": "remove_local_variable",
        	"contents": "remove_local_variable = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes a variable.",
        },
        {
        	"trigger": "remove_title_law",
        	"contents": "remove_title_law = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Remove law from scoped title. DOES NOT apply law removal costs and effects.",
        },
        {
        	"trigger": "remove_title_law_effects",
        	"contents": "remove_title_law_effects = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Remove law from scoped title. DOES apply law removal costs and effects.",
        },
        {
        	"trigger": "remove_variable",
        	"contents": "remove_variable = ${1:<variable>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes a variable.",
        },
        {
        	"trigger": "resolve_title_and_vassal_change",
        	"contents": "resolve_title_and_vassal_change = ${1:<scope>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Execute and destroy the target title and vassal change.",
        },
        {
        	"trigger": "round_global_variable",
        	"contents": "round_global_variable = {\n\tname = ${1:<variable>}\n\tnearest = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Rounds a variable to the nearest specified value.",
        },
        {
        	"trigger": "round_local_variable",
        	"contents": "round_local_variable = {\n\tname = ${1:<variable>}\n\tnearest = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Rounds a variable to the nearest specified value.",
        },
        {
        	"trigger": "round_variable",
        	"contents": "round_variable = {\n\tname = ${1:<variable>}\n\tnearest = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Rounds a variable to the nearest specified value.",
        },
        {
        	"trigger": "run_interaction",
        	"contents": "run_interaction = {\n\tinteraction = ${1:<interaction>}\n\tactor = ${2:<character>}\n\trecipient = ${3:<character>}\n\texecute_threshold = ${4:<accept/maybe/decline>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Execute/send the given interaction.",
        },
        {
        	"trigger": "save_opinion_value_as",
        	"contents": "save_opinion_value_as = {\n\tname = ${1:<key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Saves the scoped character's opinion of the target character.",
        },
        {
        	"trigger": "save_scope_value_as",
        	"contents": "save_scope_value_as = {\n\tname = ${1:<key>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Saves a numerical or bool value.",
        },
        {
        	"trigger": "save_temporary_opinion_value_as",
        	"contents": "save_temporary_opinion_value_as = {\n\tname = ${1:<key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Saves the scoped character's opinion of the target character to be referenced later in the same effect.",
        },
        {
        	"trigger": "save_temporary_scope_value_as",
        	"contents": "save_temporary_scope_value_as = {\n\tname = ${1:<key>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Saves a numerical or bool value to be referenced later in the same effect.",
        },
        {
        	"trigger": "set_focus_progress",
        	"contents": "set_focus_progress = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets focus progress.",
        },
        {
        	"trigger": "set_generated_asexuality_chance",
        	"contents": "set_generated_asexuality_chance = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets the chance for a generated character to be asexual.",
        },
        {
        	"trigger": "set_generated_bisexuality_chance",
        	"contents": "set_generated_bisexuality_chance = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets the chance for a generated character to be bisexual.",
        },
        {
        	"trigger": "set_generated_homosexuality_chance",
        	"contents": "set_generated_homosexuality_chance = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets the chance for a generated character to be homosexual.",
        },
        {
        	"trigger": "set_global_variable",
        	"contents": "set_global_variable = {\n\tname = ${1:<variable>}\n\tvalue = ${2:<value/script_value/bool>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets a variable.",
        },
        {
        	"trigger": "set_local_variable",
        	"contents": "set_local_variable = {\n\tname = ${1:<variable>}\n\tvalue = ${2:<value/script_value/bool>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets a variable.",
        },
        {
        	"trigger": "set_pregnancy_gender",
        	"contents": "set_pregnancy_gender = ${1:<female/male/random>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Set the gender of the unborn child.",
        },
        {
        	"trigger": "set_variable",
        	"contents": "set_variable = {\n\tname = ${1:<variable>}\n\tvalue = ${2:<value/script_value/bool>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Sets a variable.",
        },
        {
        	"trigger": "setup_claim_cb",
        	"contents": "setup_claim_cb = {\n\ttitles = ${1:<list/titles>}\n\tattacker = ${2:<character>}\n\tdefender = ${3:<character>}\n\tclaimant = ${4:<character>}\n\tchange = ${5:<change>}\n\tvictory = ${6:<yes/no>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Create a claim CB.",
        },
        {
        	"trigger": "setup_de_jure_cb",
        	"contents": "setup_de_jure_cb = {\n\ttitle = ${1:<titles>}\n\tattacker = ${2:<character>}\n\tdefender = ${3:<character>}\n\tvictory = ${4:<yes/no>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Create a DeJure CB.",
        },
        {
        	"trigger": "setup_invasion_cb",
        	"contents": "setup_invasion_cb = {\n\ttitles = ${1:<list/titles>}\n\tattacker = ${2:<character>}\n\tdefender = ${3:<character>}\n\tclaimant = ${4:<character>}\n\tchange = ${5:<change>}\n\tvictory = ${6:<yes/no>}\n\ttake_occupied = ${7:<yes/no>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Create an invasion CB.",
        },
        {
        	"trigger": "start_struggle",
        	"contents": "start_struggle = {\n\tstruggle_type = ${1:<struggle_type>}\n\tstart_phase = ${2:<struggle_phase>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Start a struggle.",
        },
        {
        	"trigger": "start_tutorial_lesson",
        	"contents": "start_tutorial_lesson = ${1:<lesson>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Starts the tutorial lesson with the given key.",
        },
        {
        	"trigger": "try_create_important_action",
        	"contents": "try_create_important_action = {\n\timportant_action = ${1:<action>}\n\tactor = ${2:<character>}\n\trecipient = ${3:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to create an important action notification.",
        },
        {
        	"trigger": "try_create_suggestion",
        	"contents": "try_create_suggestion = {\n\tsuggestion_type = ${1:<action>}\n\tactor = ${2:<character>}\n\trecipient = ${3:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Tries to create an important action notification.",
        },
        {
        	"trigger": "add_building",
        	"contents": "add_building = ${1:<building>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Add building to the province.",
        },
        {
        	"trigger": "add_special_building",
        	"contents": "add_special_building = ${1:<building>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Add a special building to the province.",
        },
        {
        	"trigger": "add_special_building_slot",
        	"contents": "add_special_building_slot = ${1:<building>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Add a special building slot to the province.",
        },
        {
        	"trigger": "add_travel_point_of_interest",
        	"contents": "add_travel_point_of_interest = ${1:<point_of_interest_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Add a travel point of interest type to this province.",
        },
        {
        	"trigger": "begin_create_holding",
        	"contents": "begin_create_holding = ${1:<holding>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Start construction of the specified holding type.",
        },
        {
        	"trigger": "begin_create_holding (refund)",
        	"contents": "begin_create_holding = {\n\ttype = ${1:<holding>}\n\trefund_cost = {\n\t\tgold = ${2:<script_value>}\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Start construction of the specified holding type, will refund cost.",
        },
        {
        	"trigger": "generate_building",
        	"contents": "generate_building = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Adds a random building to the province.",
        },
        {
        	"trigger": "refill_garrison",
        	"contents": "refill_garrison = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "The scoped province gets its garrison refilled.",
        },
        {
        	"trigger": "refill_levy",
        	"contents": "refill_levy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "The scoped province gets its levy refilled.",
        },
        {
        	"trigger": "remove_building",
        	"contents": "remove_building = ${1:<building>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Remove building from the province.",
        },
        {
        	"trigger": "remove_holding",
        	"contents": "remove_holding = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Removes the holding in scoped province, cannot remove capital holdings.",
        },
        {
        	"trigger": "remove_travel_point_of_interest",
        	"contents": "remove_travel_point_of_interest = ${1:<point_of_interest_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Remove a travel point of interest type in this province.",
        },
        {
        	"trigger": "set_holding_type",
        	"contents": "set_holding_type = ${1:<holding>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Province"],
        	"details": "Changes the scoped province's holding to another type.",
        },
        {
        	"trigger": "add_attacker",
        	"contents": "add_attacker = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Adds the target character to the scope war as an attacker.",
        },
        {
        	"trigger": "add_defender",
        	"contents": "add_defender = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Adds the target character to the scope war as a defender.",
        },
        {
        	"trigger": "clear_claimant",
        	"contents": "clear_claimant = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Removes the claimant from a war.",
        },
        {
        	"trigger": "end_war",
        	"contents": "end_war = ${1:<attacker/defender/white_peace>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Ends the war with the specified winner.",
        },
        {
        	"trigger": "remove_participant",
        	"contents": "remove_participant = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Removes the target character from the scope war.",
        },
        {
        	"trigger": "set_called_to",
        	"contents": "set_called_to = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Sets the target character as already called to the scope war.",
        },
        {
        	"trigger": "set_casus_belli",
        	"contents": "set_casus_belli = ${1:<casus_belli>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "War"],
        	"details": "Sets the casus belli of the scope war.",
        },
        {
        	"trigger": "activate_accolade",
        	"contents": "activate_accolade = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Accolade"],
        	"details": "Activates the scoped Accolade.",
        },
        {
        	"trigger": "add_glory",
        	"contents": "add_glory = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Accolade"],
        	"details": "Add this much to the Accolades glory.",
        },
        {
        	"trigger": "deactivate_accolade",
        	"contents": "deactivate_accolade = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Accolade"],
        	"details": "Deactivates the scoped Accolade.",
        },
        {
        	"trigger": "remove_acclaimed_knight",
        	"contents": "remove_acclaimed_knight = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Accolade"],
        	"details": "Removes the acclaimed knight from this Accolade and passes it onto the successor (if any).",
        },
        {
        	"trigger": "add_scheme_progress",
        	"contents": "add_scheme_progress = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Add progress to the scope scheme.",
        },
        {
        	"trigger": "end_scheme",
        	"contents": "end_scheme = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Ends a specific scheme and removes it without any other effect.",
        },
        {
        	"trigger": "expose_scheme",
        	"contents": "expose_scheme = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Exposes the scheme to the defender.",
        },
        {
        	"trigger": "expose_scheme_agent",
        	"contents": "expose_scheme_agent = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Exposes the target character as an agent of the current scheme.",
        },
        {
        	"trigger": "scheme_freeze",
        	"contents": "scheme_freeze = {\n\treason = ${1:<loc_key>}\n\t${2:days/months/years} = ${3:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Freezes a scheme for a specific duration.",
        },
        {
        	"trigger": "scheme_unfreeze",
        	"contents": "scheme_unfreeze = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Scheme"],
        	"details": "Unfreezes the scheme if it's frozen.",
        },
        {
        	"trigger": "end_story",
        	"contents": "end_story = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Story"],
        	"details": "Ends a story and executes it's on_end effect.",
        },
        {
        	"trigger": "make_story_owner",
        	"contents": "make_story_owner = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Story"],
        	"details": "Makes the character the new owner of the story.",
        },
        {
        	"trigger": "accept_activity_invite",
        	"contents": "accept_activity_invite = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character accepts the invitation to the target activity, using their default travel plan.",
        },
        {
        	"trigger": "accept_activity_invite_without_travel",
        	"contents": "accept_activity_invite_without_travel = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character accepts the invitation to the target activity, without adding a travel plan.",
        },
        {
        	"trigger": "add_amenity_level",
        	"contents": "add_amenity_level = {\n\ttype = ${1:<amenity>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Increases the amenity type by the given value for the scoped character.",
        },
        {
        	"trigger": "add_character_flag",
        	"contents": "add_character_flag = ${1:<flag>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a character flag.",
        },
        {
        	"trigger": "add_character_flag (timed)",
        	"contents": "add_character_flag = {\n\ttype = ${1:<flag>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a character flag",
        },
        {
        	"trigger": "add_courtier",
        	"contents": "add_courtier = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add the target character to the scope character's court.",
        },
        {
        	"trigger": "add_diplomacy_lifestyle_perk_points",
        	"contents": "add_diplomacy_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle per points to the given character.",
        },
        {
        	"trigger": "add_diplomacy_lifestyle_xp",
        	"contents": "add_diplomacy_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle XP to the given character.",
        },
        {
        	"trigger": "add_dread",
        	"contents": "add_dread = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds (or removes) dread to a character.",
        },
        {
        	"trigger": "add_gold",
        	"contents": "add_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds gold to a character.",
        },
        {
        	"trigger": "add_hook",
        	"contents": "add_hook = {\n\ttype = ${1:<hook>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a hook on a character.",
        },
        {
        	"trigger": "add_hook_no_toast",
        	"contents": "add_hook_no_toast = {\n\ttype = ${1:<hook>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a hook on a character, does not send a toast.",
        },
        {
        	"trigger": "add_intrigue_lifestyle_perk_points",
        	"contents": "add_intrigue_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle per points to the given character.",
        },
        {
        	"trigger": "add_intrigue_lifestyle_xp",
        	"contents": "add_intrigue_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle XP to the given character.",
        },
        {
        	"trigger": "add_joined_faction_discontent",
        	"contents": "add_joined_faction_discontent = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds (or subtracts) discontent to the factions the scope character is in.",
        },
        {
        	"trigger": "add_knows_of_killer",
        	"contents": "add_knows_of_killer = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds the RHS character as knowing of the killer of the scoped object.",
        },
        {
        	"trigger": "add_learning_lifestyle_perk_points",
        	"contents": "add_learning_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle per points to the given character.",
        },
        {
        	"trigger": "add_learning_lifestyle_xp",
        	"contents": "add_learning_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle XP to the given character.",
        },
        {
        	"trigger": "add_long_term_gold",
        	"contents": "add_long_term_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add gold to 'long term' AI budget category, respecting maximums, overflow goes into Short Term budget.",
        },
        {
        	"trigger": "add_martial_lifestyle_perk_points",
        	"contents": "add_martial_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle per points to the given character.",
        },
        {
        	"trigger": "add_martial_lifestyle_xp",
        	"contents": "add_martial_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle XP to the given character.",
        },
        {
        	"trigger": "add_opinion",
        	"contents": "add_opinion = {\n\tmodifier = ${1:<opinion_modifier>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a temporary opinion modifier.",
        },
        {
        	"trigger": "add_opinion (timed)",
        	"contents": "add_opinion = {\n\tmodifier = ${1:<opinion_modifier>}\n\ttarget = ${2:<character>}\n\t${3:<days/months/years>} = ${4:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a temporary opinion modifier.",
        },
        {
        	"trigger": "add_opinion (value)",
        	"contents": "add_opinion = {\n\tmodifier = ${1:<opinion_modifier>}\n\ttarget = ${2:<character>}\n\topinion = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a temporary opinion modifier.",
        },
        {
        	"trigger": "add_perk",
        	"contents": "add_perk = ${1:<perk>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds the perk for this character.",
        },
        {
        	"trigger": "add_personal_artifact_claim",
        	"contents": "add_personal_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a personal claim on the target artifact to the scoped character.",
        },
        {
        	"trigger": "add_piety",
        	"contents": "add_piety = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts piety to/from a character.",
        },
        {
        	"trigger": "add_piety_experience",
        	"contents": "add_piety_experience = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts piety experience to/from a character.",
        },
        {
        	"trigger": "add_piety_level",
        	"contents": "add_piety_level = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts piety levels to/from a character.",
        },
        {
        	"trigger": "add_piety_no_experience",
        	"contents": "add_piety_no_experience = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts piety without experience to/from a character.",
        },
        {
        	"trigger": "add_pressed_claim",
        	"contents": "add_pressed_claim = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Gives a pressed claim to a character.",
        },
        {
        	"trigger": "add_prestige",
        	"contents": "add_prestige = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts prestige to/from a character.",
        },
        {
        	"trigger": "add_prestige_experience",
        	"contents": "add_prestige_experience = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts prestige experience to/from a character.",
        },
        {
        	"trigger": "add_prestige_level",
        	"contents": "add_prestige_level = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts prestige levels to/from a character.",
        },
        {
        	"trigger": "add_prestige_no_experience",
        	"contents": "add_prestige_no_experience = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds/subtracts prestige without experience to/from a character.",
        },
        {
        	"trigger": "add_realm_law",
        	"contents": "add_realm_law = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds the given law to the scoped character.",
        },
        {
        	"trigger": "add_realm_law_skip_effects",
        	"contents": "add_realm_law_skip_effects = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds the given law to the scoped character. Skips the cost and the pass effect, and the revoke effects of the current law.",
        },
        {
        	"trigger": "add_relation_flag",
        	"contents": "add_relation_flag = {\n\trelation = ${1:<relation>}\n\ttarget = ${2:<character>}\n\tflag = ${3:<flag>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a flag to an existing relation.",
        },
        {
        	"trigger": "add_reserved_gold",
        	"contents": "add_reserved_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add gold to 'reserved' AI budget category, respecting maximums, overflow goes into Short Term budget.",
        },
        {
        	"trigger": "add_scheme_cooldown",
        	"contents": "add_scheme_cooldown = {\n\ttype = ${1:<scheme_type>}\n\ttarget = ${2:<character>}\n\t${3:<days/weeks/months/years>} = ${4:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets a scheme cooldown for the scope character towards target character.",
        },
        {
        	"trigger": "add_secret",
        	"contents": "add_secret = {\n\ttype = ${1:<secret>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a secret.",
        },
        {
        	"trigger": "add_short_term_gold",
        	"contents": "add_short_term_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add gold to 'short term' AI budget category, respecting maximums, overflow goes into Short Term budget.",
        },
        {
        	"trigger": "add_stewardship_lifestyle_perk_points",
        	"contents": "add_stewardship_lifestyle_perk_points = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle per points to the given character.",
        },
        {
        	"trigger": "add_stewardship_lifestyle_xp",
        	"contents": "add_stewardship_lifestyle_xp = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds lifestyle XP to the given character.",
        },
        {
        	"trigger": "add_stress",
        	"contents": "add_stress = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Increases (or decreases) stress of a character.",
        },
        {
        	"trigger": "add_targeting_factions_discontent",
        	"contents": "add_targeting_factions_discontent = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds (or subtracts) discontent to all the factions that are targeting the scope character.",
        },
        {
        	"trigger": "add_to_activity",
        	"contents": "add_to_activity = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character is invited to and accepts an invitation to join the target activity, using their default travel plan.",
        },
        {
        	"trigger": "add_to_activity_without_travel",
        	"contents": "add_to_activity_without_travel = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character is invited to and accepts an invitation to join the target activity, without adding a travel plan.",
        },
        {
        	"trigger": "add_to_scheme",
        	"contents": "add_to_scheme = ${1:<scheme>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a character as an agent to the scheme.",
        },
        {
        	"trigger": "add_trait",
        	"contents": "add_trait = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a trait to a character.",
        },
        {
        	"trigger": "add_trait_force_tooltip",
        	"contents": "add_trait_force_tooltip = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a trait to a character - force tooltip.",
        },
        {
        	"trigger": "add_trait_xp",
        	"contents": "add_trait_xp = {\n\ttrait = ${1:<trait>}\n\tvalue = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds XP to the trait level track for the scoped character.",
        },
        {
        	"trigger": "add_trait_xp (track)",
        	"contents": "add_trait_xp = {\n\ttrait = ${1:<trait>}\n\ttrack = ${2:<track>}\n\tvalue = ${3:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds XP to the trait level track for the scoped character.",
        },
        {
        	"trigger": "add_truce_both_ways",
        	"contents": "add_truce_both_ways = {\n\tcharacter = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n\tname = ${4:<loc_key}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the both-way truce against the specified character.",
        },
        {
        	"trigger": "add_truce_one_way",
        	"contents": "add_truce_one_way = {\n\tcharacter = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n\tname = ${4:<loc_key}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the truce against the specified character.",
        },
        {
        	"trigger": "add_tyranny",
        	"contents": "add_tyranny = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds (or removes) tyranny to (or from) a character.",
        },
        {
        	"trigger": "add_unpressed_claim",
        	"contents": "add_unpressed_claim = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Gives an unpressed claim to a character.",
        },
        {
        	"trigger": "add_visiting_courtier",
        	"contents": "add_visiting_courtier = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add the target character as the scope character's guest.",
        },
        {
        	"trigger": "add_war_chest_gold",
        	"contents": "add_war_chest_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add gold to 'war chest' AI budget category, respecting maximums, overflow goes into Short Term budget.",
        },
        {
        	"trigger": "adopt",
        	"contents": "adopt = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set scoped character as parent ot the target.",
        },
        {
        	"trigger": "allow_alliance",
        	"contents": "allow_alliance = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Allows (previously broken) alliance with the target character.",
        },
        {
        	"trigger": "allow_in_scheme",
        	"contents": "allow_in_scheme = ${1:<scheme>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Allow the character to join the scheme as an agent.",
        },
        {
        	"trigger": "apply_ai_vassal_obligation_liege_most_desired",
        	"contents": "apply_ai_vassal_obligation_liege_most_desired = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Apply the new level for the most desired AI obligation level the liege in the contract wants.",
        },
        {
        	"trigger": "apply_ai_vassal_obligation_vassal_most_desired",
        	"contents": "apply_ai_vassal_obligation_vassal_most_desired = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Apply the new level for the most desired AI obligation level the vassal in the contract wants.",
        },
        {
        	"trigger": "appoint_court_position",
        	"contents": "appoint_court_position = {\n\trecipient = ${1:<character>}\n\tcourt_position = ${2:<court_position>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Appoints the target character in target court position within scoped character's court.",
        },
        {
        	"trigger": "assign_council_task",
        	"contents": "assign_council_task = {\n\tcouncil_task = ${1:<council_task>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Assigns the target character to the council task.",
        },
        {
        	"trigger": "assign_councillor_type",
        	"contents": "assign_councillor_type = {\n\ttype = ${1:<council_position>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Assigns the target character to a council position of a specific type.",
        },
        {
        	"trigger": "banish",
        	"contents": "banish = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character gets banished.",
        },
        {
        	"trigger": "becomes_independent",
        	"contents": "becomes_independent = {\n\tchange = ${1:<change>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Becomes an independent ruler.",
        },
        {
        	"trigger": "break_alliance",
        	"contents": "break_alliance = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Breaks the alliance with the target character.",
        },
        {
        	"trigger": "cancel_truce_both_ways",
        	"contents": "cancel_truce_both_ways = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Ends the truce against the specified character, and theirs against the scoped character.",
        },
        {
        	"trigger": "cancel_truce_one_way",
        	"contents": "cancel_truce_one_way = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Ends the truce against the specified character.",
        },
        {
        	"trigger": "change_age",
        	"contents": "change_age = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the character's age by the given amount.",
        },
        {
        	"trigger": "change_current_court_grandeur",
        	"contents": "change_current_court_grandeur = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the current court grandeur of a character with a royal court.",
        },
        {
        	"trigger": "change_current_weight",
        	"contents": "change_current_weight = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change the current weight of the scoped character.",
        },
        {
        	"trigger": "change_diarchy_swing",
        	"contents": "change_diarchy_swing = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change scales of power swing for the active diarchy.",
        },
        {
        	"trigger": "change_first_name",
        	"contents": "change_first_name = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change the first name of a character.",
        },
        {
        	"trigger": "change_government",
        	"contents": "change_government = ${1:<government>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the government of a character.",
        },
        {
        	"trigger": "change_liege",
        	"contents": "change_liege = {\n\tliege = ${1:<character>}\n\tchange = ${2:<change>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the liege of scoped character.",
        },
        {
        	"trigger": "change_prison_type",
        	"contents": "change_prison_type = ${1:<prison_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the charater's prison type. Scoped character is the prisoner.",
        },
        {
        	"trigger": "change_strife_opinion",
        	"contents": "change_strife_opinion = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change strife opinion caused by the scoped character.",
        },
        {
        	"trigger": "change_target_weight",
        	"contents": "change_target_weight = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change the target weight of the scoped character.",
        },
        {
        	"trigger": "change_trait_rank",
        	"contents": "change_trait_rank = {\n\ttrait = ${1:<trait>}\n\trank = ${2:<value>}\n\tmax = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the trait rank.",
        },
        {
        	"trigger": "clear_forced_vote",
        	"contents": "clear_forced_vote = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Clears forced voting.",
        },
        {
        	"trigger": "complete_activity_intent",
        	"contents": "complete_activity_intent = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Complete the scoped character's current intent in their involved activity.",
        },
        {
        	"trigger": "consume_banish_reasons",
        	"contents": "consume_banish_reasons = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "'Consume' all banish reasons that the scoped character has on the target character.",
        },
        {
        	"trigger": "consume_divorce_reasons",
        	"contents": "consume_divorce_reasons = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "'Consume' all divorce reason that the scoped character has on the target character.",
        },
        {
        	"trigger": "consume_execute_reasons",
        	"contents": "consume_execute_reasons = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "'Consume' all execute reasons that the scoped character has on the target character.",
        },
        {
        	"trigger": "consume_imprisonment_reasons",
        	"contents": "consume_imprisonment_reasons = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "'Consume' all imprisonment reasons that the scoped character has on the target character.",
        },
        {
        	"trigger": "consume_revoke_title_reason",
        	"contents": "consume_revoke_title_reason = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "'Consume' 1 revoke title reason that the scoped character has on the target character.",
        },
        {
        	"trigger": "copy_inheritable_appearance_from",
        	"contents": "copy_inheritable_appearance_from = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Copies the inheritable appearance attributes from the target character to the scoped character.",
        },
        {
        	"trigger": "copy_localized_text",
        	"contents": "copy_localized_text = {\n\tkey = ${1:<key>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Copies a piece of localized text from the target character for the given key.",
        },
        {
        	"trigger": "create_alliance",
        	"contents": "create_alliance = {\n\ttarget = ${1:<character>}\n\tallied_through_owner = ${2:<character>}\n\tallied_through_target = ${3:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Create an alliance between the scoped character and the target.",
        },
        {
        	"trigger": "create_artifact (all values)",
        	"contents": "create_artifact = {\n\tname = ${1:<loc_key>}\n\tdescription = ${2:<loc_key>}\n\trarity = ${3:<rarity>}\n\ttype = ${4:<type>}\n\tmodifier = ${5:<static_modifier>}\n\tdurability = ${6:<script_value>}\n\tmax_durability = ${7:<script_value>}\n\tdecaying = ${8:<yes/no>}\n\thistory = ${9:<artifact_history_entry>}\n\ttemplate = ${10:<scripted_artifact_template>}\n\tvisuals = ${11:<artifact_visuals>}\n\tgenerate_history = ${12:<yes/no>}\n\tquality = ${13:<script_value>}\n\twealth = ${14:<script_value>}\n\tcreator = ${15:<character>}\n\tvisuals_source = ${16:<landed_title/dynasty/house>}\n\tsave_scope_as = ${17:<scope>}\n\ttitle_history = ${18:<title>}\n\ttitle_history_date = ${19:<game_date>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Create an alliance between the scoped character and the target.",
        },
        {
        	"trigger": "create_cadet_branch",
        	"contents": "create_cadet_branch = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scope character creates a cadet branch of the house he is in.",
        },
        {
        	"trigger": "create_character_memory",
        	"contents": "create_character_memory = {\n\ttype = ${1:<memory_type>}\n\tparticipants = {\n\t\t\n\t}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a memory for the character of a given type and participants.",
        },
        {
        	"trigger": "create_divergent_culture",
        	"contents": "create_divergent_culture = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a new divergent culture from the scope character's culture.",
        },
        {
        	"trigger": "create_divergent_culture_with_side_effects",
        	"contents": "create_divergent_culture_with_side_effects = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a new divergent culture from the scope character's culture. Unlike create_divergent_culture, it will change ethos and such.",
        },
        {
        	"trigger": "create_divergent_culture_with_side_effects_excluding_cost",
        	"contents": "create_divergent_culture_with_side_effects_excluding_cost = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a new divergent culture from the scope character's culture. Unlike create_divergent_culture, it will change ethos and such.",
        },
        {
        	"trigger": "create_faction",
        	"contents": "create_faction = {\n\ttype = ${1:<faction_type>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Scoped character creates a faction of the specified type against the specified target.",
        },
        {
        	"trigger": "create_hybrid_culture",
        	"contents": "create_hybrid_culture = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a new hybrid culture from the scope character's culture and the RHS culture.",
        },
        {
        	"trigger": "create_hybrid_culture_with_side_effects",
        	"contents": "create_hybrid_culture_with_side_effects = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates a new hybrid culture from the scope character's culture and the RHS culture. This also incurs the cost, does conversion.",
        },
        {
        	"trigger": "create_inspiration",
        	"contents": "create_inspiration = ${1:<inspiration>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates an inspiration of a given type owned by scoped character.",
        },
        {
        	"trigger": "create_story",
        	"contents": "create_story = ${1:<story>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Creates and initializes a story cycle with the current character as owner.",
        },
        {
        	"trigger": "death",
        	"contents": "death = {\n\tdeath_reason = ${1:<death_reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Kills a character.",
        },
        {
        	"trigger": "death (killer)",
        	"contents": "death = {\n\tdeath_reason = ${1:<death_reason>}\n\tkiller = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Kills a character with a scoped killer.",
        },
        {
        	"trigger": "decline_activity_invite",
        	"contents": "decline_activity_invite = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character declines the invitation to the target activity.",
        },
        {
        	"trigger": "depose",
        	"contents": "depose = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character gets deposed.",
        },
        {
        	"trigger": "depose_diarch",
        	"contents": "depose_diarch = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Current scoped diarch is deposed and replaced with the next from the line of succession.",
        },
        {
        	"trigger": "designate_diarch",
        	"contents": "designate_diarch = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Designated target character as a future diarch.",
        },
        {
        	"trigger": "destroy_title",
        	"contents": "destroy_title = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Destroys a title.",
        },
        {
        	"trigger": "end_diarchy",
        	"contents": "end_diarchy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "End diarchy for the character.",
        },
        {
        	"trigger": "end_pregnancy",
        	"contents": "end_pregnancy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "End pregnancy.",
        },
        {
        	"trigger": "execute_decision",
        	"contents": "execute_decision = ${1:<decision>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Execute the specified decision for the scoped character.",
        },
        {
        	"trigger": "finish_council_task",
        	"contents": "finish_council_task = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The councillor finish the current assigned task successfully.",
        },
        {
        	"trigger": "fire_councillor",
        	"contents": "fire_councillor = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scope character fires the target character from the council.",
        },
        {
        	"trigger": "forbid_from_scheme",
        	"contents": "forbid_from_scheme = ${1:<scheme>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Forbid the scope character from joining the target scheme as an agent.",
        },
        {
        	"trigger": "force_add_to_scheme",
        	"contents": "force_add_to_scheme = {\n\tscheme = ${1:<scheme>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a character as an agent to the scheme and forces them to stay.",
        },
        {
        	"trigger": "force_character_skill_recalculation",
        	"contents": "force_character_skill_recalculation = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Forces a character's skills to be recalculated immediately, bypassing the wait for the daily tick.",
        },
        {
        	"trigger": "force_vote_as",
        	"contents": "force_vote_as = {\n\ttarget = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Forces the character to vote the same as the target.",
        },
        {
        	"trigger": "get_title",
        	"contents": "get_title = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Gives a title to a character.",
        },
        {
        	"trigger": "give_nickname",
        	"contents": "give_nickname = ${1:<nickname>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Give a nickname to the scoped character.",
        },
        {
        	"trigger": "imprison",
        	"contents": "imprison = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<imprisonment_type>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Imprisons the target character as this character's prisoner.",
        },
        {
        	"trigger": "invalidate_diarch_if_needed",
        	"contents": "invalidate_diarch_if_needed = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Immediately check if diarch should be invalidated.",
        },
        {
        	"trigger": "invite_to_activity",
        	"contents": "invite_to_activity = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character is invited to the target activity.",
        },
        {
        	"trigger": "join_faction",
        	"contents": "join_faction = ${1:<faction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character joins the assigned faction.",
        },
        {
        	"trigger": "join_faction_forced",
        	"contents": "join_faction_forced = {\n\tfaction = ${1:<faction>}\n\tforced_by = ${2:<character>}\n\t${3:<days/months/years>} = ${4:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character is forced to join a faction by a character for a defined time.",
        },
        {
        	"trigger": "join_faction_skip_check",
        	"contents": "join_faction_skip_check = ${1:<faction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character joins the assigned faction skiping the can_character_join trigger.",
        },
        {
        	"trigger": "learn_court_language_of",
        	"contents": "learn_court_language_of = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character learns the court language of the target character.",
        },
        {
        	"trigger": "learn_language",
        	"contents": "learn_language = ${1:<language>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character learns the language.",
        },
        {
        	"trigger": "learn_language_of_culture",
        	"contents": "learn_language_of_culture = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character learns the language of the target culture.",
        },
        {
        	"trigger": "leave_faction",
        	"contents": "leave_faction = ${1:<faction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character leaves the assigned faction.",
        },
        {
        	"trigger": "make_claim_strong",
        	"contents": "make_claim_strong = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes a claim strong (character adds the claim if not having it already).",
        },
        {
        	"trigger": "make_claim_weak",
        	"contents": "make_claim_weak = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes a claim weak (character adds the claim if not having it already).",
        },
        {
        	"trigger": "make_concubine",
        	"contents": "make_concubine = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes the target character a concubine of the scope character, the target should not be imprisoned.",
        },
        {
        	"trigger": "make_pregnant",
        	"contents": "make_pregnant = {\n\tfather = ${1:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes the scoped character pregnant.",
        },
        {
        	"trigger": "make_pregnant_no_checks",
        	"contents": "make_pregnant_no_checks = {\n\tfather = ${1:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes the scoped character pregnant. Doesn't error on things like celibacy.",
        },
        {
        	"trigger": "make_trait_active",
        	"contents": "make_trait_active = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Activates an inactive trait.",
        },
        {
        	"trigger": "make_trait_active_force_tooltip",
        	"contents": "make_trait_active_force_tooltip = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Activates an inactive trait. Tooltip will be shown even if the character cannot have the trait.",
        },
        {
        	"trigger": "make_trait_inactive",
        	"contents": "make_trait_inactive = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes a current trait of the scoped character inactive.",
        },
        {
        	"trigger": "make_trait_inactive_force_tooltip",
        	"contents": "make_trait_inactive_force_tooltip = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes a current trait of the scoped character inactive. Tooltip will be shown even if the character doesn't have the trait.",
        },
        {
        	"trigger": "make_unprunable",
        	"contents": "make_unprunable = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scope character will no longer be prunable after their death.",
        },
        {
        	"trigger": "marry",
        	"contents": "marry = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Marries the scoped character to the target character.",
        },
        {
        	"trigger": "marry_matrilineal",
        	"contents": "marry_matrilineal = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Marries the scoped character to the target character matrilineally.",
        },
        {
        	"trigger": "move_budget_gold",
        	"contents": "move_budget_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Move gold from one AI budget category to the other, will not move more than is available in the source budget or what can fit in the target budget.",
        },
        {
        	"trigger": "move_to_pool",
        	"contents": "move_to_pool = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character (courtier or guest) leaves their current court and moves into the pool.",
        },
        {
        	"trigger": "move_to_pool_at",
        	"contents": "move_to_pool_at = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character (courtier/guest/pool character) leaves their current court (if any) and moves into the pool of the specified province.",
        },
        {
        	"trigger": "open_appoint_court_position_window",
        	"contents": "open_appoint_court_position_window = ${1:<court_position>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Opens the appointment window for the specified court position with scoped character as liege.",
        },
        {
        	"trigger": "pay_long_term_gold",
        	"contents": "pay_long_term_gold = {\n\ttarget = ${1:<character>}\n\tgold = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character pays gold to the target character.",
        },
        {
        	"trigger": "pay_long_term_income",
        	"contents": "pay_long_term_income = {\n\ttarget = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character immediately pays gold corresponding to their income to the target character.",
        },
        {
        	"trigger": "pay_reserved_gold",
        	"contents": "pay_reserved_gold = {\n\ttarget = ${1:<character>}\n\tgold = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character pays gold to the target character.",
        },
        {
        	"trigger": "pay_reserved_income",
        	"contents": "pay_reserved_income = {\n\ttarget = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character immediately pays gold corresponding to their income to the target character.",
        },
        {
        	"trigger": "pay_short_term_gold",
        	"contents": "pay_short_term_gold = {\n\ttarget = ${1:<character>}\n\tgold = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character pays gold to the target character.",
        },
        {
        	"trigger": "pay_short_term_income",
        	"contents": "pay_short_term_income = {\n\ttarget = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character immediately pays gold corresponding to their income to the target character.",
        },
        {
        	"trigger": "pay_war_chest_gold",
        	"contents": "pay_war_chest_gold = {\n\ttarget = ${1:<character>}\n\tgold = ${2:<script_value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character pays gold to the target character.",
        },
        {
        	"trigger": "pay_war_chest_income",
        	"contents": "pay_war_chest_income = {\n\ttarget = ${1:<character>}\n\t${2:<days/months/years>} = ${3:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character immediately pays gold corresponding to their income to the target character.",
        },
        {
        	"trigger": "play_music_cue",
        	"contents": "play_music_cue = ${1:<music_cue>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Plays the specified music cue.",
        },
        {
        	"trigger": "play_sound_effect",
        	"contents": "play_sound_effect = ${1:<sound_effect>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Plays the specified sound effect.",
        },
        {
        	"trigger": "recruit_courtier",
        	"contents": "recruit_courtier = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Recruits the target to become a courtier.",
        },
        {
        	"trigger": "refund_all_perks",
        	"contents": "refund_all_perks = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Refunds all perks of the character.",
        },
        {
        	"trigger": "refund_perks",
        	"contents": "refund_perks = ${1:<lifestyle>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Refunds all perks of the RHS lifestyle.",
        },
        {
        	"trigger": "release_from_prison",
        	"contents": "release_from_prison = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Releases the character from the prison.",
        },
        {
        	"trigger": "remove_character_flag",
        	"contents": "remove_character_flag = ${1:<flag>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a character flag.",
        },
        {
        	"trigger": "remove_claim",
        	"contents": "remove_claim = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes an explicit (not from a living parent/grand parent) claim.",
        },
        {
        	"trigger": "remove_concubine",
        	"contents": "remove_concubine = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes the target character as a concubine of the scoped character.",
        },
        {
        	"trigger": "remove_courtier_or_guest",
        	"contents": "remove_courtier_or_guest = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes the target character (guest or courtier) from the scoped character's court.",
        },
        {
        	"trigger": "remove_decision_cooldown",
        	"contents": "remove_decision_cooldown = ${1:<decision>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Remove the cooldown on taking a decision for the scoped character.",
        },
        {
        	"trigger": "remove_from_activity",
        	"contents": "remove_from_activity = ${1:<activity>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character is removed from the target activity.",
        },
        {
        	"trigger": "remove_hook",
        	"contents": "remove_hook = {\n\ttarget = ${1:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a hook on a character.",
        },
        {
        	"trigger": "remove_hook (type)",
        	"contents": "remove_hook = {\n\ttarget = ${1:<character>}\n\ttype = ${2:<type>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a hook on a character.",
        },
        {
        	"trigger": "remove_interaction_cooldown",
        	"contents": "remove_interaction_cooldown = ${1:<interaction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Remove the cooldown on using an interaction for the scoped character.",
        },
        {
        	"trigger": "remove_interaction_cooldown_against",
        	"contents": "remove_interaction_cooldown_against = {\n\tinteraction = ${1:<interaction>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Remove the cooldown on using an interaction against the target character for the scoped character.",
        },
        {
        	"trigger": "remove_localized_text",
        	"contents": "remove_localized_text = ${1:<key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a piece of localized text from being stored on the character with a given key.",
        },
        {
        	"trigger": "remove_long_term_gold",
        	"contents": "remove_long_term_gold = gold\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes gold from a character.",
        },
        {
        	"trigger": "remove_nickname",
        	"contents": "remove_nickname = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes any nickname from the current character.",
        },
        {
        	"trigger": "remove_opinion",
        	"contents": "remove_opinion = {\n\ttarget = ${1:<character>}\n\tmodifier = ${2:<modifier>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a temporary opinion modifier.",
        },
        {
        	"trigger": "remove_perk",
        	"contents": "remove_perk = ${1:<perk>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Remove the perk for this character.",
        },
        {
        	"trigger": "remove_personal_artifact_claim",
        	"contents": "remove_personal_artifact_claim = ${1:<artifact>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a personal claim on the target artifact from the scoped character.",
        },
        {
        	"trigger": "remove_realm_law",
        	"contents": "remove_realm_law = ${1:<law>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes the given law from the scoped character.",
        },
        {
        	"trigger": "remove_relation_activity_recurrer",
        	"contents": "remove_relation_activity_recurrer = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_antiquarian",
        	"contents": "remove_relation_antiquarian = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_best_friend",
        	"contents": "remove_relation_best_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_bully",
        	"contents": "remove_relation_bully = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_court_physician",
        	"contents": "remove_relation_court_physician = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_crush",
        	"contents": "remove_relation_crush = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_flag",
        	"contents": "remove_relation_flag = {\n\ttarget = ${1:<character>}\n\trelation = ${2:<relation>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removed a flag from an existing relation.",
        },
        {
        	"trigger": "remove_relation_friend",
        	"contents": "remove_relation_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_guardian",
        	"contents": "remove_relation_guardian = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_intrigue_mentor",
        	"contents": "remove_relation_intrigue_mentor = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_intrigue_student",
        	"contents": "remove_relation_intrigue_student = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_lover",
        	"contents": "remove_relation_lover = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_mentor",
        	"contents": "remove_relation_mentor = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_nemesis",
        	"contents": "remove_relation_nemesis = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_nursed_child",
        	"contents": "remove_relation_nursed_child = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_oaf",
        	"contents": "remove_relation_oaf = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_potential_friend",
        	"contents": "remove_relation_potential_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_potential_hook",
        	"contents": "remove_relation_potential_hook = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_potential_lover",
        	"contents": "remove_relation_potential_lover = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_potential_rival",
        	"contents": "remove_relation_potential_rival = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_rival",
        	"contents": "remove_relation_rival = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_soldier_friend",
        	"contents": "remove_relation_soldier_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_soulmate",
        	"contents": "remove_relation_soulmate = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_student",
        	"contents": "remove_relation_student = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_victim",
        	"contents": "remove_relation_victim = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_ward",
        	"contents": "remove_relation_ward = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_wedding_bad_fertility",
        	"contents": "remove_relation_wedding_bad_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_wedding_good_fertility",
        	"contents": "remove_relation_wedding_good_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_wedding_very_bad_fertility",
        	"contents": "remove_relation_wedding_very_bad_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_wedding_very_good_fertility",
        	"contents": "remove_relation_wedding_very_good_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_relation_wet_nurse",
        	"contents": "remove_relation_wet_nurse = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "All"],
        	"details": "Removes scripted relationship.",
        },
        {
        	"trigger": "remove_reserved_gold",
        	"contents": "remove_reserved_gold = gold\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes gold from a character.",
        },
        {
        	"trigger": "remove_scheme_cooldown_against",
        	"contents": "remove_scheme_cooldown_against = {\n\tscheme = ${1:<scheme>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Remove the cooldown on using a scheme against the target character for the scoped character.",
        },
        {
        	"trigger": "remove_short_term_gold",
        	"contents": "remove_short_term_gold = gold\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes gold from a character.",
        },
        {
        	"trigger": "remove_trait",
        	"contents": "remove_trait = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a trait from a character.",
        },
        {
        	"trigger": "remove_trait_force_tooltip",
        	"contents": "remove_trait_force_tooltip = ${1:<trait>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes a trait from a character. Tooltip will be shown even if the character doesn't have the trait.",
        },
        {
        	"trigger": "remove_war_chest_gold",
        	"contents": "remove_war_chest_gold = gold\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Removes gold from a character.",
        },
        {
        	"trigger": "replace_court_position",
        	"contents": "replace_court_position = {\n\trecipient = ${1:<character>}\n\tholder = ${2:<character>}\n\tcourt_position = ${3:<court_position>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Replaces the target character holding target court position within scoped character's court with target character.",
        },
        {
        	"trigger": "reset_beneficiary",
        	"contents": "reset_beneficiary = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The target character stops having a beneficiary.",
        },
        {
        	"trigger": "return_hostage",
        	"contents": "return_hostage = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Release scoped character from hostage and return to home court.",
        },
        {
        	"trigger": "return_to_court",
        	"contents": "return_to_court = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Returns the scope character to the employers court.",
        },
        {
        	"trigger": "reverse_add_opinion",
        	"contents": "reverse_add_opinion = {\n\tmodifier = ${1:<opinion_modifier>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Adds a temporary reverse opinion modifier.",
        },
        {
        	"trigger": "revoke_court_position",
        	"contents": "revoke_court_position = ${1:<court_position>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Revokes target position from scoped character.",
        },
        {
        	"trigger": "send_interface_message",
        	"contents": "send_interface_message = {\n\ttype = ${1:<type>}\n\ttitle = ${2:<loc_key>}\n\tdesc = ${3:<loc_key>}\n\tleft_icon = ${4:<character/artifact/title>}\n\tright_icon = ${5:<character/artifact/title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sends a message to the player playing the character in the scope and then executes any effects inside.",
        },
        {
        	"trigger": "send_interface_toast",
        	"contents": "send_interface_toast = {\n\ttype = ${1:<type>}\n\ttitle = ${2:<loc_key>}\n\tdesc = ${3:<loc_key>}\n\tleft_icon = ${4:<character/artifact/title>}\n\tright_icon = ${5:<character/artifact/title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sends a message to the player playing the character in the scope and then executes any effects inside.",
        },
        {
        	"trigger": "set_absolute_country_control",
        	"contents": "set_absolute_country_control = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets if this character has absolute country control.",
        },
        {
        	"trigger": "set_age",
        	"contents": "set_age = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the character's age.",
        },
        {
        	"trigger": "set_amenity_level",
        	"contents": "set_amenity_level = {\n\ttype = ${1:<amenity>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the amenity type to the given value for the scoped character.",
        },
        {
        	"trigger": "set_beneficiary",
        	"contents": "set_beneficiary = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The target character becomes the beneficiary of the scoped character.",
        },
        {
        	"trigger": "set_character_faith",
        	"contents": "set_character_faith = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes what faith a character has executing the effects for it.",
        },
        {
        	"trigger": "set_character_faith_history",
        	"contents": "set_character_faith_history = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes what faith a character has NOT executing the effects for it.",
        },
        {
        	"trigger": "set_character_faith_with_conversion",
        	"contents": "set_character_faith_with_conversion = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes what faith a character has, as if they used the faith-view interaction.",
        },
        {
        	"trigger": "set_child_of_concubine_on_pregnancy",
        	"contents": "set_child_of_concubine_on_pregnancy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the child to be (or not be) a child of a concubine during pregnancy.",
        },
        {
        	"trigger": "set_council_task",
        	"contents": "set_council_task = {\n\ttask_type = ${1:<council_position>}\n\ttarget = ${2:<target_task>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the task of the scope councillor.",
        },
        {
        	"trigger": "set_court_language",
        	"contents": "set_court_language = ${1:<language>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the character's court language to the given language.",
        },
        {
        	"trigger": "set_court_type",
        	"contents": "set_court_type = ${1:<court_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the court type for this character's royal court.",
        },
        {
        	"trigger": "set_culture",
        	"contents": "set_culture = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the culture for this character.",
        },
        {
        	"trigger": "set_culture_same_as",
        	"contents": "set_culture_same_as = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the culture of the character to be the same as the culture of the target.",
        },
        {
        	"trigger": "set_current_court_grandeur",
        	"contents": "set_current_court_grandeur = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the current court grandeur of a character with a royal court.",
        },
        {
        	"trigger": "set_death_reason",
        	"contents": "set_death_reason = {\n\tdeath_reason = ${1:<death_reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the death reason.",
        },
        {
        	"trigger": "set_death_reason (killer)",
        	"contents": "set_death_reason = {\n\tdeath_reason = ${1:<death_reason>}\n\tkiller = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the death reason and a killer.",
        },
        {
        	"trigger": "set_default_education",
        	"contents": "set_default_education = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the default education focus for this character.",
        },
        {
        	"trigger": "set_designated_heir",
        	"contents": "set_designated_heir = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the given character as designated heir.",
        },
        {
        	"trigger": "set_diarch",
        	"contents": "set_diarch = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set target character as new diarch. Requires an active diarchy.",
        },
        {
        	"trigger": "set_diarchy_mandate",
        	"contents": "set_diarchy_mandate = ${1:<mandate_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set mandate for the diarch.",
        },
        {
        	"trigger": "set_diarchy_swing",
        	"contents": "set_diarchy_swing = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set scales of power swing for the active diarchy.",
        },
        {
        	"trigger": "set_diarchy_type",
        	"contents": "set_diarchy_type = ${1:<diarchy_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set diarthy type for the character.",
        },
        {
        	"trigger": "set_employer",
        	"contents": "set_employer = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add the scope character to the target character's court.",
        },
        {
        	"trigger": "set_father",
        	"contents": "set_father = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the father of a character.",
        },
        {
        	"trigger": "set_focus",
        	"contents": "set_focus = ${1:<focus>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the focus for this character.",
        },
        {
        	"trigger": "set_house",
        	"contents": "set_house = ${1:<house>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the dynasty house of the character.",
        },
        {
        	"trigger": "set_immortal_age",
        	"contents": "set_immortal_age = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes what age the character became immortal at.",
        },
        {
        	"trigger": "set_killer_public",
        	"contents": "set_killer_public = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the scoped character's killer as being publicly known.",
        },
        {
        	"trigger": "set_knight_status",
        	"contents": "set_knight_status = ${1:<force/forbid>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the knight status of the character to Forced/Default/Disallowed.",
        },
        {
        	"trigger": "set_known_bastard_on_pregnancy",
        	"contents": "set_known_bastard_on_pregnancy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the child to a known or unknown bastard during pregnancy.",
        },
        {
        	"trigger": "set_location",
        	"contents": "set_location = ${1:<province>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Moves the character to a specific location.",
        },
        {
        	"trigger": "set_location_to_default",
        	"contents": "set_location_to_default = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Moves the character to its 'default' location.",
        },
        {
        	"trigger": "set_mother",
        	"contents": "set_mother = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the mother of a character.",
        },
        {
        	"trigger": "set_num_pregnancy_children",
        	"contents": "set_num_pregnancy_children = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the number of children.",
        },
        {
        	"trigger": "set_override_designated_winner",
        	"contents": "set_override_designated_winner = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scoped character will put their beneficiary on the throne.",
        },
        {
        	"trigger": "set_player_character",
        	"contents": "set_player_character = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The scope character's player will now play as the target character.",
        },
        {
        	"trigger": "set_pregnancy_assumed_father",
        	"contents": "set_pregnancy_assumed_father = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the assumed father of the pregnancy.",
        },
        {
        	"trigger": "set_primary_spouse",
        	"contents": "set_primary_spouse = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the primary spouse of a character.",
        },
        {
        	"trigger": "set_primary_title_to",
        	"contents": "set_primary_title_to = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the primary title for a character.",
        },
        {
        	"trigger": "set_real_father",
        	"contents": "set_real_father = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the real father of the character scope.",
        },
        {
        	"trigger": "set_real_mother",
        	"contents": "set_real_mother = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Changes the real mother of the scoped character.",
        },
        {
        	"trigger": "set_realm_capital",
        	"contents": "set_realm_capital = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set a new realm capital.",
        },
        {
        	"trigger": "set_relation_activity_recurrer",
        	"contents": "set_relation_activity_recurrer = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_activity_recurrer (reason)",
        	"contents": "set_relation_activity_recurrer = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_antiquarian",
        	"contents": "set_relation_antiquarian = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_antiquarian (reason)",
        	"contents": "set_relation_antiquarian = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_best_friend",
        	"contents": "set_relation_best_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_best_friend (reason)",
        	"contents": "set_relation_best_friend = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_bully",
        	"contents": "set_relation_bully = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_bully (reason)",
        	"contents": "set_relation_bully = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_court_physician",
        	"contents": "set_relation_court_physician = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_court_physician (reason)",
        	"contents": "set_relation_court_physician = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_crush",
        	"contents": "set_relation_crush = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_crush (reason)",
        	"contents": "set_relation_crush = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_friend",
        	"contents": "set_relation_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_friend (reason)",
        	"contents": "set_relation_friend = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_guardian",
        	"contents": "set_relation_guardian = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_guardian (reason)",
        	"contents": "set_relation_guardian = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_intrigue_mentor",
        	"contents": "set_relation_intrigue_mentor = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_intrigue_mentor (reason)",
        	"contents": "set_relation_intrigue_mentor = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_intrigue_student",
        	"contents": "set_relation_intrigue_student = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_intrigue_student (reason)",
        	"contents": "set_relation_intrigue_student = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_lover",
        	"contents": "set_relation_lover = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_lover (reason)",
        	"contents": "set_relation_lover = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_mentor",
        	"contents": "set_relation_mentor = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_mentor (reason)",
        	"contents": "set_relation_mentor = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_nemesis",
        	"contents": "set_relation_nemesis = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_nemesis (reason)",
        	"contents": "set_relation_nemesis = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_nursed_child",
        	"contents": "set_relation_nursed_child = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_nursed_child (reason)",
        	"contents": "set_relation_nursed_child = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_oaf",
        	"contents": "set_relation_oaf = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_oaf (reason)",
        	"contents": "set_relation_oaf = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_potential_friend",
        	"contents": "set_relation_potential_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_potential_friend (reason)",
        	"contents": "set_relation_potential_friend = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_potential_hook",
        	"contents": "set_relation_potential_hook = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_potential_hook (reason)",
        	"contents": "set_relation_potential_hook = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_potential_lover",
        	"contents": "set_relation_potential_lover = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_potential_lover (reason)",
        	"contents": "set_relation_potential_lover = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_potential_rival",
        	"contents": "set_relation_potential_rival = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_potential_rival (reason)",
        	"contents": "set_relation_potential_rival = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_rival",
        	"contents": "set_relation_rival = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_rival (reason)",
        	"contents": "set_relation_rival = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_soldier_friend",
        	"contents": "set_relation_soldier_friend = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_soldier_friend (reason)",
        	"contents": "set_relation_soldier_friend = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_soulmate",
        	"contents": "set_relation_soulmate = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_soulmate (reason)",
        	"contents": "set_relation_soulmate = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_student",
        	"contents": "set_relation_student = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_student (reason)",
        	"contents": "set_relation_student = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_victim",
        	"contents": "set_relation_victim = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_victim (reason)",
        	"contents": "set_relation_victim = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_ward",
        	"contents": "set_relation_ward = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_ward (reason)",
        	"contents": "set_relation_ward = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_wedding_bad_fertility",
        	"contents": "set_relation_wedding_bad_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_wedding_bad_fertility (reason)",
        	"contents": "set_relation_wedding_bad_fertility = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_wedding_good_fertility",
        	"contents": "set_relation_wedding_good_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_wedding_good_fertility (reason)",
        	"contents": "set_relation_wedding_good_fertility = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_wedding_very_bad_fertility",
        	"contents": "set_relation_wedding_very_bad_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_wedding_very_bad_fertility (reason)",
        	"contents": "set_relation_wedding_very_bad_fertility = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_wedding_very_good_fertility",
        	"contents": "set_relation_wedding_very_good_fertility = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_wedding_very_good_fertility (reason)",
        	"contents": "set_relation_wedding_very_good_fertility = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_relation_wet_nurse",
        	"contents": "set_relation_wet_nurse = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship.",
        },
        {
        	"trigger": "set_relation_wet_nurse (reason)",
        	"contents": "set_relation_wet_nurse = {\n\ttarget = ${1:<character>}\n\treason = ${2:<reason>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets scripted relationship, with a reason.",
        },
        {
        	"trigger": "set_reserved_gold_maximum",
        	"contents": "set_reserved_gold_maximum = ${1:<value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the maximum (and also desired value) for the 'reserved' gold AI budget.",
        },
        {
        	"trigger": "set_sexuality",
        	"contents": "set_sexuality = ${1:<sexuality>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the sexuality of the character.",
        },
        {
        	"trigger": "set_to_lowborn",
        	"contents": "set_to_lowborn = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Set the character to lowborn.",
        },
        {
        	"trigger": "set_trait_rank",
        	"contents": "set_trait_rank = {\n\ttrait = ${1:<trait_group>}\n\trank = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the trait rank.",
        },
        {
        	"trigger": "set_vassal_contract_modification_blocked",
        	"contents": "set_vassal_contract_modification_blocked = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Blocks the vassal contract from being modified with regards to being checked by 'vassal_contract_is_blocked_from_modification'.",
        },
        {
        	"trigger": "spawn_army (all values)",
        	"contents": "spawn_army = {\n\tlevies = ${1:<script_value>}\n\tmen_at_arms = {\n\t\ttype = ${2:<key>}\n\t\t${3:<men/stacks>} = ${4:<script_value>}\n\t}\n\tlocation = ${5:<province>}\n\torigin = ${6:<province>}\n\twar = ${7:<war>}\n\twar_keep_on_attacker_victory = ${8:<yes/no>}\n\tinheritable = ${9:<yes/no>}\n\tuses_supply = ${10:<yes/no>}\n\tarmy = ${11:<army>}\n\tsave_scope_as = ${12:<scope>}\n\tname = ${13:<loc_key>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Spawns an army for this character. If the character is not at war, the regiments will be created, but the army will not be spawned.",
        },
        {
        	"trigger": "sponsor_inspiration",
        	"contents": "sponsor_inspiration = ${1:<inspiration>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Sets the sponsor of the target inspiration to the scoped character.",
        },
        {
        	"trigger": "start_default_task",
        	"contents": "start_default_task = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Force the Councillor to revert to the default task.",
        },
        {
        	"trigger": "start_diarchy",
        	"contents": "start_diarchy = ${1:<diarchy_type>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Start diarchy for the character.",
        },
        {
        	"trigger": "start_scheme",
        	"contents": "start_scheme = {\n\ttype = ${1:<scheme_type>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Starts a scheme.",
        },
        {
        	"trigger": "start_travel_plan (all values)",
        	"contents": "start_travel_plan = {\n\tdestination = ${1:<province>}\n\ttravel_leader = ${2:<character>}\n\tcompanion = ${3:<character>}\n\tplayers_use_planner = ${4:<yes/no>}\n\treturn_trip = ${5:<yes/no>}\n\ton_arrival_event = ${6:<event_id>}\n\ton_arrival_on_action = ${7:<on_action>}\n\ton_start_event = ${8:<event_id>}\n\ton_start_on_action = ${9:<on_action>}\n\ton_travel_planner_cancel_event = ${10:<event_id>}\n\ton_travel_planner_cancel_on_action = ${11:<on_action>}\n\ton_arrival_destinations = ${12:<all/first/last/all_but_last>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Start a travel plan.",
        },
        {
        	"trigger": "start_war",
        	"contents": "start_war = {\n\tcb = ${1:<casus_belli>}\n\ttarget = ${2:<character>}\n\ttarget_title = ${3:<title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Starts a war.",
        },
        {
        	"trigger": "store_localized_text_in_death",
        	"contents": "store_localized_text_in_death = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Makes a piece of localized text with the given key be stored on the character even after death.",
        },
        {
        	"trigger": "stress_impact",
        	"contents": "stress_impact = {\n\tbase = ${1:<value>}\n\t${2:<trait>} = ${3:<value>}\n\t${4:<trait>} = ${5:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Stress impact according to specified traits.",
        },
        {
        	"trigger": "take_hostage",
        	"contents": "take_hostage = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Take target character as a hostage.",
        },
        {
        	"trigger": "unlearn_court_language_of",
        	"contents": "unlearn_court_language_of = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character unlearns the court language of the target character.",
        },
        {
        	"trigger": "unlearn_language",
        	"contents": "unlearn_language = ${1:<language>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character unlearns the language.",
        },
        {
        	"trigger": "unlearn_language_of_culture",
        	"contents": "unlearn_language_of_culture = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character unlearns the language of the target culture.",
        },
        {
        	"trigger": "use_hook",
        	"contents": "use_hook = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "The character unlearns the language of the target culture.",
        },
        {
        	"trigger": "vassal_contract_decrease_obligation_level",
        	"contents": "vassal_contract_decrease_obligation_level = ${1:<vassal_contract>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Decrease the obligation level of the scoped character's vassal contract.",
        },
        {
        	"trigger": "vassal_contract_increase_obligation_level",
        	"contents": "vassal_contract_increase_obligation_level = ${1:<vassal_contract>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Increase the obligation level of the scoped character's vassal contract.",
        },
        {
        	"trigger": "vassal_contract_set_obligation_level",
        	"contents": "vassal_contract_set_obligation_level = {\n\ttype = ${1:<vassal_contract>}\n\tlevel = ${2:<obligation_level/scope>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Change the obligation level of the scoped character's vassal contract.",
        },
        {
        	"trigger": "visit_court_of",
        	"contents": "visit_court_of = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Character"],
        	"details": "Add the scope character as the target character's guest.",
        },
        {
        	"trigger": "change_county_control",
        	"contents": "change_county_control = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Changes the county control of a title.",
        },
        {
        	"trigger": "change_de_jure_drift_progress",
        	"contents": "change_de_jure_drift_progress = {\n\ttarget = ${1:<title>}\n\tvalue = ${2:<value>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Change the progress of de jure drift of a title.",
        },
        {
        	"trigger": "change_development_level",
        	"contents": "change_development_level = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Changes the development level of a title.",
        },
        {
        	"trigger": "change_development_progress",
        	"contents": "change_development_progress = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Changes the development progress of a title.",
        },
        {
        	"trigger": "change_development_progress_with_overflow",
        	"contents": "change_development_progress_with_overflow = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Changes the development progress of a title - will overflow.",
        },
        {
        	"trigger": "clear_title_laws",
        	"contents": "clear_title_laws = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Remove all title laws from the scoped title.",
        },
        {
        	"trigger": "clear_title_laws_effects",
        	"contents": "clear_title_laws_effects = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Remove all title laws from the scoped title - with effects.",
        },
        {
        	"trigger": "copy_title_history",
        	"contents": "copy_title_history = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Copy title history from another title.",
        },
        {
        	"trigger": "lease_out_to",
        	"contents": "lease_out_to = ${1:<holy_order>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Lease out the scoped title.",
        },
        {
        	"trigger": "reset_title_name",
        	"contents": "reset_title_name = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the name and adjective of the scoped title back to being based on its key.",
        },
        {
        	"trigger": "reset_title_prefix",
        	"contents": "reset_title_prefix = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the prefix of the scoped title back to being based on its key.",
        },
        {
        	"trigger": "revoke_lease",
        	"contents": "revoke_lease = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Revoke the lease of the scoped title.",
        },
        {
        	"trigger": "set_always_follows_primary_heir",
        	"contents": "set_always_follows_primary_heir = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should always go to the primary heir in partition succession.",
        },
        {
        	"trigger": "set_can_be_named_after_dynasty",
        	"contents": "set_can_be_named_after_dynasty = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title can be named after it's holder's dynasty.",
        },
        {
        	"trigger": "set_capital_barony",
        	"contents": "set_capital_barony = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets scoped barony to be the county capital.",
        },
        {
        	"trigger": "set_capital_county",
        	"contents": "set_capital_county = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the capital county of the title to the target county.",
        },
        {
        	"trigger": "set_color_from_title",
        	"contents": "set_color_from_title = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the color of the title to the same as the target title.",
        },
        {
        	"trigger": "set_county_culture",
        	"contents": "set_county_culture = ${1:<culture>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the culture of a county.",
        },
        {
        	"trigger": "set_county_faith",
        	"contents": "set_county_faith = ${1:<faith>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Changes what faith a county has.",
        },
        {
        	"trigger": "set_de_jure_liege_title",
        	"contents": "set_de_jure_liege_title = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Set a new DeJure liege title.",
        },
        {
        	"trigger": "set_definitive_form",
        	"contents": "set_definitive_form = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should use a definitive form name.",
        },
        {
        	"trigger": "set_delete_on_destroy",
        	"contents": "set_delete_on_destroy = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should be deleted from the gamestate completely when it is destroyed.",
        },
        {
        	"trigger": "set_destroy_if_invalid_heir",
        	"contents": "set_destroy_if_invalid_heir = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should be destroyed on succession if there's no heir matching its restrictions.",
        },
        {
        	"trigger": "set_destroy_on_gain_same_tier",
        	"contents": "set_destroy_on_gain_same_tier = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should be deleted from the gamestate completely when character gains or create a new title with the same tier.",
        },
        {
        	"trigger": "set_destroy_on_succession",
        	"contents": "set_destroy_on_succession = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should be destroyed on succession.",
        },
        {
        	"trigger": "set_landless_title",
        	"contents": "set_landless_title = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title is landless.",
        },
        {
        	"trigger": "set_no_automatic_claims",
        	"contents": "set_no_automatic_claims = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets if the title should disallow automatic claims.",
        },
        {
        	"trigger": "set_title_name",
        	"contents": "set_title_name = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the name (localization key) of the scoped title.",
        },
        {
        	"trigger": "set_title_prefix",
        	"contents": "set_title_prefix = ${1:<loc_key>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Sets the prefix of the scoped title.",
        },
        {
        	"trigger": "title_create_faction",
        	"contents": "title_create_faction = {\n\ttype = ${1:<faction>}\n\ttarget = ${2:<character>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Scoped landed title creates a faction of the specified type against the specified target.",
        },
        {
        	"trigger": "title_join_faction",
        	"contents": "title_join_faction = ${1:<faction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Scoped title joins the assigned faction.",
        },
        {
        	"trigger": "title_leave_faction",
        	"contents": "title_leave_faction = ${1:<faction>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Scoped title leaves the assigned faction.",
        },
        {
        	"trigger": "update_dynamic_coa",
        	"contents": "update_dynamic_coa = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Title"],
        	"details": "Updates the dynamic coat of arms definition.",
        },
        {
        	"trigger": "add_faction_discontent",
        	"contents": "add_faction_discontent = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Adds/subtracts discontent to/from the scoped faction.",
        },
        {
        	"trigger": "destroy_faction",
        	"contents": "destroy_faction = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Scoped faction is destroyed.",
        },
        {
        	"trigger": "faction_remove_war",
        	"contents": "faction_remove_war = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Removes the war currently associated with the faction.",
        },
        {
        	"trigger": "faction_start_war",
        	"contents": "faction_start_war = {}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Scoped faction starts the war agains their target.",
        },
        {
        	"trigger": "faction_start_war (title)",
        	"contents": "faction_start_war = {\n\ttitle = ${1:<title>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Scoped faction starts the war agains their target.",
        },
        {
        	"trigger": "remove_special_character",
        	"contents": "remove_special_character = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Removes the special character for the scope faction.",
        },
        {
        	"trigger": "remove_special_title",
        	"contents": "remove_special_title = yes\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Removes the special title for the scope faction.",
        },
        {
        	"trigger": "set_special_character",
        	"contents": "set_special_character = ${1:<character>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Sets the special character for the scope faction.",
        },
        {
        	"trigger": "set_special_title",
        	"contents": "set_special_title = ${1:<title>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Faction"],
        	"details": "Sets the special title for the scope faction.",
        },
        {
        	"trigger": "battle_event",
        	"contents": "battle_event = {\n\tkey = ${1:<loc_key>}\n\tleft_portrait = ${2:<character>}\n\tright_portrait = ${3:<character>}\n\ttype = ${4:<type>}\n}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Combat Side"],
        	"details": "Makes a battle event show up in combat, and the combat result summary.",
        },
        {
        	"trigger": "change_inspiration_progress",
        	"contents": "change_inspiration_progress = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Inspiration"],
        	"details": "Changes the progress of the scoped inspiration.",
        },
        {
        	"trigger": "invest_gold",
        	"contents": "invest_gold = ${1:<script_value>}\n",
        	"annotation": "Effect",
        	"kind": ["function", "E", "Inspiration"],
        	"details": "Invests gold into the scoped inspiration from its sponsor.",
        },
   ]
}
