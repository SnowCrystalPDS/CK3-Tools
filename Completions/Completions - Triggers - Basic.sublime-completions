{
   "scope": "text.pdx",

   "completions":
   [
        {
        	"trigger": "exists",
        	"contents": "exists = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the specified scope target exists (check for not being the null object).",
        },
        {
        	"trigger": "always",
        	"contents": "always = ${1:<yes/no>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks if the assigned yes/no value is true.",
        },
        {
        	"trigger": "and",
        	"contents": "AND = {\n\t${1:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "All inside trigger must be true.",
        },
        {
        	"trigger": "nand",
        	"contents": "NAND = {\n\t${1:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "A negated AND trigger.",
        },
        {
        	"trigger": "nor",
        	"contents": "NOR = {\n\t${1:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "A negated OR trigger.",
        },
        {
        	"trigger": "not",
        	"contents": "NOT = {\n\t${1:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Negates content of trigger.",
        },
        {
        	"trigger": "or",
        	"contents": "OR = {\n\t${1:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "At least one entry inside trigger must be true.",
        },
        {
        	"trigger": "trigger_if",
        	"contents": "trigger_if = {\n\tlimit = {\n\t\t${1:}\n\t}\n\t${2:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Executes effects if limit criteria are met.",
        },
        {
        	"trigger": "trigger_if/else",
        	"contents": "trigger_if = {\n\tlimit = {\n\t\t${1:}\n\t}\n\t${2:}\n}\ntrigger_else = {\n\t${3:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Executes effects if limit criteria are met, if not it will execute the else block.",
        },
        {
        	"trigger": "trigger_if/else_if",
        	"contents": "trigger_if = {\n\tlimit = {\n\t\t${1:}\n\t}\n\t${2:}\n}\ntrigger_else_if = {\n\tlimit = {\n\t\t${3:}\n\t}\n\t${4:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Executes effects if limit criteria are met for if/else_if blocks.",
        },
        {
        	"trigger": "trigger_if/else_if/else",
        	"contents": "trigger_if = {\n\tlimit = {\n\t\t${1:}\n\t}\n\t${2:}\n}\ntrigger_else_if = {\n\tlimit = {\n\t\t${3:}\n\t}\n\t${4:}\n}\ntrigger_else = {\n\t${5:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Execute effects if limit criteria are met for if/else_if, else execute the else block.",
        },
        {
        	"trigger": "switch",
        	"contents": "switch = {\n\ttrigger = ${1:<trigger>}\n\t${2:<trigger_1>} = {\n\t\t\n\t}\n\t${3:<trigger_2>} = {\n\t\t\n\t}\n\tfallback = {\n\t\t\n\t}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Switch on a trigger for the evaluation of another trigger with an optional fallback trigger.",
        },
        {
        	"trigger": "assert_if",
        	"contents": "assert_if = {\n\tlimit = {\n\t\t${1:}\n\t}\n\ttext = ${2:<text>}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Conditionally cause an assert during run time.",
        },
        {
        	"trigger": "assert_read",
        	"contents": "assert_read = ${1:<text/yes>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Conditionally cause an assert during read time.",
        },
        {
        	"trigger": "calc_true_if",
        	"contents": "calc_true_if = {\n\tamount = ${1:<value>}\n\t${2:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Returns true if the specified number of sub-triggers return true.",
        },
        {
        	"trigger": "weighted_calc_true_if",
        	"contents": "calc_true_if = {\n\tamount = ${1:<value>}\n\t${2:}\n}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Returns true if the sum of weights of fulfilled sub-triggers amount to the specified sum.",
        },
        {
        	"trigger": "is_set",
        	"contents": "is_set = ${1:<target>}\n",
        	"annotation": "Trigger",
        	"kind": ["navigation", "T", "All"],
        	"details": "Checks whether the specified scope target has been set.",
        },
   ]
}
